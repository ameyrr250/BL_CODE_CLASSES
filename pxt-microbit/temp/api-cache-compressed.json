{
    "libs/core": {
        "apis": {
            "byQName": {
                "Math": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "jsDoc": "More complex operations with numbers."
                    }
                },
                "Math.E": {
                    "kind": 4,
                    "retType": "number"
                },
                "Math.LN2": {
                    "kind": 4,
                    "retType": "number"
                },
                "Math.LN10": {
                    "kind": 4,
                    "retType": "number"
                },
                "Math.LOG2E": {
                    "kind": 4,
                    "retType": "number"
                },
                "Math.LOG10E": {
                    "kind": 4,
                    "retType": "number"
                },
                "Math.PI": {
                    "kind": 4,
                    "retType": "number"
                },
                "Math.SQRT1_2": {
                    "kind": 4,
                    "retType": "number"
                },
                "Math.SQRT2": {
                    "kind": 4,
                    "retType": "number"
                },
                "Math.map": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "fromHigh": "1023",
                            "toHigh": "4"
                        },
                        "help": "math/map",
                        "weight": 10,
                        "blockGap": "8",
                        "blockId": "math_map",
                        "block": "map %value|from low %fromLow|high %fromHigh|to low %toLow|high %toHigh",
                        "inlineInputMode": "inline",
                        "paramHelp": {
                            "value": "value to map in ranges",
                            "fromLow": "the lower bound of the value's current range",
                            "fromHigh": "the upper bound of the value's current range, eg: 1023",
                            "toLow": "the lower bound of the value's target range",
                            "toHigh": "the upper bound of the value's target range, eg: 4"
                        },
                        "jsDoc": "Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "map ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from low ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "fromLow",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "high ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "fromHigh",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to low ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "toLow",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "high ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "toHigh",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "fromLow",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "fromHigh",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "toLow",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "toHigh",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "value to map in ranges"
                        },
                        {
                            "name": "fromLow",
                            "description": "the lower bound of the value's current range"
                        },
                        {
                            "name": "fromHigh",
                            "description": "the upper bound of the value's current range, eg: 1023",
                            "default": "1023"
                        },
                        {
                            "name": "toLow",
                            "description": "the lower bound of the value's target range"
                        },
                        {
                            "name": "toHigh",
                            "description": "the upper bound of the value's target range, eg: 4",
                            "default": "4"
                        }
                    ]
                },
                "Math.constrain": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/constrain",
                        "weight": 11,
                        "blockGap": "8",
                        "blockId": "math_constrain_value",
                        "block": "constrain %value|between %low|and %high",
                        "paramHelp": {
                            "x": "the number to constrain, all data types",
                            "y": "the lower end of the range, all data types",
                            "z": "the upper end of the range, all data types"
                        },
                        "jsDoc": "Constrains a number to be within a range",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "constrain ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "between ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "low",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "and ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "high",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "low",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "high",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "low"
                        },
                        {
                            "name": "high"
                        }
                    ]
                },
                "Math.isin": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/isin",
                        "weight": 11,
                        "advanced": true,
                        "blockGap": "8",
                        "paramHelp": {
                            "theta": "input angle from 0-255"
                        },
                        "jsDoc": "Returns the sine of an input angle. This is an 8-bit approximation."
                    },
                    "parameters": [
                        {
                            "name": "theta",
                            "description": "input angle from 0-255"
                        }
                    ]
                },
                "Math.icos": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/icos",
                        "weight": 10,
                        "advanced": true,
                        "blockGap": "8",
                        "paramHelp": {
                            "theta": "input angle from 0-255"
                        },
                        "jsDoc": "Returns the cosine of an input angle. This is an 8-bit approximation."
                    },
                    "parameters": [
                        {
                            "name": "theta",
                            "description": "input angle from 0-255"
                        }
                    ]
                },
                "Number": {
                    "kind": 5,
                    "retType": "",
                    "extendsTypes": [
                        "Number"
                    ]
                },
                "Number.EPSILON": {
                    "kind": 4,
                    "retType": "number"
                },
                "DAL": {
                    "kind": 6,
                    "retType": "DAL",
                    "extendsTypes": [
                        "DAL",
                        "Number"
                    ]
                },
                "NumberFormat": {
                    "kind": 6,
                    "retType": "NumberFormat",
                    "extendsTypes": [
                        "NumberFormat",
                        "Number"
                    ]
                },
                "NumberFormat.Int8LE": {
                    "retType": "NumberFormat.Int8LE",
                    "extendsTypes": [
                        "NumberFormat.Int8LE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.INT8_LE"
                },
                "NumberFormat.UInt8LE": {
                    "retType": "NumberFormat.UInt8LE",
                    "extendsTypes": [
                        "NumberFormat.UInt8LE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.UINT8_LE"
                },
                "NumberFormat.Int16LE": {
                    "retType": "NumberFormat.Int16LE",
                    "extendsTypes": [
                        "NumberFormat.Int16LE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.INT16_LE"
                },
                "NumberFormat.UInt16LE": {
                    "retType": "NumberFormat.UInt16LE",
                    "extendsTypes": [
                        "NumberFormat.UInt16LE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.UINT16_LE"
                },
                "NumberFormat.Int32LE": {
                    "retType": "NumberFormat.Int32LE",
                    "extendsTypes": [
                        "NumberFormat.Int32LE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.INT32_LE"
                },
                "NumberFormat.Int8BE": {
                    "retType": "NumberFormat.Int8BE",
                    "extendsTypes": [
                        "NumberFormat.Int8BE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.INT8_BE"
                },
                "NumberFormat.UInt8BE": {
                    "retType": "NumberFormat.UInt8BE",
                    "extendsTypes": [
                        "NumberFormat.UInt8BE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.UINT8_BE"
                },
                "NumberFormat.Int16BE": {
                    "retType": "NumberFormat.Int16BE",
                    "extendsTypes": [
                        "NumberFormat.Int16BE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.INT16_BE"
                },
                "NumberFormat.UInt16BE": {
                    "retType": "NumberFormat.UInt16BE",
                    "extendsTypes": [
                        "NumberFormat.UInt16BE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.UINT16_BE"
                },
                "NumberFormat.Int32BE": {
                    "retType": "NumberFormat.Int32BE",
                    "extendsTypes": [
                        "NumberFormat.Int32BE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.INT32_BE"
                },
                "NumberFormat.UInt32LE": {
                    "retType": "NumberFormat.UInt32LE",
                    "extendsTypes": [
                        "NumberFormat.UInt32LE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.UINT32_LE"
                },
                "NumberFormat.UInt32BE": {
                    "retType": "NumberFormat.UInt32BE",
                    "extendsTypes": [
                        "NumberFormat.UInt32BE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.UINT32_BE"
                },
                "NumberFormat.Float32LE": {
                    "retType": "NumberFormat.Float32LE",
                    "extendsTypes": [
                        "NumberFormat.Float32LE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.FLOAT32_LE"
                },
                "NumberFormat.Float64LE": {
                    "retType": "NumberFormat.Float64LE",
                    "extendsTypes": [
                        "NumberFormat.Float64LE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.FLOAT64_LE"
                },
                "NumberFormat.Float32BE": {
                    "retType": "NumberFormat.Float32BE",
                    "extendsTypes": [
                        "NumberFormat.Float32BE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.FLOAT32_BE"
                },
                "NumberFormat.Float64BE": {
                    "retType": "NumberFormat.Float64BE",
                    "extendsTypes": [
                        "NumberFormat.Float64BE",
                        "Number"
                    ],
                    "pyQName": "NumberFormat.FLOAT64_BE"
                },
                "PerfCounters": {
                    "kind": 6,
                    "retType": "PerfCounters",
                    "extendsTypes": [
                        "PerfCounters",
                        "Number"
                    ]
                },
                "PerfCounters.GC": {
                    "retType": "PerfCounters",
                    "extendsTypes": [
                        "PerfCounters.GC",
                        "Number"
                    ]
                },
                "images": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#7600A8",
                        "weight": 31,
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Creation, manipulation and display of LED images."
                    }
                },
                "basic": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#1E90FF",
                        "weight": 116,
                        "icon": "",
                        "jsDoc": "Provides access to basic micro:bit functionality."
                    }
                },
                "Button": {
                    "kind": 6,
                    "retType": "Button",
                    "extendsTypes": [
                        "Button",
                        "Number"
                    ]
                },
                "Button.A": {
                    "retType": "Button.A",
                    "extendsTypes": [
                        "Button.A",
                        "Number"
                    ]
                },
                "Button.B": {
                    "retType": "Button.B",
                    "extendsTypes": [
                        "Button.B",
                        "Number"
                    ]
                },
                "Button.AB": {
                    "retType": "Button.AB",
                    "attributes": {
                        "block": "A+B",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "A+B",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Button.AB",
                        "Number"
                    ]
                },
                "Dimension": {
                    "kind": 6,
                    "retType": "Dimension",
                    "extendsTypes": [
                        "Dimension",
                        "Number"
                    ]
                },
                "Dimension.X": {
                    "retType": "Dimension.X",
                    "attributes": {
                        "block": "x",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "x",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Dimension.X",
                        "Number"
                    ]
                },
                "Dimension.Y": {
                    "retType": "Dimension.Y",
                    "attributes": {
                        "block": "y",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "y",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Dimension.Y",
                        "Number"
                    ]
                },
                "Dimension.Z": {
                    "retType": "Dimension.Z",
                    "attributes": {
                        "block": "z",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "z",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Dimension.Z",
                        "Number"
                    ]
                },
                "Dimension.Strength": {
                    "retType": "Dimension.Strength",
                    "attributes": {
                        "block": "strength",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Dimension.Strength",
                        "Number"
                    ],
                    "pyQName": "Dimension.STRENGTH"
                },
                "Rotation": {
                    "kind": 6,
                    "retType": "Rotation",
                    "extendsTypes": [
                        "Rotation",
                        "Number"
                    ]
                },
                "Rotation.Pitch": {
                    "retType": "Rotation.Pitch",
                    "attributes": {
                        "block": "pitch",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pitch",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Rotation.Pitch",
                        "Number"
                    ],
                    "pyQName": "Rotation.PITCH"
                },
                "Rotation.Roll": {
                    "retType": "Rotation.Roll",
                    "attributes": {
                        "block": "roll",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "roll",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Rotation.Roll",
                        "Number"
                    ],
                    "pyQName": "Rotation.ROLL"
                },
                "TouchPin": {
                    "kind": 6,
                    "retType": "TouchPin",
                    "extendsTypes": [
                        "TouchPin",
                        "Number"
                    ]
                },
                "TouchPin.P0": {
                    "retType": "TouchPin.P0",
                    "extendsTypes": [
                        "TouchPin.P0",
                        "Number"
                    ]
                },
                "TouchPin.P1": {
                    "retType": "TouchPin.P1",
                    "extendsTypes": [
                        "TouchPin.P1",
                        "Number"
                    ]
                },
                "TouchPin.P2": {
                    "retType": "TouchPin.P2",
                    "extendsTypes": [
                        "TouchPin.P2",
                        "Number"
                    ]
                },
                "AcceleratorRange": {
                    "kind": 6,
                    "retType": "AcceleratorRange",
                    "extendsTypes": [
                        "AcceleratorRange",
                        "Number"
                    ]
                },
                "AcceleratorRange.OneG": {
                    "retType": "AcceleratorRange.OneG",
                    "attributes": {
                        "block": "1g",
                        "jsDoc": "The accelerator measures forces up to 1 gravity",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1g",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AcceleratorRange.OneG",
                        "Number"
                    ],
                    "pyQName": "AcceleratorRange.ONE_G"
                },
                "AcceleratorRange.TwoG": {
                    "retType": "AcceleratorRange.TwoG",
                    "attributes": {
                        "block": "2g",
                        "jsDoc": "The accelerator measures forces up to 2 gravity",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "2g",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AcceleratorRange.TwoG",
                        "Number"
                    ],
                    "pyQName": "AcceleratorRange.TWO_G"
                },
                "AcceleratorRange.FourG": {
                    "retType": "AcceleratorRange.FourG",
                    "attributes": {
                        "block": "4g",
                        "jsDoc": "The accelerator measures forces up to 4 gravity",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "4g",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AcceleratorRange.FourG",
                        "Number"
                    ],
                    "pyQName": "AcceleratorRange.FOUR_G"
                },
                "AcceleratorRange.EightG": {
                    "retType": "AcceleratorRange.EightG",
                    "attributes": {
                        "block": "8g",
                        "jsDoc": "The accelerator measures forces up to 8 gravity",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "8g",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AcceleratorRange.EightG",
                        "Number"
                    ],
                    "pyQName": "AcceleratorRange.EIGHT_G"
                },
                "Gesture": {
                    "kind": 6,
                    "retType": "Gesture",
                    "extendsTypes": [
                        "Gesture",
                        "Number"
                    ]
                },
                "Gesture.Shake": {
                    "retType": "Gesture.Shake",
                    "attributes": {
                        "block": "shake",
                        "jres": "gestures.shake",
                        "jsDoc": "Raised when shaken",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "shake",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.Shake",
                        "Number"
                    ],
                    "pyQName": "Gesture.SHAKE"
                },
                "Gesture.LogoUp": {
                    "retType": "Gesture.LogoUp",
                    "attributes": {
                        "block": "logo up",
                        "jres": "gestures.tiltforward",
                        "jsDoc": "Raised when the logo is upward and the screen is vertical",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "logo up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.LogoUp",
                        "Number"
                    ],
                    "pyQName": "Gesture.LOGO_UP"
                },
                "Gesture.LogoDown": {
                    "retType": "Gesture.LogoDown",
                    "attributes": {
                        "block": "logo down",
                        "jres": "gestures.tiltbackwards",
                        "jsDoc": "Raised when the logo is downward and the screen is vertical",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "logo down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.LogoDown",
                        "Number"
                    ],
                    "pyQName": "Gesture.LOGO_DOWN"
                },
                "Gesture.ScreenUp": {
                    "retType": "Gesture.ScreenUp",
                    "attributes": {
                        "block": "screen up",
                        "jres": "gestures.frontsideup",
                        "jsDoc": "Raised when the screen is pointing up and the board is horizontal",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "screen up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.ScreenUp",
                        "Number"
                    ],
                    "pyQName": "Gesture.SCREEN_UP"
                },
                "Gesture.ScreenDown": {
                    "retType": "Gesture.ScreenDown",
                    "attributes": {
                        "block": "screen down",
                        "jres": "gestures.backsideup",
                        "jsDoc": "Raised when the screen is pointing down and the board is horizontal",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "screen down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.ScreenDown",
                        "Number"
                    ],
                    "pyQName": "Gesture.SCREEN_DOWN"
                },
                "Gesture.TiltLeft": {
                    "retType": "Gesture.TiltLeft",
                    "attributes": {
                        "block": "tilt left",
                        "jres": "gestures.tiltleft",
                        "jsDoc": "Raised when the screen is pointing left",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "tilt left",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.TiltLeft",
                        "Number"
                    ],
                    "pyQName": "Gesture.TILT_LEFT"
                },
                "Gesture.TiltRight": {
                    "retType": "Gesture.TiltRight",
                    "attributes": {
                        "block": "tilt right",
                        "jres": "gestures.tiltright",
                        "jsDoc": "Raised when the screen is pointing right",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "tilt right",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.TiltRight",
                        "Number"
                    ],
                    "pyQName": "Gesture.TILT_RIGHT"
                },
                "Gesture.FreeFall": {
                    "retType": "Gesture.FreeFall",
                    "attributes": {
                        "block": "free fall",
                        "jres": "gestures.freefall",
                        "jsDoc": "Raised when the board is falling!",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "free fall",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.FreeFall",
                        "Number"
                    ],
                    "pyQName": "Gesture.FREE_FALL"
                },
                "Gesture.ThreeG": {
                    "retType": "Gesture.ThreeG",
                    "attributes": {
                        "block": "3g",
                        "jres": "gestures.impact3g",
                        "jsDoc": "Raised when a 3G shock is detected",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "3g",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.ThreeG",
                        "Number"
                    ],
                    "pyQName": "Gesture.THREE_G"
                },
                "Gesture.SixG": {
                    "retType": "Gesture.SixG",
                    "attributes": {
                        "block": "6g",
                        "jres": "gestures.impact6g",
                        "jsDoc": "Raised when a 6G shock is detected",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "6g",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.SixG",
                        "Number"
                    ],
                    "pyQName": "Gesture.SIX_G"
                },
                "Gesture.EightG": {
                    "retType": "Gesture.EightG",
                    "attributes": {
                        "block": "8g",
                        "jres": "gestures.impact8g",
                        "jsDoc": "Raised when a 8G shock is detected",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "8g",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Gesture.EightG",
                        "Number"
                    ],
                    "pyQName": "Gesture.EIGHT_G"
                },
                "MesDpadButtonInfo": {
                    "kind": 6,
                    "retType": "MesDpadButtonInfo",
                    "extendsTypes": [
                        "MesDpadButtonInfo",
                        "Number"
                    ]
                },
                "MesDpadButtonInfo.ADown": {
                    "retType": "MesDpadButtonInfo.ADown",
                    "attributes": {
                        "block": "A down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "A down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo.ADown",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo.ADOWN"
                },
                "MesDpadButtonInfo.AUp": {
                    "retType": "MesDpadButtonInfo.AUp",
                    "attributes": {
                        "block": "A up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "A up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo.AUp",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo.AUP"
                },
                "MesDpadButtonInfo.BDown": {
                    "retType": "MesDpadButtonInfo.BDown",
                    "attributes": {
                        "block": "B down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "B down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo.BDown",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo.BDOWN"
                },
                "MesDpadButtonInfo.BUp": {
                    "retType": "MesDpadButtonInfo.BUp",
                    "attributes": {
                        "block": "B up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "B up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo.BUp",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo.BUP"
                },
                "MesDpadButtonInfo.CDown": {
                    "retType": "MesDpadButtonInfo.CDown",
                    "attributes": {
                        "block": "C down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "C down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo.CDown",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo.CDOWN"
                },
                "MesDpadButtonInfo.CUp": {
                    "retType": "MesDpadButtonInfo.CUp",
                    "attributes": {
                        "block": "C up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "C up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo.CUp",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo.CUP"
                },
                "MesDpadButtonInfo.DDown": {
                    "retType": "MesDpadButtonInfo.DDown",
                    "attributes": {
                        "block": "D down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "D down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo.DDown",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo.DDOWN"
                },
                "MesDpadButtonInfo.DUp": {
                    "retType": "MesDpadButtonInfo.DUp",
                    "attributes": {
                        "block": "D up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "D up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo.DUp",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo.DUP"
                },
                "MesDpadButtonInfo._1Down": {
                    "retType": "MesDpadButtonInfo._1Down",
                    "attributes": {
                        "block": "1 down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1 down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo._1Down",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo._1_DOWN"
                },
                "MesDpadButtonInfo._1Up": {
                    "retType": "MesDpadButtonInfo._1Up",
                    "attributes": {
                        "block": "1 up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1 up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo._1Up",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo._1_UP"
                },
                "MesDpadButtonInfo._2Down": {
                    "retType": "MesDpadButtonInfo._2Down",
                    "attributes": {
                        "block": "2 down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "2 down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo._2Down",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo._2_DOWN"
                },
                "MesDpadButtonInfo._2Up": {
                    "retType": "MesDpadButtonInfo._2Up",
                    "attributes": {
                        "block": "2 up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "2 up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo._2Up",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo._2_UP"
                },
                "MesDpadButtonInfo._3Down": {
                    "retType": "MesDpadButtonInfo._3Down",
                    "attributes": {
                        "block": "3 down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "3 down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo._3Down",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo._3_DOWN"
                },
                "MesDpadButtonInfo._3Up": {
                    "retType": "MesDpadButtonInfo._3Up",
                    "attributes": {
                        "block": "3 up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "3 up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo._3Up",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo._3_UP"
                },
                "MesDpadButtonInfo._4Down": {
                    "retType": "MesDpadButtonInfo._4Down",
                    "attributes": {
                        "block": "4 down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "4 down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo._4Down",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo._4_DOWN"
                },
                "MesDpadButtonInfo._4Up": {
                    "retType": "MesDpadButtonInfo._4Up",
                    "attributes": {
                        "block": "4 up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "4 up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDpadButtonInfo._4Up",
                        "Number"
                    ],
                    "pyQName": "MesDpadButtonInfo._4_UP"
                },
                "input": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#D400D4",
                        "weight": 111,
                        "icon": "",
                        "jsDoc": "Events and data from sensors"
                    }
                },
                "EventCreationMode": {
                    "kind": 6,
                    "retType": "EventCreationMode",
                    "attributes": {
                        "jsDoc": "How to create the event."
                    },
                    "extendsTypes": [
                        "EventCreationMode",
                        "Number"
                    ]
                },
                "EventCreationMode.CreateOnly": {
                    "retType": "EventCreationMode.CreateOnly",
                    "attributes": {
                        "jsDoc": "MicroBitEvent is initialised, and no further processing takes place."
                    },
                    "extendsTypes": [
                        "EventCreationMode.CreateOnly",
                        "Number"
                    ],
                    "pyQName": "EventCreationMode.CREATE_ONLY"
                },
                "EventCreationMode.CreateAndFire": {
                    "retType": "EventCreationMode.CreateAndFire",
                    "attributes": {
                        "jsDoc": "MicroBitEvent is initialised, and its event handlers are immediately fired (not suitable for use in interrupts!)."
                    },
                    "extendsTypes": [
                        "EventCreationMode.CreateAndFire",
                        "Number"
                    ],
                    "pyQName": "EventCreationMode.CREATE_AND_FIRE"
                },
                "EventBusSource": {
                    "kind": 6,
                    "retType": "EventBusSource",
                    "extendsTypes": [
                        "EventBusSource",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_BUTTON_A": {
                    "retType": "EventBusSource.MICROBIT_ID_BUTTON_A",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_BUTTON_A",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_BUTTON_B": {
                    "retType": "EventBusSource.MICROBIT_ID_BUTTON_B",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_BUTTON_B",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_BUTTON_AB": {
                    "retType": "EventBusSource.MICROBIT_ID_BUTTON_AB",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_BUTTON_AB",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_RADIO": {
                    "retType": "EventBusSource.MICROBIT_ID_RADIO",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_RADIO",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_GESTURE": {
                    "retType": "EventBusSource.MICROBIT_ID_GESTURE",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_GESTURE",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_ACCELEROMETER": {
                    "retType": "EventBusSource.MICROBIT_ID_ACCELEROMETER",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_ACCELEROMETER",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P0": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P0",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P0",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P1": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P1",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P1",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P2": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P2",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P2",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P3": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P3",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P3",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P4": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P4",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P4",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P5": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P5",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P5",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P6": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P6",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P6",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P7": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P7",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P7",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P8": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P8",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P8",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P9": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P9",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P9",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P10": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P10",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P10",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P11": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P11",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P11",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P12": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P12",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P12",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P13": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P13",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P13",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P14": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P14",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P14",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P15": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P15",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P15",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P16": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P16",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P16",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P19": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P19",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P19",
                        "Number"
                    ]
                },
                "EventBusSource.MICROBIT_ID_IO_P20": {
                    "retType": "EventBusSource.MICROBIT_ID_IO_P20",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MICROBIT_ID_IO_P20",
                        "Number"
                    ]
                },
                "EventBusSource.MES_DEVICE_INFO_ID": {
                    "retType": "EventBusSource.MES_DEVICE_INFO_ID",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MES_DEVICE_INFO_ID",
                        "Number"
                    ]
                },
                "EventBusSource.MES_SIGNAL_STRENGTH_ID": {
                    "retType": "EventBusSource.MES_SIGNAL_STRENGTH_ID",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MES_SIGNAL_STRENGTH_ID",
                        "Number"
                    ]
                },
                "EventBusSource.MES_DPAD_CONTROLLER_ID": {
                    "retType": "EventBusSource.MES_DPAD_CONTROLLER_ID",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MES_DPAD_CONTROLLER_ID",
                        "Number"
                    ]
                },
                "EventBusSource.MES_BROADCAST_GENERAL_ID": {
                    "retType": "EventBusSource.MES_BROADCAST_GENERAL_ID",
                    "attributes": {
                        "blockIdentity": "control.eventSourceId"
                    },
                    "extendsTypes": [
                        "EventBusSource.MES_BROADCAST_GENERAL_ID",
                        "Number"
                    ]
                },
                "EventBusValue": {
                    "kind": 6,
                    "retType": "EventBusValue",
                    "extendsTypes": [
                        "EventBusValue",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_EVT_ANY": {
                    "retType": "EventBusValue.MICROBIT_EVT_ANY",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_EVT_ANY",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_BUTTON_EVT_DOWN": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_BUTTON_EVT_UP": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_BUTTON_EVT_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_BUTTON_EVT_CLICK": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_CLICK",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_BUTTON_EVT_CLICK",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_RADIO_EVT_DATAGRAM": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_RADIO_EVT_DATAGRAM",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_ACCELEROMETER_EVT_DATA_UPDATE": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_ACCELEROMETER_EVT_DATA_UPDATE",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_PIN_EVT_RISE": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_PIN_EVT_RISE",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_PIN_EVT_FALL": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_CLICK",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_PIN_EVT_FALL",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_PIN_EVT_PULSE_HI": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_HI",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_PIN_EVT_PULSE_HI",
                        "Number"
                    ]
                },
                "EventBusValue.MICROBIT_PIN_EVT_PULSE_LO": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_LO",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MICROBIT_PIN_EVT_PULSE_LO",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_ALARM1": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM1",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_ALARM1",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_ALARM2": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM2",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_ALARM2",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_ALARM3": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM3",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_ALARM3",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_ALARM4": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM4",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_ALARM4",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_ALARM5": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM5",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_ALARM5",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_ALARM6": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM6",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_ALARM6",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_DISPLAY_TOAST": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_DISPLAY_TOAST",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_FIND_MY_PHONE": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_LO",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_FIND_MY_PHONE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_PLAY_RINGTONE": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_HI",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_PLAY_RINGTONE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_PLAY_SOUND": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_CLICK",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_PLAY_SOUND",
                        "Number"
                    ]
                },
                "EventBusValue.MES_ALERT_EVT_VIBRATE": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_ALERT_EVT_VIBRATE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_CAMERA_EVT_LAUNCH_PHOTO_MODE": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_CAMERA_EVT_LAUNCH_PHOTO_MODE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_CAMERA_EVT_LAUNCH_VIDEO_MODE": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_CAMERA_EVT_LAUNCH_VIDEO_MODE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_CAMERA_EVT_START_VIDEO_CAPTURE": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_HI",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_CAMERA_EVT_START_VIDEO_CAPTURE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_CAMERA_EVT_STOP_PHOTO_MODE": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM1",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_CAMERA_EVT_STOP_PHOTO_MODE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_CAMERA_EVT_STOP_VIDEO_CAPTURE": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_LO",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_CAMERA_EVT_STOP_VIDEO_CAPTURE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_CAMERA_EVT_STOP_VIDEO_MODE": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM2",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_CAMERA_EVT_STOP_VIDEO_MODE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_CAMERA_EVT_TAKE_PHOTO": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_CLICK",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_CAMERA_EVT_TAKE_PHOTO",
                        "Number"
                    ]
                },
                "EventBusValue.MES_CAMERA_EVT_TOGGLE_FRONT_REAR": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM3",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_CAMERA_EVT_TOGGLE_FRONT_REAR",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DEVICE_DISPLAY_OFF": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_LO",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DEVICE_DISPLAY_OFF",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DEVICE_DISPLAY_ON": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM1",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DEVICE_DISPLAY_ON",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DEVICE_GESTURE_DEVICE_SHAKEN": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_HI",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DEVICE_GESTURE_DEVICE_SHAKEN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DEVICE_INCOMING_CALL": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM2",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DEVICE_INCOMING_CALL",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DEVICE_INCOMING_MESSAGE": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM3",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DEVICE_INCOMING_MESSAGE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DEVICE_ORIENTATION_LANDSCAPE": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DEVICE_ORIENTATION_LANDSCAPE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DEVICE_ORIENTATION_PORTRAIT": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DEVICE_ORIENTATION_PORTRAIT",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_1_DOWN": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM4",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_1_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_1_UP": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM5",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_1_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_2_DOWN": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM6",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_2_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_2_UP": {
                    "retType": "EventBusValue.MES_DPAD_BUTTON_2_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_2_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_3_DOWN": {
                    "retType": "EventBusValue.MES_DPAD_BUTTON_3_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_3_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_3_UP": {
                    "retType": "EventBusValue.MES_DPAD_BUTTON_3_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_3_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_4_DOWN": {
                    "retType": "EventBusValue.MES_DPAD_BUTTON_4_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_4_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_4_UP": {
                    "retType": "EventBusValue.MES_DPAD_BUTTON_4_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_4_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_A_DOWN": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_A_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_A_UP": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_A_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_B_DOWN": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_CLICK",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_B_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_B_UP": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_HI",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_B_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_C_DOWN": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_LO",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_C_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_C_UP": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM1",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_C_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_D_DOWN": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM2",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_D_DOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_DPAD_BUTTON_D_UP": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM3",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_DPAD_BUTTON_D_UP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_FORWARD": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM1",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_FORWARD",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_NEXTTRACK": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_HI",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_NEXTTRACK",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_PAUSE": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_UP",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_PAUSE",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_PLAY": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_DOWN",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_PLAY",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_PREVTRACK": {
                    "retType": "EventBusValue.MICROBIT_PIN_EVT_PULSE_LO",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_PREVTRACK",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_REWIND": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM2",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_REWIND",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_STOP": {
                    "retType": "EventBusValue.MICROBIT_BUTTON_EVT_CLICK",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_STOP",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_VOLUMEDOWN": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM4",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_VOLUMEDOWN",
                        "Number"
                    ]
                },
                "EventBusValue.MES_REMOTE_CONTROL_EVT_VOLUMEUP": {
                    "retType": "EventBusValue.MES_ALERT_EVT_ALARM3",
                    "attributes": {
                        "blockIdentity": "control.eventValueId"
                    },
                    "extendsTypes": [
                        "EventBusValue.MES_REMOTE_CONTROL_EVT_VOLUMEUP",
                        "Number"
                    ]
                },
                "EventFlags": {
                    "kind": 6,
                    "retType": "EventFlags",
                    "extendsTypes": [
                        "EventFlags",
                        "Number"
                    ]
                },
                "EventFlags.QueueIfBusy": {
                    "retType": "EventFlags.QueueIfBusy",
                    "extendsTypes": [
                        "EventFlags.QueueIfBusy",
                        "Number"
                    ],
                    "pyQName": "EventFlags.QUEUE_IF_BUSY"
                },
                "EventFlags.DropIfBusy": {
                    "retType": "EventFlags.DropIfBusy",
                    "extendsTypes": [
                        "EventFlags.DropIfBusy",
                        "Number"
                    ],
                    "pyQName": "EventFlags.DROP_IF_BUSY"
                },
                "EventFlags.Reentrant": {
                    "retType": "EventFlags.Reentrant",
                    "extendsTypes": [
                        "EventFlags.Reentrant",
                        "Number"
                    ],
                    "pyQName": "EventFlags.REENTRANT"
                },
                "control": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 1,
                        "color": "#333333",
                        "advanced": true,
                        "icon": "",
                        "jsDoc": "Runtime and event utilities."
                    }
                },
                "DisplayMode": {
                    "kind": 6,
                    "retType": "DisplayMode",
                    "extendsTypes": [
                        "DisplayMode",
                        "Number"
                    ]
                },
                "DisplayMode.BlackAndWhite": {
                    "retType": "DisplayMode.BlackAndWhite",
                    "attributes": {
                        "block": "black and white",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "black and white",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "DisplayMode.BlackAndWhite",
                        "Number"
                    ],
                    "pyQName": "DisplayMode.BLACK_AND_WHITE"
                },
                "DisplayMode.BackAndWhite": {
                    "retType": "DisplayMode.BlackAndWhite",
                    "attributes": {
                        "blockHidden": true
                    },
                    "extendsTypes": [
                        "DisplayMode.BackAndWhite",
                        "Number"
                    ],
                    "pyQName": "DisplayMode.BACK_AND_WHITE"
                },
                "DisplayMode.Greyscale": {
                    "retType": "DisplayMode.Greyscale",
                    "attributes": {
                        "block": "greyscale",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "greyscale",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "DisplayMode.Greyscale",
                        "Number"
                    ],
                    "pyQName": "DisplayMode.GREYSCALE"
                },
                "led": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#5B2D43",
                        "weight": 101,
                        "icon": "",
                        "jsDoc": "Control of the LED screen."
                    }
                },
                "DigitalPin": {
                    "kind": 6,
                    "retType": "DigitalPin",
                    "extendsTypes": [
                        "DigitalPin",
                        "Number"
                    ]
                },
                "DigitalPin.P0": {
                    "retType": "DigitalPin.P0",
                    "extendsTypes": [
                        "DigitalPin.P0",
                        "Number"
                    ]
                },
                "DigitalPin.P1": {
                    "retType": "DigitalPin.P1",
                    "extendsTypes": [
                        "DigitalPin.P1",
                        "Number"
                    ]
                },
                "DigitalPin.P2": {
                    "retType": "DigitalPin.P2",
                    "extendsTypes": [
                        "DigitalPin.P2",
                        "Number"
                    ]
                },
                "DigitalPin.P3": {
                    "retType": "DigitalPin.P3",
                    "extendsTypes": [
                        "DigitalPin.P3",
                        "Number"
                    ]
                },
                "DigitalPin.P4": {
                    "retType": "DigitalPin.P4",
                    "extendsTypes": [
                        "DigitalPin.P4",
                        "Number"
                    ]
                },
                "DigitalPin.P5": {
                    "retType": "DigitalPin.P5",
                    "extendsTypes": [
                        "DigitalPin.P5",
                        "Number"
                    ]
                },
                "DigitalPin.P6": {
                    "retType": "DigitalPin.P6",
                    "extendsTypes": [
                        "DigitalPin.P6",
                        "Number"
                    ]
                },
                "DigitalPin.P7": {
                    "retType": "DigitalPin.P7",
                    "extendsTypes": [
                        "DigitalPin.P7",
                        "Number"
                    ]
                },
                "DigitalPin.P8": {
                    "retType": "DigitalPin.P8",
                    "extendsTypes": [
                        "DigitalPin.P8",
                        "Number"
                    ]
                },
                "DigitalPin.P9": {
                    "retType": "DigitalPin.P9",
                    "extendsTypes": [
                        "DigitalPin.P9",
                        "Number"
                    ]
                },
                "DigitalPin.P10": {
                    "retType": "DigitalPin.P10",
                    "extendsTypes": [
                        "DigitalPin.P10",
                        "Number"
                    ]
                },
                "DigitalPin.P11": {
                    "retType": "DigitalPin.P11",
                    "extendsTypes": [
                        "DigitalPin.P11",
                        "Number"
                    ]
                },
                "DigitalPin.P12": {
                    "retType": "DigitalPin.P12",
                    "extendsTypes": [
                        "DigitalPin.P12",
                        "Number"
                    ]
                },
                "DigitalPin.P13": {
                    "retType": "DigitalPin.P13",
                    "extendsTypes": [
                        "DigitalPin.P13",
                        "Number"
                    ]
                },
                "DigitalPin.P14": {
                    "retType": "DigitalPin.P14",
                    "extendsTypes": [
                        "DigitalPin.P14",
                        "Number"
                    ]
                },
                "DigitalPin.P15": {
                    "retType": "DigitalPin.P15",
                    "extendsTypes": [
                        "DigitalPin.P15",
                        "Number"
                    ]
                },
                "DigitalPin.P16": {
                    "retType": "DigitalPin.P16",
                    "extendsTypes": [
                        "DigitalPin.P16",
                        "Number"
                    ]
                },
                "DigitalPin.P19": {
                    "retType": "DigitalPin.P19",
                    "attributes": {
                        "blockHidden": true
                    },
                    "extendsTypes": [
                        "DigitalPin.P19",
                        "Number"
                    ]
                },
                "DigitalPin.P20": {
                    "retType": "DigitalPin.P20",
                    "attributes": {
                        "blockHidden": true
                    },
                    "extendsTypes": [
                        "DigitalPin.P20",
                        "Number"
                    ]
                },
                "AnalogPin": {
                    "kind": 6,
                    "retType": "AnalogPin",
                    "extendsTypes": [
                        "AnalogPin",
                        "Number"
                    ]
                },
                "AnalogPin.P0": {
                    "retType": "AnalogPin.P0",
                    "extendsTypes": [
                        "AnalogPin.P0",
                        "Number"
                    ]
                },
                "AnalogPin.P1": {
                    "retType": "AnalogPin.P1",
                    "extendsTypes": [
                        "AnalogPin.P1",
                        "Number"
                    ]
                },
                "AnalogPin.P2": {
                    "retType": "AnalogPin.P2",
                    "extendsTypes": [
                        "AnalogPin.P2",
                        "Number"
                    ]
                },
                "AnalogPin.P3": {
                    "retType": "AnalogPin.P3",
                    "extendsTypes": [
                        "AnalogPin.P3",
                        "Number"
                    ]
                },
                "AnalogPin.P4": {
                    "retType": "AnalogPin.P4",
                    "extendsTypes": [
                        "AnalogPin.P4",
                        "Number"
                    ]
                },
                "AnalogPin.P10": {
                    "retType": "AnalogPin.P10",
                    "extendsTypes": [
                        "AnalogPin.P10",
                        "Number"
                    ]
                },
                "AnalogPin.P5": {
                    "retType": "AnalogPin.P5",
                    "attributes": {
                        "block": "P5 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P5 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P5",
                        "Number"
                    ]
                },
                "AnalogPin.P6": {
                    "retType": "AnalogPin.P6",
                    "attributes": {
                        "block": "P6 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P6 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P6",
                        "Number"
                    ]
                },
                "AnalogPin.P7": {
                    "retType": "AnalogPin.P7",
                    "attributes": {
                        "block": "P7 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P7 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P7",
                        "Number"
                    ]
                },
                "AnalogPin.P8": {
                    "retType": "AnalogPin.P8",
                    "attributes": {
                        "block": "P8 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P8 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P8",
                        "Number"
                    ]
                },
                "AnalogPin.P9": {
                    "retType": "AnalogPin.P9",
                    "attributes": {
                        "block": "P9 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P9 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P9",
                        "Number"
                    ]
                },
                "AnalogPin.P11": {
                    "retType": "AnalogPin.P11",
                    "attributes": {
                        "block": "P11 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P11 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P11",
                        "Number"
                    ]
                },
                "AnalogPin.P12": {
                    "retType": "AnalogPin.P12",
                    "attributes": {
                        "block": "P12 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P12 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P12",
                        "Number"
                    ]
                },
                "AnalogPin.P13": {
                    "retType": "AnalogPin.P13",
                    "attributes": {
                        "block": "P13 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P13 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P13",
                        "Number"
                    ]
                },
                "AnalogPin.P14": {
                    "retType": "AnalogPin.P14",
                    "attributes": {
                        "block": "P14 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P14 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P14",
                        "Number"
                    ]
                },
                "AnalogPin.P15": {
                    "retType": "AnalogPin.P15",
                    "attributes": {
                        "block": "P15 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P15 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P15",
                        "Number"
                    ]
                },
                "AnalogPin.P16": {
                    "retType": "AnalogPin.P16",
                    "attributes": {
                        "block": "P16 (write only)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P16 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P16",
                        "Number"
                    ]
                },
                "AnalogPin.P19": {
                    "retType": "AnalogPin.P19",
                    "attributes": {
                        "block": "P19 (write only)",
                        "blockHidden": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P19 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P19",
                        "Number"
                    ]
                },
                "AnalogPin.P20": {
                    "retType": "AnalogPin.P20",
                    "attributes": {
                        "block": "P20 (write only)",
                        "blockHidden": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "P20 (write only)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AnalogPin.P20",
                        "Number"
                    ]
                },
                "PulseValue": {
                    "kind": 6,
                    "retType": "PulseValue",
                    "extendsTypes": [
                        "PulseValue",
                        "Number"
                    ]
                },
                "PulseValue.High": {
                    "retType": "PulseValue.High",
                    "attributes": {
                        "block": "high",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "high",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PulseValue.High",
                        "Number"
                    ],
                    "pyQName": "PulseValue.HIGH"
                },
                "PulseValue.Low": {
                    "retType": "PulseValue.Low",
                    "attributes": {
                        "block": "low",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "low",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PulseValue.Low",
                        "Number"
                    ],
                    "pyQName": "PulseValue.LOW"
                },
                "PinPullMode": {
                    "kind": 6,
                    "retType": "PinPullMode",
                    "extendsTypes": [
                        "PinPullMode",
                        "Number"
                    ]
                },
                "PinPullMode.PullDown": {
                    "retType": "PinPullMode.PullDown",
                    "attributes": {
                        "block": "down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinPullMode.PullDown",
                        "Number"
                    ],
                    "pyQName": "PinPullMode.PULL_DOWN"
                },
                "PinPullMode.PullUp": {
                    "retType": "PinPullMode.PullUp",
                    "attributes": {
                        "block": "up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinPullMode.PullUp",
                        "Number"
                    ],
                    "pyQName": "PinPullMode.PULL_UP"
                },
                "PinPullMode.PullNone": {
                    "retType": "PinPullMode.PullNone",
                    "attributes": {
                        "block": "none",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "none",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinPullMode.PullNone",
                        "Number"
                    ],
                    "pyQName": "PinPullMode.PULL_NONE"
                },
                "PinEventType": {
                    "kind": 6,
                    "retType": "PinEventType",
                    "extendsTypes": [
                        "PinEventType",
                        "Number"
                    ]
                },
                "PinEventType.Edge": {
                    "retType": "PinEventType.Edge",
                    "attributes": {
                        "block": "edge",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "edge",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinEventType.Edge",
                        "Number"
                    ],
                    "pyQName": "PinEventType.EDGE"
                },
                "PinEventType.Pulse": {
                    "retType": "PinEventType.Pulse",
                    "attributes": {
                        "block": "pulse",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pulse",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinEventType.Pulse",
                        "Number"
                    ],
                    "pyQName": "PinEventType.PULSE"
                },
                "PinEventType.Touch": {
                    "retType": "PinEventType.Touch",
                    "attributes": {
                        "block": "touch",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "touch",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinEventType.Touch",
                        "Number"
                    ],
                    "pyQName": "PinEventType.TOUCH"
                },
                "PinEventType.None": {
                    "retType": "PinEventType.None",
                    "attributes": {
                        "block": "none",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "none",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinEventType.None",
                        "Number"
                    ],
                    "pyQName": "PinEventType.NONE"
                },
                "SerialPin": {
                    "kind": 6,
                    "retType": "SerialPin",
                    "extendsTypes": [
                        "SerialPin",
                        "Number"
                    ]
                },
                "SerialPin.P0": {
                    "retType": "SerialPin.P0",
                    "extendsTypes": [
                        "SerialPin.P0",
                        "Number"
                    ]
                },
                "SerialPin.P1": {
                    "retType": "SerialPin.P1",
                    "extendsTypes": [
                        "SerialPin.P1",
                        "Number"
                    ]
                },
                "SerialPin.P2": {
                    "retType": "SerialPin.P2",
                    "extendsTypes": [
                        "SerialPin.P2",
                        "Number"
                    ]
                },
                "SerialPin.P8": {
                    "retType": "SerialPin.P8",
                    "extendsTypes": [
                        "SerialPin.P8",
                        "Number"
                    ]
                },
                "SerialPin.P12": {
                    "retType": "SerialPin.P12",
                    "extendsTypes": [
                        "SerialPin.P12",
                        "Number"
                    ]
                },
                "SerialPin.P13": {
                    "retType": "SerialPin.P13",
                    "extendsTypes": [
                        "SerialPin.P13",
                        "Number"
                    ]
                },
                "SerialPin.P14": {
                    "retType": "SerialPin.P14",
                    "extendsTypes": [
                        "SerialPin.P14",
                        "Number"
                    ]
                },
                "SerialPin.P15": {
                    "retType": "SerialPin.P15",
                    "extendsTypes": [
                        "SerialPin.P15",
                        "Number"
                    ]
                },
                "SerialPin.P16": {
                    "retType": "SerialPin.P16",
                    "extendsTypes": [
                        "SerialPin.P16",
                        "Number"
                    ]
                },
                "SerialPin.USB_TX": {
                    "retType": "SerialPin.USB_TX",
                    "extendsTypes": [
                        "SerialPin.USB_TX",
                        "Number"
                    ]
                },
                "SerialPin.USB_RX": {
                    "retType": "SerialPin.USB_RX",
                    "extendsTypes": [
                        "SerialPin.USB_RX",
                        "Number"
                    ]
                },
                "BaudRate": {
                    "kind": 6,
                    "retType": "BaudRate",
                    "extendsTypes": [
                        "BaudRate",
                        "Number"
                    ]
                },
                "BaudRate.BaudRate115200": {
                    "retType": "BaudRate.BaudRate115200",
                    "attributes": {
                        "block": "115200",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "115200",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate115200",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE115200"
                },
                "BaudRate.BaudRate57600": {
                    "retType": "BaudRate.BaudRate57600",
                    "attributes": {
                        "block": "57600",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "57600",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate57600",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE57600"
                },
                "BaudRate.BaudRate38400": {
                    "retType": "BaudRate.BaudRate38400",
                    "attributes": {
                        "block": "38400",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "38400",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate38400",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE38400"
                },
                "BaudRate.BaudRate31250": {
                    "retType": "BaudRate.BaudRate31250",
                    "attributes": {
                        "block": "31250",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "31250",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate31250",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE31250"
                },
                "BaudRate.BaudRate28800": {
                    "retType": "BaudRate.BaudRate28800",
                    "attributes": {
                        "block": "28800",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "28800",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate28800",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE28800"
                },
                "BaudRate.BaudRate19200": {
                    "retType": "BaudRate.BaudRate19200",
                    "attributes": {
                        "block": "19200",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "19200",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate19200",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE19200"
                },
                "BaudRate.BaudRate14400": {
                    "retType": "BaudRate.BaudRate14400",
                    "attributes": {
                        "block": "14400",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "14400",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate14400",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE14400"
                },
                "BaudRate.BaudRate9600": {
                    "retType": "BaudRate.BaudRate9600",
                    "attributes": {
                        "block": "9600",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "9600",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate9600",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE9600"
                },
                "BaudRate.BaudRate4800": {
                    "retType": "BaudRate.BaudRate4800",
                    "attributes": {
                        "block": "4800",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "4800",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate4800",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE4800"
                },
                "BaudRate.BaudRate2400": {
                    "retType": "BaudRate.BaudRate2400",
                    "attributes": {
                        "block": "2400",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "2400",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate2400",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE2400"
                },
                "BaudRate.BaudRate1200": {
                    "retType": "BaudRate.BaudRate1200",
                    "attributes": {
                        "block": "1200",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1200",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BaudRate.BaudRate1200",
                        "Number"
                    ],
                    "pyQName": "BaudRate.BAUD_RATE1200"
                },
                "serial": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 2,
                        "color": "#002050",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Reading and writing data over a serial connection."
                    }
                },
                "images.createImage": {
                    "kind": -3,
                    "retType": "Image",
                    "attributes": {
                        "weight": 75,
                        "help": "images/create-image",
                        "blockId": "device_build_image",
                        "block": "create image",
                        "parts": "ledmatrix",
                        "imageLiteral": 1,
                        "jsDoc": "Creates an image that fits on the LED screen.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create image",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "leds",
                            "type": "string"
                        }
                    ],
                    "pyQName": "images.create_image"
                },
                "images.createBigImage": {
                    "kind": -3,
                    "retType": "Image",
                    "attributes": {
                        "weight": 74,
                        "help": "images/create-big-image",
                        "blockId": "device_build_big_image",
                        "block": "create big image",
                        "imageLiteral": 2,
                        "parts": "ledmatrix",
                        "jsDoc": "Creates an image with 2 frames.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create big image",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "leds",
                            "type": "string"
                        }
                    ],
                    "pyQName": "images.create_big_image"
                },
                "Image": {
                    "kind": 9,
                    "retType": "Image",
                    "extendsTypes": []
                },
                "Image.plotImage": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "xOffset": "0"
                        },
                        "help": "images/plot-image",
                        "parts": "ledmatrix",
                        "explicitDefaults": [
                            "xOffset"
                        ],
                        "jsDoc": "Plots the image at a given column to the screen"
                    },
                    "parameters": [
                        {
                            "name": "xOffset",
                            "initializer": "0",
                            "default": "0"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Image.plot_image"
                },
                "Image.showImage": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "interval": "400"
                        },
                        "callingConvention": 1,
                        "help": "images/show-image",
                        "weight": 80,
                        "blockNamespace": "images",
                        "blockId": "device_show_image_offset",
                        "block": "show image %sprite(myImage)|at offset %offset",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "async": "true",
                        "explicitDefaults": [
                            "interval"
                        ],
                        "paramHelp": {
                            "xOffset": "column index to start displaying the image"
                        },
                        "jsDoc": "Shows an frame from the image at offset ``x offset``.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "show image ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false,
                                    "varName": "myImage"
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "at offset ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "offset",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false,
                                    "varName": "myImage"
                                },
                                {
                                    "kind": "param",
                                    "name": "offset",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "xOffset",
                            "description": "column index to start displaying the image"
                        },
                        {
                            "name": "interval",
                            "initializer": "400",
                            "default": "400"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Image.show_image"
                },
                "Image.plotFrame": {
                    "kind": -1,
                    "attributes": {
                        "help": "images/plot-frame",
                        "weight": 80,
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "xOffset": "column index to start displaying the image"
                        },
                        "jsDoc": "Draws the ``index``-th frame of the image on the screen."
                    },
                    "parameters": [
                        {
                            "name": "xOffset",
                            "description": "column index to start displaying the image"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Image.plot_frame"
                },
                "Image.scrollImage": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "frameOffset": "1",
                            "interval": "200"
                        },
                        "callingConvention": 1,
                        "help": "images/scroll-image",
                        "weight": 79,
                        "async": "true",
                        "blockNamespace": "images",
                        "blockId": "device_scroll_image",
                        "block": "scroll image %sprite(myImage)|with offset %frameoffset|and interval (ms) %delay",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "frameOffset": "x offset moved on each animation step, eg: 1, 2, 5",
                            "interval": "time between each animation step in milli seconds, eg: 200"
                        },
                        "jsDoc": "Scrolls an image .",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "scroll image ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false,
                                    "varName": "myImage"
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with offset ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "frameoffset",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "and interval (ms) ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "delay",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false,
                                    "varName": "myImage"
                                },
                                {
                                    "kind": "param",
                                    "name": "frameoffset",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "delay",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "frameOffset",
                            "description": "x offset moved on each animation step, eg: 1, 2, 5",
                            "default": "1"
                        },
                        {
                            "name": "interval",
                            "description": "time between each animation step in milli seconds, eg: 200",
                            "default": "200"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Image.scroll_image"
                },
                "Image.clear": {
                    "kind": -1,
                    "attributes": {
                        "help": "images/clear",
                        "parts": "ledmatrix",
                        "jsDoc": "Sets all pixels off."
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Image.setPixelBrightness": {
                    "kind": -1,
                    "attributes": {
                        "parts": "ledmatrix",
                        "jsDoc": "Sets a specific pixel brightness at a given position"
                    },
                    "parameters": [
                        {
                            "name": "x"
                        },
                        {
                            "name": "y"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Image.set_pixel_brightness"
                },
                "Image.pixelBrightness": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "parts": "ledmatrix",
                        "jsDoc": "Gets the pixel brightness ([0..255]) at a given position"
                    },
                    "parameters": [
                        {
                            "name": "x"
                        },
                        {
                            "name": "y"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Image.pixel_brightness"
                },
                "Image.width": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "help": "functions/width",
                        "jsDoc": "Gets the width in columns"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Image.height": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Gets the height in rows (always 5)"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Image.setPixel": {
                    "kind": -1,
                    "attributes": {
                        "help": "images/set-pixel",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "x": "pixel column",
                            "y": "pixel row",
                            "value": "pixel state"
                        },
                        "jsDoc": "Set a pixel state at position ``(x,y)``"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "pixel column"
                        },
                        {
                            "name": "y",
                            "description": "pixel row"
                        },
                        {
                            "name": "value",
                            "description": "pixel state",
                            "type": "boolean"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Image.set_pixel"
                },
                "Image.pixel": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "help": "images/pixel",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "x": "pixel column",
                            "y": "pixel row"
                        },
                        "jsDoc": "Get the pixel state at position ``(x,y)``"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "pixel column"
                        },
                        {
                            "name": "y",
                            "description": "pixel row"
                        }
                    ],
                    "isInstance": true
                },
                "Image.showFrame": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "interval": "400"
                        },
                        "weight": 70,
                        "help": "images/show-frame",
                        "parts": "ledmatrix",
                        "explicitDefaults": [
                            "interval"
                        ],
                        "paramHelp": {
                            "frame": "image frame to show"
                        },
                        "jsDoc": "Show a particular frame of the image strip."
                    },
                    "parameters": [
                        {
                            "name": "frame",
                            "description": "image frame to show"
                        },
                        {
                            "name": "interval",
                            "initializer": "400",
                            "default": "400"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Image.show_frame"
                },
                "basic.showLeds": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "interval": "400"
                        },
                        "callingConvention": 1,
                        "help": "basic/show-leds",
                        "weight": 95,
                        "blockGap": "8",
                        "imageLiteral": 1,
                        "async": "true",
                        "blockId": "device_show_leds",
                        "block": "show leds",
                        "icon": "",
                        "parts": "ledmatrix",
                        "explicitDefaults": [
                            "interval"
                        ],
                        "paramHelp": {
                            "leds": "the pattern of LED to turn on/off",
                            "interval": "time in milliseconds to pause after drawing"
                        },
                        "jsDoc": "Draws an image on the LED screen.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "show leds",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "leds",
                            "description": "the pattern of LED to turn on/off",
                            "type": "string"
                        },
                        {
                            "name": "interval",
                            "description": "time in milliseconds to pause after drawing",
                            "initializer": "400",
                            "default": "400"
                        }
                    ],
                    "pyQName": "basic.show_leds"
                },
                "basic.showString": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "interval": "150",
                            "text": "Hello!"
                        },
                        "callingConvention": 1,
                        "help": "basic/show-string",
                        "weight": 87,
                        "blockGap": "16",
                        "block": "show|string %text",
                        "async": "true",
                        "blockId": "device_print_message",
                        "parts": "ledmatrix",
                        "paramShadowOptions": {
                            "text": {
                                "toString": "true"
                            }
                        },
                        "explicitDefaults": [
                            "interval"
                        ],
                        "paramHelp": {
                            "text": "the text to scroll on the screen, eg: \"Hello!\"",
                            "interval": "how fast to shift characters; eg: 150, 100, 200, -100"
                        },
                        "jsDoc": "Display text on the display, one character at a time. If the string fits on the screen (i.e. is one letter), does not scroll.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "show",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "text",
                            "description": "the text to scroll on the screen, eg: \"Hello!\"",
                            "type": "string",
                            "default": "Hello!",
                            "options": {
                                "fieldEditorOptions": {
                                    "value": {
                                        "toString": "true"
                                    }
                                }
                            }
                        },
                        {
                            "name": "interval",
                            "description": "how fast to shift characters; eg: 150, 100, 200, -100",
                            "initializer": "150",
                            "default": "150"
                        }
                    ],
                    "pyQName": "basic.show_string"
                },
                "basic.clearScreen": {
                    "kind": -3,
                    "attributes": {
                        "help": "basic/clear-screen",
                        "weight": 79,
                        "blockId": "device_clear_display",
                        "block": "clear screen",
                        "parts": "ledmatrix",
                        "advanced": true,
                        "jsDoc": "Turn off all LEDs",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "clear screen",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "basic.clear_screen"
                },
                "basic.showAnimation": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "interval": "400"
                        },
                        "callingConvention": 1,
                        "help": "basic/show-animation",
                        "imageLiteral": 1,
                        "async": "true",
                        "parts": "ledmatrix",
                        "explicitDefaults": [
                            "interval"
                        ],
                        "paramHelp": {
                            "leds": "pattern of LEDs to turn on/off",
                            "interval": "time in milliseconds between each redraw"
                        },
                        "jsDoc": "Shows a sequence of LED screens as an animation."
                    },
                    "parameters": [
                        {
                            "name": "leds",
                            "description": "pattern of LEDs to turn on/off",
                            "type": "string"
                        },
                        {
                            "name": "interval",
                            "description": "time in milliseconds between each redraw",
                            "initializer": "400",
                            "default": "400"
                        }
                    ],
                    "pyQName": "basic.show_animation"
                },
                "basic.plotLeds": {
                    "kind": -3,
                    "attributes": {
                        "help": "basic/plot-leds",
                        "weight": 80,
                        "parts": "ledmatrix",
                        "imageLiteral": 1,
                        "paramHelp": {
                            "leds": "pattern of LEDs to turn on/off"
                        },
                        "jsDoc": "Draws an image on the LED screen."
                    },
                    "parameters": [
                        {
                            "name": "leds",
                            "description": "pattern of LEDs to turn on/off",
                            "type": "string"
                        }
                    ],
                    "pyQName": "basic.plot_leds"
                },
                "basic.forever": {
                    "kind": -3,
                    "attributes": {
                        "help": "basic/forever",
                        "weight": 55,
                        "blockGap": "16",
                        "blockAllowMultiple": "1",
                        "afterOnStart": true,
                        "blockId": "device_forever",
                        "block": "forever",
                        "icon": "",
                        "paramHelp": {
                            "body": "code to execute"
                        },
                        "jsDoc": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "forever",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "a",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ]
                },
                "basic.pause": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "ms": "100"
                        },
                        "callingConvention": 1,
                        "help": "basic/pause",
                        "weight": 54,
                        "async": "true",
                        "block": "pause (ms) %pause",
                        "blockGap": "16",
                        "blockId": "device_pause",
                        "icon": "",
                        "_shadowOverrides": {
                            "pause": "timePicker"
                        },
                        "paramHelp": {
                            "ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000"
                        },
                        "jsDoc": "Pause for the specified time in milliseconds",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pause (ms) ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pause",
                                    "shadowBlockId": "timePicker",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "pause",
                                    "shadowBlockId": "timePicker",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
                            "default": "100"
                        }
                    ]
                },
                "input.onButtonPressed": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/on-button-pressed",
                        "weight": 85,
                        "blockGap": "16",
                        "blockId": "device_button_event",
                        "block": "on button|%NAME|pressed",
                        "parts": "buttonpair",
                        "paramHelp": {
                            "button": "the button that needs to be pressed",
                            "body": "code to run when event is raised"
                        },
                        "jsDoc": "Do something when a button (A, B or both A+B) is pushed down and released again.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on button",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pressed",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "button",
                            "description": "the button that needs to be pressed",
                            "type": "Button",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "description": "code to run when event is raised",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_button_pressed"
                },
                "input.onGesture": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "gesture": "Gesture.Shake"
                        },
                        "help": "input/on-gesture",
                        "weight": 84,
                        "blockGap": "16",
                        "blockId": "device_gesture_event",
                        "block": "on |%NAME",
                        "parts": "accelerometer",
                        "paramFieldEditor": {
                            "NAME": "gestures"
                        },
                        "paramFieldEditorOptions": {
                            "NAME": {
                                "columns": "4"
                            }
                        },
                        "paramHelp": {
                            "gesture": "the type of gesture to track, eg: Gesture.Shake",
                            "body": "code to run when gesture is raised"
                        },
                        "jsDoc": "Do something when when a gesture is done (like shaking the micro:bit).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on ",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "gesture",
                            "description": "the type of gesture to track, eg: Gesture.Shake",
                            "type": "Gesture",
                            "default": "Gesture.Shake",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "description": "code to run when gesture is raised",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_gesture"
                },
                "input.isGesture": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "gesture": "Gesture.Shake"
                        },
                        "help": "input/is-gesture",
                        "weight": 10,
                        "blockGap": "8",
                        "blockId": "deviceisgesture",
                        "block": "is %gesture gesture",
                        "parts": "accelerometer",
                        "paramFieldEditor": {
                            "gesture": "gestures"
                        },
                        "paramFieldEditorOptions": {
                            "gesture": {
                                "columns": "4"
                            }
                        },
                        "paramHelp": {
                            "gesture": "the type of gesture to detect, eg: Gesture.Shake"
                        },
                        "jsDoc": "Tests if a gesture is currently detected.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "is ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "gesture",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " gesture",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "gesture",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "gesture",
                            "description": "the type of gesture to detect, eg: Gesture.Shake",
                            "type": "Gesture",
                            "default": "Gesture.Shake",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "input.is_gesture"
                },
                "input.onPinPressed": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "TouchPin.P0"
                        },
                        "help": "input/on-pin-pressed",
                        "weight": 83,
                        "blockGap": "32",
                        "blockId": "device_pin_event",
                        "block": "on pin %name|pressed",
                        "paramHelp": {
                            "name": "the pin that needs to be pressed, eg: TouchPin.P0",
                            "body": "the code to run when the pin is pressed"
                        },
                        "jsDoc": "Do something when a pin is touched and released again (while also touching the GND pin).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pressed",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "the pin that needs to be pressed, eg: TouchPin.P0",
                            "type": "TouchPin",
                            "default": "TouchPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "description": "the code to run when the pin is pressed",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_pin_pressed"
                },
                "input.onPinReleased": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "TouchPin.P0"
                        },
                        "help": "input/on-pin-released",
                        "weight": 6,
                        "blockGap": "16",
                        "blockId": "device_pin_released",
                        "block": "on pin %NAME|released",
                        "advanced": true,
                        "paramHelp": {
                            "name": "the pin that needs to be released, eg: TouchPin.P0",
                            "body": "the code to run when the pin is released"
                        },
                        "jsDoc": "Do something when a pin is released.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "released",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "the pin that needs to be released, eg: TouchPin.P0",
                            "type": "TouchPin",
                            "default": "TouchPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "description": "the code to run when the pin is released",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_pin_released"
                },
                "input.buttonIsPressed": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "button": "Button.A"
                        },
                        "help": "input/button-is-pressed",
                        "weight": 60,
                        "block": "button|%NAME|is pressed",
                        "blockId": "device_get_button2",
                        "icon": "",
                        "blockGap": "8",
                        "parts": "buttonpair",
                        "paramHelp": {
                            "button": "the button to query the request, eg: Button.A"
                        },
                        "jsDoc": "Get the button state (pressed or not) for ``A`` and ``B``.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "button",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "is pressed",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "button",
                            "description": "the button to query the request, eg: Button.A",
                            "type": "Button",
                            "default": "Button.A",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "input.button_is_pressed"
                },
                "input.pinIsPressed": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "name": "TouchPin.P0"
                        },
                        "help": "input/pin-is-pressed",
                        "weight": 58,
                        "blockId": "device_pin_is_pressed",
                        "block": "pin %NAME|is pressed",
                        "blockGap": "8",
                        "paramHelp": {
                            "name": "pin used to detect the touch, eg: TouchPin.P0"
                        },
                        "jsDoc": "Get the pin state (pressed or not). Requires to hold the ground to close the circuit.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "is pressed",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin used to detect the touch, eg: TouchPin.P0",
                            "type": "TouchPin",
                            "default": "TouchPin.P0",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "input.pin_is_pressed"
                },
                "input.acceleration": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "dimension": "Dimension.X"
                        },
                        "help": "input/acceleration",
                        "weight": 58,
                        "blockId": "device_acceleration",
                        "block": "acceleration (mg)|%NAME",
                        "blockGap": "8",
                        "parts": "accelerometer",
                        "paramHelp": {
                            "dimension": "x, y, or z dimension, eg: Dimension.X"
                        },
                        "jsDoc": "Get the acceleration value in milli-gravitys (when the board is laying flat with the screen up, x=0, y=0 and z=-1024)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "acceleration (mg)",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "dimension",
                            "description": "x, y, or z dimension, eg: Dimension.X",
                            "type": "Dimension",
                            "default": "Dimension.X",
                            "isEnum": true
                        }
                    ]
                },
                "input.lightLevel": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "input/light-level",
                        "weight": 57,
                        "blockId": "device_get_light_level",
                        "block": "light level",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "jsDoc": "Reads the light level applied to the LED screen in a range from ``0`` (dark) to ``255`` bright.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "light level",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "input.light_level"
                },
                "input.compassHeading": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "input/compass-heading",
                        "weight": 56,
                        "blockId": "device_heading",
                        "block": "compass heading (°)",
                        "blockGap": "8",
                        "parts": "compass",
                        "jsDoc": "Get the current compass heading in degrees.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "compass heading (°)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "input.compass_heading"
                },
                "input.temperature": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "weight": 55,
                        "help": "input/temperature",
                        "blockId": "device_temperature",
                        "block": "temperature (°C)",
                        "blockGap": "8",
                        "parts": "thermometer",
                        "jsDoc": "Gets the temperature in Celsius degrees (°C).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "temperature (°C)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "input.rotation": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "input/rotation",
                        "weight": 52,
                        "blockId": "device_get_rotation",
                        "block": "rotation (°)|%NAME",
                        "blockGap": "8",
                        "parts": "accelerometer",
                        "advanced": true,
                        "paramHelp": {
                            "kind": "pitch or roll"
                        },
                        "jsDoc": "The pitch or roll of the device, rotation along the ``x-axis`` or ``y-axis``, in degrees.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "rotation (°)",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "kind",
                            "description": "pitch or roll",
                            "type": "Rotation",
                            "isEnum": true
                        }
                    ]
                },
                "input.magneticForce": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "dimension": "Dimension.X"
                        },
                        "help": "input/magnetic-force",
                        "weight": 51,
                        "blockId": "device_get_magnetic_force",
                        "block": "magnetic force (µT)|%NAME",
                        "blockGap": "8",
                        "parts": "compass",
                        "advanced": true,
                        "paramHelp": {
                            "dimension": "the x, y, or z dimension, eg: Dimension.X"
                        },
                        "jsDoc": "Get the magnetic force value in ``micro-Teslas`` (``µT``). This function is not supported in the simulator.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "magnetic force (µT)",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "dimension",
                            "description": "the x, y, or z dimension, eg: Dimension.X",
                            "type": "Dimension",
                            "default": "Dimension.X",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "input.magnetic_force"
                },
                "input.calibrateCompass": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/calibrate-compass",
                        "advanced": true,
                        "blockId": "input_compass_calibrate",
                        "block": "calibrate compass",
                        "weight": 45,
                        "jsDoc": "Obsolete, compass calibration is automatic.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "calibrate compass",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "input.calibrate_compass"
                },
                "input.setAccelerometerRange": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/set-accelerometer-range",
                        "blockId": "device_set_accelerometer_range",
                        "block": "set accelerometer|range %range",
                        "weight": 5,
                        "parts": "accelerometer",
                        "advanced": true,
                        "paramHelp": {
                            "range": "a value describe the maximum strengh of acceleration measured"
                        },
                        "jsDoc": "Sets the accelerometer sample range in gravities.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set accelerometer",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "range ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "range",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "range",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "range",
                            "description": "a value describe the maximum strengh of acceleration measured",
                            "type": "AcceleratorRange",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "input.set_accelerometer_range"
                },
                "control.millis": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "control/millis",
                        "weight": 50,
                        "blockId": "control_running_time",
                        "block": "millis (ms)",
                        "jsDoc": "Gets the number of milliseconds elapsed since power on.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "millis (ms)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "control.micros": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Gets current time in microseconds. Overflows every ~18 minutes."
                    },
                    "parameters": []
                },
                "control.inBackground": {
                    "kind": -3,
                    "attributes": {
                        "help": "control/in-background",
                        "blockAllowMultiple": "1",
                        "afterOnStart": true,
                        "blockId": "control_in_background",
                        "block": "run in background",
                        "blockGap": "8",
                        "jsDoc": "Schedules code that run in the background.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "run in background",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "a",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "control.in_background"
                },
                "control.waitForEvent": {
                    "kind": -3,
                    "attributes": {
                        "callingConvention": 1,
                        "help": "control/wait-for-event",
                        "async": "true",
                        "blockId": "control_wait_for_event",
                        "block": "wait for event|from %src|with value %value",
                        "jsDoc": "Blocks the calling thread until the specified event is raised.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "wait for event",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "src"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "control.wait_for_event"
                },
                "control.reset": {
                    "kind": -3,
                    "attributes": {
                        "callingConvention": 1,
                        "weight": 30,
                        "async": "true",
                        "help": "control/reset",
                        "blockGap": "8",
                        "blockId": "control_reset",
                        "block": "reset",
                        "jsDoc": "Resets the BBC micro:bit.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "reset",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "control.waitMicros": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "micros": "4"
                        },
                        "help": "control/wait-micros",
                        "weight": 29,
                        "blockId": "control_wait_us",
                        "block": "wait (µs)%micros",
                        "paramHelp": {
                            "micros": "number of micro-seconds to wait. eg: 4"
                        },
                        "jsDoc": "Blocks the current fiber for the given microseconds",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "wait (µs)",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "micros",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "micros",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "micros",
                            "description": "number of micro-seconds to wait. eg: 4",
                            "default": "4"
                        }
                    ],
                    "pyQName": "control.wait_micros"
                },
                "control.raiseEvent": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "mode": "1"
                        },
                        "weight": 21,
                        "blockGap": "12",
                        "blockId": "control_raise_event",
                        "block": "raise event|from source %src=control_event_source_id|with value %value=control_event_value_id",
                        "blockExternalInputs": "1",
                        "help": "control/raise-event",
                        "explicitDefaults": [
                            "mode"
                        ],
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "src": "ID of the MicroBit Component that generated the event e.g. MICROBIT_ID_BUTTON_A.",
                            "value": "Component specific code indicating the cause of the event.",
                            "mode": "optional definition of how the event should be processed after construction (default is CREATE_AND_FIRE)."
                        },
                        "jsDoc": "Raises an event in the event bus.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "raise event",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from source ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "src",
                            "description": "ID of the MicroBit Component that generated the event e.g. MICROBIT_ID_BUTTON_A."
                        },
                        {
                            "name": "value",
                            "description": "Component specific code indicating the cause of the event."
                        },
                        {
                            "name": "mode",
                            "description": "optional definition of how the event should be processed after construction (default is CREATE_AND_FIRE).",
                            "type": "EventCreationMode",
                            "initializer": "1",
                            "default": "1",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "control.raise_event"
                },
                "control.onEvent": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "flags": "0"
                        },
                        "weight": 20,
                        "blockGap": "8",
                        "blockId": "control_on_event",
                        "block": "on event|from %src=control_event_source_id|with value %value=control_event_value_id",
                        "help": "control/on-event",
                        "blockExternalInputs": "1",
                        "explicitDefaults": [
                            "flags"
                        ],
                        "inlineInputMode": "external",
                        "jsDoc": "Registers an event handler.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on event",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "src"
                        },
                        {
                            "name": "value"
                        },
                        {
                            "name": "handler",
                            "type": "() => void",
                            "handlerParameters": []
                        },
                        {
                            "name": "flags",
                            "initializer": "0",
                            "default": "0"
                        }
                    ],
                    "pyQName": "control.on_event"
                },
                "control.eventValue": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "control_event_value\"",
                        "block": "event value",
                        "help": "control/event-value",
                        "weight": 18,
                        "jsDoc": "Gets the value of the last event executed on the bus",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "event value",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "control.event_value"
                },
                "control.eventTimestamp": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "control_event_timestamp\"",
                        "block": "event timestamp",
                        "help": "control/event-timestamp",
                        "weight": 19,
                        "blockGap": "8",
                        "jsDoc": "Gets the timestamp of the last event executed on the bus",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "event timestamp",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "control.event_timestamp"
                },
                "control.deviceName": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "blockId": "control_device_name",
                        "block": "device name",
                        "weight": 10,
                        "blockGap": "8",
                        "advanced": true,
                        "jsDoc": "Make a friendly name for the device based on its serial number",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "device name",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "control.device_name"
                },
                "control.deviceSerialNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "control_device_serial_number",
                        "block": "device serial number",
                        "weight": 9,
                        "advanced": true,
                        "jsDoc": "Derive a unique, consistent serial number of this device from internal data.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "device serial number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "control.device_serial_number"
                },
                "control.__midiSend": {
                    "kind": -3,
                    "attributes": {
                        "part": "midioutput",
                        "blockHidden": true,
                        "jsDoc": "Informs simulator/runtime of a MIDI message\nInternal function to support the simulator."
                    },
                    "parameters": [
                        {
                            "name": "buffer",
                            "type": "Buffer"
                        }
                    ]
                },
                "control.__log": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "text",
                            "type": "string"
                        }
                    ]
                },
                "led.plot": {
                    "kind": -3,
                    "attributes": {
                        "help": "led/plot",
                        "weight": 78,
                        "blockId": "device_plot",
                        "block": "plot|x %x|y %y",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "paramMin": {
                            "x": "0",
                            "y": "0"
                        },
                        "paramMax": {
                            "x": "4",
                            "y": "4"
                        },
                        "paramFieldEditorOptions": {
                            "x": {
                                "precision": "1"
                            },
                            "y": {
                                "precision": "1"
                            }
                        },
                        "paramHelp": {
                            "x": "the horizontal coordinate of the LED starting at 0",
                            "y": "the vertical coordinate of the LED starting at 0"
                        },
                        "jsDoc": "Turn on the specified LED using x, y coordinates (x is horizontal, y is vertical). (0,0) is upper left.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "plot",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "x ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "y ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "the horizontal coordinate of the LED starting at 0",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        },
                        {
                            "name": "y",
                            "description": "the vertical coordinate of the LED starting at 0",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        }
                    ]
                },
                "led.plotBrightness": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "brightness": "255"
                        },
                        "help": "led/plot-brightness",
                        "weight": 78,
                        "blockId": "device_plot_brightness",
                        "block": "plot|x %x|y %y|brightness %brightness",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "paramMin": {
                            "x": "0",
                            "y": "0",
                            "brightness": "0"
                        },
                        "paramMax": {
                            "x": "4",
                            "y": "4",
                            "brightness": "255"
                        },
                        "paramFieldEditorOptions": {
                            "x": {
                                "precision": "1"
                            },
                            "y": {
                                "precision": "1"
                            }
                        },
                        "advanced": true,
                        "paramHelp": {
                            "x": "the horizontal coordinate of the LED starting at 0",
                            "y": "the vertical coordinate of the LED starting at 0",
                            "brightness": "the brightness from 0 (off) to 255 (bright), eg:255"
                        },
                        "jsDoc": "Turn on the specified LED with specific brightness using x, y coordinates (x is horizontal, y is vertical). (0,0) is upper left.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "plot",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "x ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "y ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "brightness ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "brightness",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "brightness",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "the horizontal coordinate of the LED starting at 0",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        },
                        {
                            "name": "y",
                            "description": "the vertical coordinate of the LED starting at 0",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        },
                        {
                            "name": "brightness",
                            "description": "the brightness from 0 (off) to 255 (bright), eg:255",
                            "default": "255",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "led.plot_brightness"
                },
                "led.unplot": {
                    "kind": -3,
                    "attributes": {
                        "help": "led/unplot",
                        "weight": 77,
                        "blockId": "device_unplot",
                        "block": "unplot|x %x|y %y",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "paramMin": {
                            "x": "0",
                            "y": "0"
                        },
                        "paramMax": {
                            "x": "4",
                            "y": "4"
                        },
                        "paramFieldEditorOptions": {
                            "x": {
                                "precision": "1"
                            },
                            "y": {
                                "precision": "1"
                            }
                        },
                        "paramHelp": {
                            "x": "the horizontal coordinate of the LED",
                            "y": "the vertical coordinate of the LED"
                        },
                        "jsDoc": "Turn off the specified LED using x, y coordinates (x is horizontal, y is vertical). (0,0) is upper left.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "unplot",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "x ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "y ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "the horizontal coordinate of the LED",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        },
                        {
                            "name": "y",
                            "description": "the vertical coordinate of the LED",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        }
                    ]
                },
                "led.pointBrightness": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "led/point-brightness",
                        "weight": 76,
                        "blockId": "device_point_brightness",
                        "block": "point|x %x|y %y brightness",
                        "parts": "ledmatrix",
                        "paramMin": {
                            "x": "0",
                            "y": "0"
                        },
                        "paramMax": {
                            "x": "4",
                            "y": "4"
                        },
                        "paramFieldEditorOptions": {
                            "x": {
                                "precision": "1"
                            },
                            "y": {
                                "precision": "1"
                            }
                        },
                        "advanced": true,
                        "paramHelp": {
                            "x": "the horizontal coordinate of the LED",
                            "y": "the vertical coordinate of the LED"
                        },
                        "jsDoc": "Get the brightness state of the specified LED using x, y coordinates. (0,0) is upper left.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "point",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "x ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "y ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " brightness",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "the horizontal coordinate of the LED",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        },
                        {
                            "name": "y",
                            "description": "the vertical coordinate of the LED",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        }
                    ],
                    "pyQName": "led.point_brightness"
                },
                "led.brightness": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "led/brightness",
                        "weight": 60,
                        "blockId": "device_get_brightness",
                        "block": "brightness",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "advanced": true,
                        "jsDoc": "Get the screen brightness from 0 (off) to 255 (full bright).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "brightness",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "led.setBrightness": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "value": "255"
                        },
                        "help": "led/set-brightness",
                        "weight": 59,
                        "blockId": "device_set_brightness",
                        "block": "set brightness %value",
                        "parts": "ledmatrix",
                        "advanced": true,
                        "paramMin": {
                            "value": "0"
                        },
                        "paramMax": {
                            "value": "255"
                        },
                        "paramHelp": {
                            "value": "the brightness value, eg:255, 127, 0"
                        },
                        "jsDoc": "Set the screen brightness from 0 (off) to 255 (full bright).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set brightness ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "the brightness value, eg:255, 127, 0",
                            "default": "255",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "led.set_brightness"
                },
                "led.stopAnimation": {
                    "kind": -3,
                    "attributes": {
                        "weight": 50,
                        "help": "led/stop-animation",
                        "blockId": "device_stop_animation",
                        "block": "stop animation",
                        "parts": "ledmatrix",
                        "advanced": true,
                        "jsDoc": "Cancels the current animation and clears other pending animations.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "stop animation",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "led.stop_animation"
                },
                "led.setDisplayMode": {
                    "kind": -3,
                    "attributes": {
                        "weight": 1,
                        "help": "led/set-display-mode",
                        "parts": "ledmatrix",
                        "advanced": true,
                        "blockId": "led_set_display_mode",
                        "block": "set display mode $mode",
                        "paramHelp": {
                            "mode": "mode the display mode in which the screen operates"
                        },
                        "jsDoc": "Sets the display mode between black and white and greyscale for rendering LEDs.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set display mode ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "mode",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "mode",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "mode",
                            "description": "mode the display mode in which the screen operates",
                            "type": "DisplayMode",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "led.set_display_mode"
                },
                "led.displayMode": {
                    "kind": -3,
                    "retType": "DisplayMode",
                    "attributes": {
                        "weight": 1,
                        "parts": "ledmatrix",
                        "advanced": true,
                        "jsDoc": "Gets the current display mode"
                    },
                    "parameters": [],
                    "pyQName": "led.display_mode"
                },
                "led.enable": {
                    "kind": -3,
                    "attributes": {
                        "help": "led/enable",
                        "blockId": "device_led_enable",
                        "block": "led enable %on",
                        "advanced": true,
                        "parts": "ledmatrix",
                        "jsDoc": "Turns on or off the display",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "led enable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "on",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "on",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "on",
                            "type": "boolean"
                        }
                    ]
                },
                "led.screenshot": {
                    "kind": -3,
                    "retType": "Image",
                    "attributes": {
                        "help": "led/screenshot",
                        "parts": "ledmatrix",
                        "jsDoc": "Takes a screenshot of the LED screen and returns an image."
                    },
                    "parameters": []
                },
                "pins": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#B22222",
                        "weight": 30,
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Control currents in Pins for analog/digital signals, servos, i2c, ..."
                    }
                },
                "pins.digitalReadPin": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "name": "DigitalPin.P0"
                        },
                        "help": "pins/digital-read-pin",
                        "weight": 30,
                        "blockId": "device_get_digital_pin",
                        "block": "digital read|pin %name",
                        "blockGap": "8",
                        "paramFieldEditor": {
                            "name": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "name": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin to read from, eg: DigitalPin.P0"
                        },
                        "jsDoc": "Read the specified pin or connector as either 0 or 1",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "digital read",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin to read from, eg: DigitalPin.P0",
                            "type": "DigitalPin",
                            "default": "DigitalPin.P0",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "pins.digital_read_pin"
                },
                "pins.digitalWritePin": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "DigitalPin.P0"
                        },
                        "help": "pins/digital-write-pin",
                        "weight": 29,
                        "blockId": "device_set_digital_pin",
                        "block": "digital write|pin %name|to %value",
                        "paramMin": {
                            "value": "0"
                        },
                        "paramMax": {
                            "value": "1"
                        },
                        "paramFieldEditor": {
                            "name": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "name": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin to write to, eg: DigitalPin.P0",
                            "value": "value to set on the pin, 1 eg,0"
                        },
                        "jsDoc": "Set a pin or connector value to either 0 or 1.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "digital write",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin to write to, eg: DigitalPin.P0",
                            "type": "DigitalPin",
                            "default": "DigitalPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "value",
                            "description": "value to set on the pin, 1 eg,0",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "1"
                                }
                            }
                        }
                    ],
                    "pyQName": "pins.digital_write_pin"
                },
                "pins.analogReadPin": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "name": "AnalogPin.P0"
                        },
                        "help": "pins/analog-read-pin",
                        "weight": 25,
                        "blockId": "device_get_analog_pin",
                        "block": "analog read|pin %name",
                        "blockGap": "8",
                        "paramFieldEditor": {
                            "name": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "name": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin to write to, eg: AnalogPin.P0"
                        },
                        "jsDoc": "Read the connector value as analog, that is, as a value comprised between 0 and 1023.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "analog read",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin to write to, eg: AnalogPin.P0",
                            "type": "AnalogPin",
                            "default": "AnalogPin.P0",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "pins.analog_read_pin"
                },
                "pins.analogWritePin": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "AnalogPin.P0",
                            "value": "1023"
                        },
                        "help": "pins/analog-write-pin",
                        "weight": 24,
                        "blockId": "device_set_analog_pin",
                        "block": "analog write|pin %name|to %value",
                        "blockGap": "8",
                        "paramMin": {
                            "value": "0"
                        },
                        "paramMax": {
                            "value": "1023"
                        },
                        "paramFieldEditor": {
                            "name": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "name": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin name to write to, eg: AnalogPin.P0",
                            "value": "value to write to the pin between ``0`` and ``1023``. eg:1023,0"
                        },
                        "jsDoc": "Set the connector value as analog. Value must be comprised between 0 and 1023.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "analog write",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin name to write to, eg: AnalogPin.P0",
                            "type": "AnalogPin",
                            "default": "AnalogPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "value",
                            "description": "value to write to the pin between ``0`` and ``1023``. eg:1023,0",
                            "default": "1023",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "1023"
                                }
                            }
                        }
                    ],
                    "pyQName": "pins.analog_write_pin"
                },
                "pins.analogSetPeriod": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "AnalogPin.P0",
                            "micros": "20000"
                        },
                        "help": "pins/analog-set-period",
                        "weight": 23,
                        "blockGap": "8",
                        "blockId": "device_set_analog_period",
                        "block": "analog set period|pin %pin|to (µs)%micros",
                        "paramFieldEditor": {
                            "pin": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "pin": {
                                "columns": "4",
                                "tooltips": "false"
                            }
                        },
                        "paramHelp": {
                            "name": "analog pin to set period to, eg: AnalogPin.P0",
                            "micros": "period in micro seconds. eg:20000"
                        },
                        "jsDoc": "Configure the pulse-width modulation (PWM) period of the analog output in microseconds.\nIf this pin is not configured as an analog output (using `analog write pin`), the operation has no effect.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "analog set period",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pin",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to (µs)",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "micros",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "pin",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "micros",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "analog pin to set period to, eg: AnalogPin.P0",
                            "type": "AnalogPin",
                            "default": "AnalogPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "micros",
                            "description": "period in micro seconds. eg:20000",
                            "default": "20000"
                        }
                    ],
                    "pyQName": "pins.analog_set_period"
                },
                "pins.onPulsed": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "DigitalPin.P0",
                            "pulse": "PulseValue.High"
                        },
                        "help": "pins/on-pulsed",
                        "weight": 22,
                        "blockGap": "16",
                        "advanced": true,
                        "blockId": "pins_on_pulsed",
                        "block": "on|pin %pin|pulsed %pulse",
                        "paramFieldEditor": {
                            "pin": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "pin": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "digital pin to register to, eg: DigitalPin.P0",
                            "pulse": "the value of the pulse, eg: PulseValue.High"
                        },
                        "jsDoc": "Configure the pin as a digital input and generate an event when the pin is pulsed either high or low.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pin",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pulsed ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pulse",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "pin",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "pulse",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "digital pin to register to, eg: DigitalPin.P0",
                            "type": "DigitalPin",
                            "default": "DigitalPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "pulse",
                            "description": "the value of the pulse, eg: PulseValue.High",
                            "type": "PulseValue",
                            "default": "PulseValue.High",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "pins.on_pulsed"
                },
                "pins.pulseDuration": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "pins/pulse-duration",
                        "advanced": true,
                        "blockId": "pins_pulse_duration",
                        "block": "pulse duration (µs)",
                        "weight": 21,
                        "blockGap": "8",
                        "jsDoc": "Get the duration of the last pulse in microseconds. This function should be called from a ``onPulsed`` handler.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pulse duration (µs)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "pins.pulse_duration"
                },
                "pins.pulseIn": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "maxDuration": "2000000",
                            "name": "DigitalPin.P0",
                            "value": "PulseValue.High"
                        },
                        "blockId": "pins_pulse_in",
                        "block": "pulse in (µs)|pin %name|pulsed %value",
                        "weight": 20,
                        "advanced": true,
                        "help": "pins/pulse-in",
                        "paramFieldEditor": {
                            "name": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "name": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "explicitDefaults": [
                            "maxDuration"
                        ],
                        "paramHelp": {
                            "name": "the pin which measures the pulse, eg: DigitalPin.P0",
                            "value": "the value of the pulse, eg: PulseValue.High",
                            "maximum": "duration in microseconds"
                        },
                        "jsDoc": "Return the duration of a pulse at a pin in microseconds.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pulse in (µs)",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pulsed ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "the pin which measures the pulse, eg: DigitalPin.P0",
                            "type": "DigitalPin",
                            "default": "DigitalPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "value",
                            "description": "the value of the pulse, eg: PulseValue.High",
                            "type": "PulseValue",
                            "default": "PulseValue.High",
                            "isEnum": true
                        },
                        {
                            "name": "maxDuration",
                            "initializer": "2000000",
                            "default": "2000000"
                        }
                    ],
                    "pyQName": "pins.pulse_in"
                },
                "pins.servoWritePin": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "AnalogPin.P0",
                            "value": "180"
                        },
                        "help": "pins/servo-write-pin",
                        "weight": 20,
                        "blockId": "device_set_servo_pin",
                        "block": "servo write|pin %name|to %value",
                        "blockGap": "8",
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ],
                        "paramMin": {
                            "value": "0"
                        },
                        "paramMax": {
                            "value": "180"
                        },
                        "paramFieldEditor": {
                            "name": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "name": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin to write to, eg: AnalogPin.P0",
                            "value": "angle or rotation speed, eg:180,90,0"
                        },
                        "jsDoc": "Write a value to the servo, controlling the shaft accordingly. On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "servo write",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin to write to, eg: AnalogPin.P0",
                            "type": "AnalogPin",
                            "default": "AnalogPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "value",
                            "description": "angle or rotation speed, eg:180,90,0",
                            "default": "180",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "180"
                                }
                            }
                        }
                    ],
                    "pyQName": "pins.servo_write_pin"
                },
                "pins.servoSetContinuous": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Specifies that a continuous servo is connected."
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "type": "AnalogPin",
                            "isEnum": true
                        },
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "pins.servo_set_continuous"
                },
                "pins.servoSetPulse": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "micros": "1500"
                        },
                        "help": "pins/servo-set-pulse",
                        "weight": 19,
                        "blockId": "device_set_servo_pulse",
                        "block": "servo set pulse|pin %value|to (µs) %micros",
                        "paramFieldEditor": {
                            "value": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "value": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin name",
                            "micros": "pulse duration in micro seconds, eg:1500"
                        },
                        "jsDoc": "Configure the IO pin as an analog/pwm output and set a pulse width. The period is 20 ms period and the pulse width is set based on the value given in **microseconds** or `1/1000` milliseconds.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "servo set pulse",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to (µs) ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "micros",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "micros",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin name",
                            "type": "AnalogPin",
                            "isEnum": true
                        },
                        {
                            "name": "micros",
                            "description": "pulse duration in micro seconds, eg:1500",
                            "default": "1500"
                        }
                    ],
                    "pyQName": "pins.servo_set_pulse"
                },
                "pins.analogSetPitchPin": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "device_analog_set_pitch_pin",
                        "block": "analog set pitch pin %name",
                        "help": "pins/analog-set-pitch-pin",
                        "weight": 3,
                        "advanced": true,
                        "paramFieldEditor": {
                            "name": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "name": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin to modulate pitch from"
                        },
                        "jsDoc": "Set the pin used when using analog pitch or music.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "analog set pitch pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin to modulate pitch from",
                            "type": "AnalogPin",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "pins.analog_set_pitch_pin"
                },
                "pins.analogSetPitchVolume": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "device_analog_set_pitch_volume",
                        "block": "analog set pitch volume $volume",
                        "help": "pins/analog-set-pitch-volume",
                        "weight": 3,
                        "advanced": true,
                        "paramMin": {
                            "volume": "0"
                        },
                        "paramMax": {
                            "volume": "255"
                        },
                        "paramHelp": {
                            "volume": "the intensity of the sound from 0..255"
                        },
                        "jsDoc": "Sets the volume on the pitch pin",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "analog set pitch volume ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "volume",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "volume",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "volume",
                            "description": "the intensity of the sound from 0..255",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "pins.analog_set_pitch_volume"
                },
                "pins.analogPitchVolume": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "device_analog_pitch_volume",
                        "block": "analog pitch volume",
                        "help": "pins/analog-pitch-volume",
                        "weight": 3,
                        "advanced": true,
                        "jsDoc": "Gets the volume the pitch pin from 0..255",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "analog pitch volume",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "pins.analog_pitch_volume"
                },
                "pins.analogPitch": {
                    "kind": -3,
                    "attributes": {
                        "callingConvention": 1,
                        "blockId": "device_analog_pitch",
                        "block": "analog pitch %frequency|for (ms) %ms",
                        "help": "pins/analog-pitch",
                        "weight": 4,
                        "async": "true",
                        "advanced": true,
                        "blockGap": "8",
                        "paramHelp": {
                            "frequency": "frequency to modulate in Hz.",
                            "ms": "duration of the pitch in milli seconds."
                        },
                        "jsDoc": "Emit a plse-width modulation (PWM) signal to the current pitch pin. Use `analog set pitch pin` to define the pitch pin.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "analog pitch ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "frequency",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "for (ms) ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ms",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "frequency",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "ms",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "frequency",
                            "description": "frequency to modulate in Hz."
                        },
                        {
                            "name": "ms",
                            "description": "duration of the pitch in milli seconds."
                        }
                    ],
                    "pyQName": "pins.analog_pitch"
                },
                "pins.setPull": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "DigitalPin.P0",
                            "pull": "PinPullMode.PullUp"
                        },
                        "help": "pins/set-pull",
                        "weight": 3,
                        "advanced": true,
                        "blockId": "device_set_pull",
                        "block": "set pull|pin %pin|to %pull",
                        "paramFieldEditor": {
                            "pin": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "pin": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin to set the pull mode on, eg: DigitalPin.P0",
                            "pull": "one of the mbed pull configurations, eg: PinPullMode.PullUp"
                        },
                        "jsDoc": "Configure the pull directiion of of a pin.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set pull",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pin",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pull",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "pin",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "pull",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin to set the pull mode on, eg: DigitalPin.P0",
                            "type": "DigitalPin",
                            "default": "DigitalPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "pull",
                            "description": "one of the mbed pull configurations, eg: PinPullMode.PullUp",
                            "type": "PinPullMode",
                            "default": "PinPullMode.PullUp",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "pins.set_pull"
                },
                "pins.setEvents": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "DigitalPin.P0",
                            "type": "PinEventType.Edge"
                        },
                        "help": "pins/set-events",
                        "weight": 4,
                        "advanced": true,
                        "blockId": "device_set_pin_events",
                        "block": "set pin %pin|to emit %type|events",
                        "paramFieldEditor": {
                            "pin": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "pin": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "paramHelp": {
                            "name": "pin to set the event mode on, eg: DigitalPin.P0",
                            "type": "the type of events for this pin to emit, eg: PinEventType.Edge"
                        },
                        "jsDoc": "Configure the events emitted by this pin. Events can be subscribed to\nusing ``control.onEvent()``.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pin",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to emit ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "events",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "pin",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "pin to set the event mode on, eg: DigitalPin.P0",
                            "type": "DigitalPin",
                            "default": "DigitalPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "type",
                            "description": "the type of events for this pin to emit, eg: PinEventType.Edge",
                            "type": "PinEventType",
                            "default": "PinEventType.Edge",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "pins.set_events"
                },
                "pins.createBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "paramHelp": {
                            "size": "number of bytes in the buffer"
                        },
                        "jsDoc": "Create a new zero-initialized buffer."
                    },
                    "parameters": [
                        {
                            "name": "size",
                            "description": "number of bytes in the buffer"
                        }
                    ],
                    "pyQName": "bytearray"
                },
                "pins.i2cReadBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "paramDefl": {
                            "repeat": "0"
                        },
                        "explicitDefaults": [
                            "repeat"
                        ],
                        "jsDoc": "Read `size` bytes from a 7-bit I2C `address`."
                    },
                    "parameters": [
                        {
                            "name": "address"
                        },
                        {
                            "name": "size"
                        },
                        {
                            "name": "repeat",
                            "type": "boolean",
                            "initializer": "0",
                            "default": "0"
                        }
                    ],
                    "pyQName": "pins.i2c_read_buffer"
                },
                "pins.i2cWriteBuffer": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "repeat": "0"
                        },
                        "explicitDefaults": [
                            "repeat"
                        ],
                        "jsDoc": "Write bytes to a 7-bit I2C `address`."
                    },
                    "parameters": [
                        {
                            "name": "address"
                        },
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "repeat",
                            "type": "boolean",
                            "initializer": "0",
                            "default": "0"
                        }
                    ],
                    "pyQName": "pins.i2c_write_buffer"
                },
                "pins.spiWrite": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "pins/spi-write",
                        "weight": 5,
                        "advanced": true,
                        "blockId": "spi_write",
                        "block": "spi write %value",
                        "paramHelp": {
                            "value": "Data to be sent to the SPI slave"
                        },
                        "jsDoc": "Write to the SPI slave and return the response",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "spi write ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "Data to be sent to the SPI slave"
                        }
                    ],
                    "pyQName": "pins.spi_write"
                },
                "pins.spiFrequency": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "frequency": "1000000"
                        },
                        "help": "pins/spi-frequency",
                        "weight": 4,
                        "advanced": true,
                        "blockId": "spi_frequency",
                        "block": "spi frequency %frequency",
                        "paramHelp": {
                            "frequency": "the clock frequency, eg: 1000000"
                        },
                        "jsDoc": "Set the SPI frequency",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "spi frequency ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "frequency",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "frequency",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "frequency",
                            "description": "the clock frequency, eg: 1000000",
                            "default": "1000000"
                        }
                    ],
                    "pyQName": "pins.spi_frequency"
                },
                "pins.spiFormat": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "bits": "8",
                            "mode": "3"
                        },
                        "help": "pins/spi-format",
                        "weight": 3,
                        "advanced": true,
                        "blockId": "spi_format",
                        "block": "spi format|bits %bits|mode %mode",
                        "paramHelp": {
                            "bits": "the number of bits, eg: 8",
                            "mode": "the mode, eg: 3"
                        },
                        "jsDoc": "Set the SPI bits and mode",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "spi format",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "bits ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "bits",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "mode ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "mode",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "bits",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "mode",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "bits",
                            "description": "the number of bits, eg: 8",
                            "default": "8"
                        },
                        {
                            "name": "mode",
                            "description": "the mode, eg: 3",
                            "default": "3"
                        }
                    ],
                    "pyQName": "pins.spi_format"
                },
                "pins.spiPins": {
                    "kind": -3,
                    "attributes": {
                        "help": "pins/spi-pins",
                        "weight": 2,
                        "advanced": true,
                        "blockId": "spi_pins",
                        "block": "spi set pins|MOSI %mosi|MISO %miso|SCK %sck",
                        "paramFieldEditor": {
                            "mosi": "gridpicker",
                            "miso": "gridpicker",
                            "sck": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "mosi": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            },
                            "miso": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            },
                            "sck": {
                                "columns": "4",
                                "tooltips": "false",
                                "width": "250"
                            }
                        },
                        "jsDoc": "Set the MOSI, MISO, SCK pins used by the SPI connection",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "spi set pins",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "MOSI ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "mosi",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "MISO ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "miso",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "SCK ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "sck",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "mosi",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "miso",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "sck",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "mosi",
                            "type": "DigitalPin",
                            "isEnum": true
                        },
                        {
                            "name": "miso",
                            "type": "DigitalPin",
                            "isEnum": true
                        },
                        {
                            "name": "sck",
                            "type": "DigitalPin",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "pins.spi_pins"
                },
                "pins.pushButton": {
                    "kind": -3,
                    "attributes": {
                        "help": "pins/push-button",
                        "advanced": true,
                        "jsDoc": "Mounts a push button on the given pin"
                    },
                    "parameters": [
                        {
                            "name": "pin",
                            "type": "DigitalPin",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "pins.push_button"
                },
                "serial.readUntil": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "serial/read-until",
                        "blockId": "serial_read_until",
                        "block": "serial|read until %delimiter=serial_delimiter_conv",
                        "weight": 19,
                        "paramHelp": {
                            "delimiter": "text delimiter that separates each text chunk"
                        },
                        "jsDoc": "Read a line of text from the serial port and return the buffer when the delimiter is met.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "read until ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "delimiter",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "delimiter",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "delimiter",
                            "description": "text delimiter that separates each text chunk",
                            "type": "string"
                        }
                    ],
                    "pyQName": "serial.read_until"
                },
                "serial.readString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "serial/read-string",
                        "blockId": "serial_read_buffer",
                        "block": "serial|read string",
                        "weight": 18,
                        "jsDoc": "Read the buffered received data as a string",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "read string",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "serial.read_string"
                },
                "serial.onDataReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "serial/on-data-received",
                        "weight": 18,
                        "blockId": "serial_on_data_received",
                        "block": "serial|on data received %delimiters=serial_delimiter_conv",
                        "paramHelp": {
                            "delimiters": "the characters to match received characters against."
                        },
                        "jsDoc": "Register an event to be fired when one of the delimiter is matched.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "on data received ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "delimiters",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "delimiters",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "delimiters",
                            "description": "the characters to match received characters against.",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "serial.on_data_received"
                },
                "serial.writeString": {
                    "kind": -3,
                    "attributes": {
                        "help": "serial/write-string",
                        "weight": 87,
                        "blockGap": "8",
                        "blockId": "serial_writestring",
                        "block": "serial|write string %text",
                        "paramShadowOptions": {
                            "text": {
                                "toString": "true"
                            }
                        },
                        "jsDoc": "Send a piece of text through the serial connection.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "text",
                            "type": "string",
                            "options": {
                                "fieldEditorOptions": {
                                    "value": {
                                        "toString": "true"
                                    }
                                }
                            }
                        }
                    ],
                    "pyQName": "serial.write_string"
                },
                "serial.writeBuffer": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "serial_writebuffer",
                        "block": "serial|write buffer %buffer=serial_readbuffer",
                        "help": "serial/write-buffer",
                        "advanced": true,
                        "weight": 6,
                        "jsDoc": "Send a buffer through serial connection",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write buffer ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "buffer",
                                    "shadowBlockId": "serial_readbuffer",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "buffer",
                                    "shadowBlockId": "serial_readbuffer",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "buffer",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "serial.write_buffer"
                },
                "serial.readBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "paramDefl": {
                            "length": "64"
                        },
                        "blockId": "serial_readbuffer",
                        "block": "serial|read buffer %length",
                        "help": "serial/read-buffer",
                        "advanced": true,
                        "weight": 5,
                        "paramHelp": {
                            "length": "default buffer length, eg: 64"
                        },
                        "jsDoc": "Read multiple characters from the receive buffer. Pause until enough characters are present.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "read buffer ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "length",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "length",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "length",
                            "description": "default buffer length, eg: 64",
                            "default": "64"
                        }
                    ],
                    "pyQName": "serial.read_buffer"
                },
                "serial.redirect": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "tx": "SerialPin.P0",
                            "rx": "SerialPin.P1",
                            "rate": "115200"
                        },
                        "weight": 10,
                        "help": "serial/redirect",
                        "blockId": "serial_redirect",
                        "block": "serial|redirect to|TX %tx|RX %rx|at baud rate %rate",
                        "blockExternalInputs": "1",
                        "paramFieldEditor": {
                            "tx": "gridpicker",
                            "rx": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "tx": {
                                "columns": "3",
                                "tooltips": "false"
                            },
                            "rx": {
                                "columns": "3",
                                "tooltips": "false"
                            }
                        },
                        "blockGap": "8",
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "tx": "the new transmission pin, eg: SerialPin.P0",
                            "rx": "the new reception pin, eg: SerialPin.P1",
                            "rate": "the new baud rate. eg: 115200"
                        },
                        "jsDoc": "Set the serial input and output to use pins instead of the USB connection.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "redirect to",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "TX ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "tx",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "RX ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "rx",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "at baud rate ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "rate",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "tx",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "rx",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "rate",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "tx",
                            "description": "the new transmission pin, eg: SerialPin.P0",
                            "type": "SerialPin",
                            "default": "SerialPin.P0",
                            "isEnum": true
                        },
                        {
                            "name": "rx",
                            "description": "the new reception pin, eg: SerialPin.P1",
                            "type": "SerialPin",
                            "default": "SerialPin.P1",
                            "isEnum": true
                        },
                        {
                            "name": "rate",
                            "description": "the new baud rate. eg: 115200",
                            "type": "BaudRate",
                            "default": "115200",
                            "isEnum": true
                        }
                    ]
                },
                "serial.redirectToUSB": {
                    "kind": -3,
                    "attributes": {
                        "weight": 9,
                        "help": "serial/redirect-to-usb",
                        "blockId": "serial_redirect_to_usb",
                        "block": "serial|redirect to USB",
                        "jsDoc": "Direct the serial input and output to use the USB connection.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "redirect to USB",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "serial.redirect_to_usb"
                },
                "serial.setRxBufferSize": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "size": "32"
                        },
                        "help": "serial/set-rx-buffer-size",
                        "blockId": "serialSetRxBufferSize",
                        "block": "serial set rx buffer size to $size",
                        "advanced": true,
                        "paramHelp": {
                            "size": "length of the rx buffer in bytes, eg: 32"
                        },
                        "jsDoc": "Sets the size of the RX buffer in bytes",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial set rx buffer size to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "size",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "size",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "size",
                            "description": "length of the rx buffer in bytes, eg: 32",
                            "default": "32"
                        }
                    ],
                    "pyQName": "serial.set_rx_buffer_size"
                },
                "serial.setTxBufferSize": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "size": "32"
                        },
                        "help": "serial/set-tx-buffer-size",
                        "blockId": "serialSetTxBufferSize",
                        "block": "serial set tx buffer size to $size",
                        "advanced": true,
                        "paramHelp": {
                            "size": "length of the tx buffer in bytes, eg: 32"
                        },
                        "jsDoc": "Sets the size of the TX buffer in bytes",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial set tx buffer size to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "size",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "size",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "size",
                            "description": "length of the tx buffer in bytes, eg: 32",
                            "default": "32"
                        }
                    ],
                    "pyQName": "serial.set_tx_buffer_size"
                },
                "Buffer": {
                    "kind": 5,
                    "retType": ""
                },
                "Buffer.getUint8": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Reads an unsigned byte at a particular location"
                    },
                    "parameters": [
                        {
                            "name": "off"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Buffer.get_uint8"
                },
                "Buffer.isReadOnly": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "jsDoc": "Returns false when the buffer can be written to."
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Buffer.is_read_only"
                },
                "Buffer.setUint8": {
                    "kind": -1,
                    "attributes": {
                        "jsDoc": "Writes an unsigned byte at a particular location"
                    },
                    "parameters": [
                        {
                            "name": "off"
                        },
                        {
                            "name": "v"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Buffer.set_uint8"
                },
                "Buffer.setNumber": {
                    "kind": -1,
                    "attributes": {
                        "jsDoc": "Write a number in specified format in the buffer."
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "NumberFormat",
                            "isEnum": true
                        },
                        {
                            "name": "offset"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Buffer.set_number"
                },
                "Buffer.getNumber": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Read a number in specified format from the buffer."
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "NumberFormat",
                            "isEnum": true
                        },
                        {
                            "name": "offset"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Buffer.get_number"
                },
                "Buffer.length": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "property": "true",
                        "jsDoc": "Returns the length of a Buffer object."
                    },
                    "isInstance": true
                },
                "Buffer.fill": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "offset": "0",
                            "length": "-1"
                        },
                        "explicitDefaults": [
                            "offset",
                            "length"
                        ],
                        "jsDoc": "Fill (a fragment) of the buffer with given value."
                    },
                    "parameters": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "offset",
                            "initializer": "0",
                            "default": "0"
                        },
                        {
                            "name": "length",
                            "initializer": "-1",
                            "default": "-1"
                        }
                    ],
                    "isInstance": true
                },
                "Buffer.slice": {
                    "kind": -1,
                    "retType": "Buffer",
                    "attributes": {
                        "paramDefl": {
                            "offset": "0",
                            "length": "-1"
                        },
                        "explicitDefaults": [
                            "offset",
                            "length"
                        ],
                        "jsDoc": "Return a copy of a fragment of a buffer."
                    },
                    "parameters": [
                        {
                            "name": "offset",
                            "initializer": "0",
                            "default": "0"
                        },
                        {
                            "name": "length",
                            "initializer": "-1",
                            "default": "-1"
                        }
                    ],
                    "isInstance": true
                },
                "Buffer.shift": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "start": "0",
                            "length": "-1"
                        },
                        "explicitDefaults": [
                            "start",
                            "length"
                        ],
                        "paramHelp": {
                            "offset": "number of bytes to shift; use negative value to shift right",
                            "start": "start offset in buffer. Default is 0.",
                            "length": "number of elements in buffer. If negative, length is set as the buffer length minus"
                        },
                        "jsDoc": "Shift buffer left in place, with zero padding.\n\n\n\nstart. eg: -1"
                    },
                    "parameters": [
                        {
                            "name": "offset",
                            "description": "number of bytes to shift; use negative value to shift right"
                        },
                        {
                            "name": "start",
                            "description": "start offset in buffer. Default is 0.",
                            "initializer": "0",
                            "default": "0"
                        },
                        {
                            "name": "length",
                            "description": "number of elements in buffer. If negative, length is set as the buffer length minus",
                            "initializer": "-1",
                            "default": "-1"
                        }
                    ],
                    "isInstance": true
                },
                "Buffer.toString": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "Convert a buffer to string assuming UTF8 encoding"
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Buffer.to_string"
                },
                "Buffer.toHex": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "Convert a buffer to its hexadecimal representation."
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Buffer.to_hex"
                },
                "Buffer.rotate": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "start": "0",
                            "length": "-1"
                        },
                        "explicitDefaults": [
                            "start",
                            "length"
                        ],
                        "paramHelp": {
                            "offset": "number of bytes to shift; use negative value to shift right",
                            "start": "start offset in buffer. Default is 0.",
                            "length": "number of elements in buffer. If negative, length is set as the buffer length minus"
                        },
                        "jsDoc": "Rotate buffer left in place.\n\n\n\nstart. eg: -1"
                    },
                    "parameters": [
                        {
                            "name": "offset",
                            "description": "number of bytes to shift; use negative value to shift right"
                        },
                        {
                            "name": "start",
                            "description": "start offset in buffer. Default is 0.",
                            "initializer": "0",
                            "default": "0"
                        },
                        {
                            "name": "length",
                            "description": "number of elements in buffer. If negative, length is set as the buffer length minus",
                            "initializer": "-1",
                            "default": "-1"
                        }
                    ],
                    "isInstance": true
                },
                "Buffer.write": {
                    "kind": -1,
                    "attributes": {
                        "jsDoc": "Write contents of `src` at `dstOffset` in current buffer."
                    },
                    "parameters": [
                        {
                            "name": "dstOffset"
                        },
                        {
                            "name": "src",
                            "type": "Buffer"
                        }
                    ],
                    "isInstance": true
                },
                "Buffer.hash": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Compute k-bit FNV-1 non-cryptographic hash of the buffer."
                    },
                    "parameters": [
                        {
                            "name": "bits"
                        }
                    ],
                    "isInstance": true
                },
                "control.createBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "deprecated": "1",
                        "paramHelp": {
                            "size": "number of bytes in the buffer"
                        },
                        "jsDoc": "Create a new zero-initialized buffer."
                    },
                    "parameters": [
                        {
                            "name": "size",
                            "description": "number of bytes in the buffer"
                        }
                    ],
                    "pyQName": "bytearray"
                },
                "control.createBufferFromUTF8": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "deprecated": "1",
                        "paramHelp": {
                            "str": "the string to put in the buffer"
                        },
                        "jsDoc": "Create a new buffer with UTF8-encoded string"
                    },
                    "parameters": [
                        {
                            "name": "str",
                            "description": "the string to put in the buffer",
                            "type": "string"
                        }
                    ],
                    "pyQName": "control.create_buffer_from_utf8"
                },
                "Array": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "blockNamespace": "Arrays",
                        "jsDoc": "Add, remove, and replace items in lists."
                    }
                },
                "Array.length": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "weight": 84,
                        "blockId": "lists_length",
                        "block": "length of %VALUE",
                        "blockBuiltin": "true",
                        "blockNamespace": "arrays",
                        "jsDoc": "Get or set the length of an array. This number is one more than the index of the last element the array.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "length of ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "VALUE",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "VALUE",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "isInstance": true
                },
                "Array.push": {
                    "kind": -1,
                    "attributes": {
                        "help": "arrays/push",
                        "weight": 50,
                        "blockId": "array_push",
                        "block": "%list| add value %value| to end",
                        "blockNamespace": "arrays",
                        "group": "Modify",
                        "paramHelp": {
                            "items": "New elements of the Array."
                        },
                        "jsDoc": "Append a new element to an array.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " add value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " to end",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "item",
                            "type": "T"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Array.append"
                },
                "Array.concat": {
                    "kind": -1,
                    "retType": "T[]",
                    "attributes": {
                        "helper": "arrayConcat",
                        "weight": 40,
                        "paramHelp": {
                            "arr": "The other array that is being concatenated with"
                        },
                        "jsDoc": "Concatenates the values with another array."
                    },
                    "parameters": [
                        {
                            "name": "arr",
                            "description": "The other array that is being concatenated with",
                            "type": "T[]"
                        }
                    ],
                    "isInstance": true
                },
                "Array.pop": {
                    "kind": -1,
                    "retType": "T",
                    "attributes": {
                        "help": "arrays/pop",
                        "weight": 45,
                        "blockId": "array_pop",
                        "block": "get and remove last value from %list",
                        "blockNamespace": "arrays",
                        "group": "Read",
                        "jsDoc": "Remove the last element from an array and return it.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "get and remove last value from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Array.reverse": {
                    "kind": -1,
                    "attributes": {
                        "help": "arrays/reverse",
                        "helper": "arrayReverse",
                        "weight": 10,
                        "blockId": "array_reverse",
                        "block": "reverse %list",
                        "blockNamespace": "arrays",
                        "group": "Operations",
                        "jsDoc": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "reverse ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Array.shift": {
                    "kind": -1,
                    "retType": "T",
                    "attributes": {
                        "help": "arrays/shift",
                        "helper": "arrayShift",
                        "weight": 30,
                        "blockId": "array_shift",
                        "block": "get and remove first value from %list",
                        "blockNamespace": "arrays",
                        "group": "Read",
                        "jsDoc": "Remove the first element from an array and return it. This method changes the length of the array.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "get and remove first value from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Array.unshift": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "help": "arrays/unshift",
                        "helper": "arrayUnshift",
                        "weight": 25,
                        "blockId": "array_unshift",
                        "block": "%list| insert %value| at beginning",
                        "blockNamespace": "arrays",
                        "group": "Modify",
                        "paramHelp": {
                            "element": "to insert at the start of the Array."
                        },
                        "jsDoc": "Add one element to the beginning of an array and return the new length of the array.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " insert ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " at beginning",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "isInstance": true
                },
                "Array.slice": {
                    "kind": -1,
                    "retType": "T[]",
                    "attributes": {
                        "paramDefl": {
                            "start": "0",
                            "end": "0"
                        },
                        "help": "arrays/slice",
                        "helper": "arraySlice",
                        "weight": 41,
                        "blockNamespace": "arrays",
                        "paramHelp": {
                            "start": "The beginning of the specified portion of the array. eg: 0",
                            "end": "The end of the specified portion of the array. eg: 0"
                        },
                        "jsDoc": "Return a section of an array."
                    },
                    "parameters": [
                        {
                            "name": "start",
                            "description": "The beginning of the specified portion of the array. eg: 0",
                            "initializer": "undefined",
                            "default": "0"
                        },
                        {
                            "name": "end",
                            "description": "The end of the specified portion of the array. eg: 0",
                            "initializer": "undefined",
                            "default": "0"
                        }
                    ],
                    "isInstance": true
                },
                "Array.splice": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "start": "0",
                            "deleteCount": "0"
                        },
                        "helper": "arraySplice",
                        "weight": 40,
                        "paramHelp": {
                            "start": "The zero-based location in the array from which to start removing elements. eg: 0",
                            "deleteCount": "The number of elements to remove. eg: 0"
                        },
                        "jsDoc": "Remove elements from an array."
                    },
                    "parameters": [
                        {
                            "name": "start",
                            "description": "The zero-based location in the array from which to start removing elements. eg: 0",
                            "default": "0"
                        },
                        {
                            "name": "deleteCount",
                            "description": "The number of elements to remove. eg: 0",
                            "default": "0"
                        }
                    ],
                    "isInstance": true
                },
                "Array.join": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "helper": "arrayJoin",
                        "weight": 40,
                        "paramHelp": {
                            "sep": "the string separator"
                        },
                        "jsDoc": "joins all elements of an array into a string and returns this string."
                    },
                    "parameters": [
                        {
                            "name": "sep",
                            "description": "the string separator",
                            "type": "string",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true
                },
                "Array.some": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "helper": "arraySome",
                        "weight": 40,
                        "paramHelp": {
                            "callbackfn": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array."
                        },
                        "jsDoc": "Tests whether at least one element in the array passes the test implemented by the provided function."
                    },
                    "parameters": [
                        {
                            "name": "callbackfn",
                            "description": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.",
                            "type": "(value: T, index: number) => boolean",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "isInstance": true
                },
                "Array.every": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "helper": "arrayEvery",
                        "weight": 40,
                        "paramHelp": {
                            "callbackfn": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array."
                        },
                        "jsDoc": "Tests whether all elements in the array pass the test implemented by the provided function."
                    },
                    "parameters": [
                        {
                            "name": "callbackfn",
                            "description": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.",
                            "type": "(value: T, index: number) => boolean",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "isInstance": true
                },
                "Array.sort": {
                    "kind": -1,
                    "retType": "T[]",
                    "attributes": {
                        "helper": "arraySort",
                        "weight": 40,
                        "paramHelp": {
                            "specifies": "a function that defines the sort order. If omitted, the array is sorted according to the prmitive type"
                        },
                        "jsDoc": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable."
                    },
                    "parameters": [
                        {
                            "name": "callbackfn",
                            "type": "(value1: T, value2: T) => number",
                            "initializer": "undefined",
                            "handlerParameters": [
                                {
                                    "name": "value1",
                                    "type": "T"
                                },
                                {
                                    "name": "value2",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "isInstance": true
                },
                "Array.map": {
                    "kind": -1,
                    "retType": "U[]",
                    "attributes": {
                        "helper": "arrayMap",
                        "weight": 40,
                        "paramHelp": {
                            "callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array."
                        },
                        "jsDoc": "Call a defined callback function on each element of an array, and return an array containing the results."
                    },
                    "parameters": [
                        {
                            "name": "callbackfn",
                            "description": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
                            "type": "(value: T, index: number) => U",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "isInstance": true
                },
                "Array.forEach": {
                    "kind": -1,
                    "attributes": {
                        "helper": "arrayForEach",
                        "weight": 40,
                        "paramHelp": {
                            "callbackfn": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array."
                        },
                        "jsDoc": "Call a defined callback function on each element of an array."
                    },
                    "parameters": [
                        {
                            "name": "callbackfn",
                            "description": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.",
                            "type": "(value: T, index: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Array.for_each"
                },
                "Array.filter": {
                    "kind": -1,
                    "retType": "T[]",
                    "attributes": {
                        "helper": "arrayFilter",
                        "weight": 40,
                        "paramHelp": {
                            "callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array."
                        },
                        "jsDoc": "Return the elements of an array that meet the condition specified in a callback function."
                    },
                    "parameters": [
                        {
                            "name": "callbackfn",
                            "description": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
                            "type": "(value: T, index: number) => boolean",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "isInstance": true
                },
                "Array.fill": {
                    "kind": -1,
                    "retType": "T[]",
                    "attributes": {
                        "helper": "arrayFill",
                        "weight": 39,
                        "jsDoc": "Fills all the elements of an array from a start index to an end index with a static value. The end index is not included."
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "T"
                        },
                        {
                            "name": "start",
                            "initializer": "undefined"
                        },
                        {
                            "name": "end",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true
                },
                "Array.find": {
                    "kind": -1,
                    "retType": "T",
                    "attributes": {
                        "helper": "arrayFind",
                        "weight": 40,
                        "paramHelp": {
                            "callbackfn": ""
                        },
                        "jsDoc": "Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned."
                    },
                    "parameters": [
                        {
                            "name": "callbackfn",
                            "type": "(value: T, index: number) => boolean",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "isInstance": true
                },
                "Array.reduce": {
                    "kind": -1,
                    "retType": "U",
                    "attributes": {
                        "helper": "arrayReduce",
                        "weight": 40,
                        "paramHelp": {
                            "callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
                            "initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                        },
                        "jsDoc": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
                    },
                    "parameters": [
                        {
                            "name": "callbackfn",
                            "description": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
                            "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
                            "handlerParameters": [
                                {
                                    "name": "previousValue",
                                    "type": "U"
                                },
                                {
                                    "name": "currentValue",
                                    "type": "T"
                                },
                                {
                                    "name": "currentIndex",
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "name": "initialValue",
                            "description": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
                            "type": "U"
                        }
                    ],
                    "isInstance": true
                },
                "Array.removeElement": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "weight": 48,
                        "jsDoc": "Remove the first occurence of an object. Returns true if removed."
                    },
                    "parameters": [
                        {
                            "name": "element",
                            "type": "T"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Array.remove_element"
                },
                "Array.removeAt": {
                    "kind": -1,
                    "retType": "T",
                    "attributes": {
                        "help": "arrays/remove-at",
                        "weight": 47,
                        "blockId": "array_removeat",
                        "block": "%list| get and remove value at %index",
                        "blockNamespace": "arrays",
                        "group": "Read",
                        "jsDoc": "Remove the element at a certain index.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " get and remove value at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "index",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "index",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "index"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Array.remove_at"
                },
                "Array.insertAt": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "index": "0",
                            "the": "0"
                        },
                        "help": "arrays/insert-at",
                        "weight": 20,
                        "blockId": "array_insertAt",
                        "block": "%list| insert at %index| value %value",
                        "blockNamespace": "arrays",
                        "group": "Modify",
                        "paramHelp": {
                            "index": "the zero-based position in the list to insert the value, eg: 0",
                            "the": "value to insert, eg: 0"
                        },
                        "jsDoc": "Insert the value at a particular index, increases length by 1",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " insert at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "index",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "index",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "index",
                            "description": "the zero-based position in the list to insert the value, eg: 0",
                            "default": "0"
                        },
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Array.insert_at"
                },
                "Array.indexOf": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "help": "arrays/index-of",
                        "weight": 40,
                        "blockId": "array_indexof",
                        "block": "%list| find index of %value",
                        "blockNamespace": "arrays",
                        "group": "Operations",
                        "paramHelp": {
                            "item": "The value to locate in the array.",
                            "fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
                        },
                        "jsDoc": "Return the index of the first occurrence of a value in an array.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " find index of ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "item",
                            "description": "The value to locate in the array.",
                            "type": "T"
                        },
                        {
                            "name": "fromIndex",
                            "description": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Array.index"
                },
                "Array.get": {
                    "kind": -1,
                    "retType": "T",
                    "attributes": {
                        "paramDefl": {
                            "index": "0"
                        },
                        "help": "arrays/get",
                        "weight": 85,
                        "paramHelp": {
                            "index": "the zero-based position in the list of the item, eg: 0"
                        },
                        "jsDoc": "Get the value at a particular index"
                    },
                    "parameters": [
                        {
                            "name": "index",
                            "description": "the zero-based position in the list of the item, eg: 0",
                            "default": "0"
                        }
                    ],
                    "isInstance": true
                },
                "Array.set": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "index": "0",
                            "the": "0"
                        },
                        "help": "arrays/set",
                        "weight": 84,
                        "paramHelp": {
                            "index": "the zero-based position in the list to store the value, eg: 0",
                            "the": "value to insert, eg: 0"
                        },
                        "jsDoc": "Store a value at a particular index"
                    },
                    "parameters": [
                        {
                            "name": "index",
                            "description": "the zero-based position in the list to store the value, eg: 0",
                            "default": "0"
                        },
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "isInstance": true
                },
                "Array._unshiftStatement": {
                    "kind": -1,
                    "attributes": {
                        "help": "arrays/unshift",
                        "helper": "arrayUnshift",
                        "weight": 24,
                        "blockId": "array_unshift_statement",
                        "block": "%list| insert %value| at beginning",
                        "blockNamespace": "arrays",
                        "blockAliasFor": "Array.unshift",
                        "group": "Modify",
                        "paramHelp": {
                            "element": "to insert at the start of the Array."
                        },
                        "jsDoc": "Add one element to the beginning of an array and return the new length of the array.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " insert ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " at beginning",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Array._unshift_statement"
                },
                "Array._popStatement": {
                    "kind": -1,
                    "attributes": {
                        "help": "arrays/pop",
                        "weight": 44,
                        "blockId": "array_pop_statement",
                        "block": "remove last value from %list",
                        "blockNamespace": "arrays",
                        "blockAliasFor": "Array.pop",
                        "group": "Modify",
                        "jsDoc": "Remove the last element from an array and return it.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "remove last value from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Array._pop_statement"
                },
                "Array._shiftStatement": {
                    "kind": -1,
                    "attributes": {
                        "help": "arrays/shift",
                        "helper": "arrayShift",
                        "weight": 29,
                        "blockId": "array_shift_statement",
                        "block": "remove first value from %list",
                        "blockNamespace": "arrays",
                        "blockAliasFor": "Array.shift",
                        "group": "Modify",
                        "jsDoc": "Remove the first element from an array and return it. This method changes the length of the array.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "remove first value from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Array._shift_statement"
                },
                "Array._removeAtStatement": {
                    "kind": -1,
                    "attributes": {
                        "help": "arrays/remove-at",
                        "weight": 14,
                        "blockId": "array_removeat_statement",
                        "block": "%list| remove value at %index",
                        "blockNamespace": "arrays",
                        "blockAliasFor": "Array.removeAt",
                        "group": "Modify",
                        "jsDoc": "Remove the element at a certain index.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " remove value at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "index",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "list",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "index",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "index"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Array._remove_at_statement"
                },
                "String": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "blockNamespace": "text",
                        "jsDoc": "Combine, split, and search text strings."
                    }
                },
                "String.concat": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "weight": 49,
                        "blockId": "string_concat",
                        "blockNamespace": "text",
                        "paramHelp": {
                            "other": "The string to append to the end of the string."
                        },
                        "jsDoc": "Returns a string that contains the concatenation of two or more strings."
                    },
                    "parameters": [
                        {
                            "name": "other",
                            "description": "The string to append to the end of the string.",
                            "type": "string"
                        }
                    ],
                    "isInstance": true
                },
                "String.charAt": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "weight": 48,
                        "help": "text/char-at",
                        "blockId": "string_get",
                        "block": "char from %this=text|at %pos",
                        "blockNamespace": "text",
                        "paramHelp": {
                            "index": "The zero-based index of the desired character."
                        },
                        "jsDoc": "Return the character at the specified index.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "char from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pos",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "pos",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "index",
                            "description": "The zero-based index of the desired character."
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "String.char_at"
                },
                "String.length": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "property": "true",
                        "weight": 47,
                        "blockId": "text_length",
                        "block": "length of %VALUE",
                        "blockBuiltin": "true",
                        "blockNamespace": "text",
                        "jsDoc": "Returns the length of a String object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "length of ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "VALUE",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "VALUE",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "isInstance": true
                },
                "String.charCodeAt": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                        },
                        "jsDoc": "Return the Unicode value of the character at the specified location."
                    },
                    "parameters": [
                        {
                            "name": "index",
                            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "String.char_code_at"
                },
                "String.compare": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "help": "text/compare",
                        "blockId": "string_compare",
                        "block": "compare %this=text| to %that",
                        "blockNamespace": "text",
                        "paramHelp": {
                            "that": "String to compare to target string"
                        },
                        "jsDoc": "See how the order of characters in two strings is different (in ASCII encoding).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "compare ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "that",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "that",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "that",
                            "description": "String to compare to target string",
                            "type": "string"
                        }
                    ],
                    "isInstance": true
                },
                "String.substr": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "paramDefl": {
                            "length": "10",
                            "start": "0"
                        },
                        "explicitDefaults": [
                            "length"
                        ],
                        "help": "text/substr",
                        "blockId": "string_substr",
                        "block": "substring of %this=text|from %start|of length %length",
                        "blockNamespace": "text",
                        "paramHelp": {
                            "start": "first character index; can be negative from counting from the end, eg:0",
                            "length": "number of characters to extract"
                        },
                        "jsDoc": "Return a substring of the current string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "substring of ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "start",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "of length ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "length",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "start",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "length",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "start",
                            "description": "first character index; can be negative from counting from the end, eg:0",
                            "default": "0"
                        },
                        {
                            "name": "length",
                            "description": "number of characters to extract",
                            "initializer": "10",
                            "default": "10"
                        }
                    ],
                    "isInstance": true
                },
                "String.replace": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "helper": "stringReplace",
                        "paramHelp": {
                            "toReplace": "the substring to replace in the current string",
                            "replacer": "either the string that replaces toReplace in the current string,"
                        },
                        "jsDoc": "Return the current string with the first occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string."
                    },
                    "parameters": [
                        {
                            "name": "toReplace",
                            "description": "the substring to replace in the current string",
                            "type": "string"
                        },
                        {
                            "name": "replacer",
                            "description": "either the string that replaces toReplace in the current string,",
                            "type": "string | ((sub: string) => string)"
                        }
                    ],
                    "isInstance": true
                },
                "String.replaceAll": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "helper": "stringReplaceAll",
                        "paramHelp": {
                            "toReplace": "the substring to replace in the current string",
                            "replacer": "either the string that replaces toReplace in the current string,"
                        },
                        "jsDoc": "Return the current string with each occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string."
                    },
                    "parameters": [
                        {
                            "name": "toReplace",
                            "description": "the substring to replace in the current string",
                            "type": "string"
                        },
                        {
                            "name": "replacer",
                            "description": "either the string that replaces toReplace in the current string,",
                            "type": "string | ((sub: string) => string)"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "String.replace_all"
                },
                "String.slice": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "paramDefl": {
                            "start": "0"
                        },
                        "helper": "stringSlice",
                        "paramHelp": {
                            "start": "first character index; can be negative from counting from the end, eg:0",
                            "end": "one-past-last character index"
                        },
                        "jsDoc": "Return a substring of the current string."
                    },
                    "parameters": [
                        {
                            "name": "start",
                            "description": "first character index; can be negative from counting from the end, eg:0",
                            "default": "0"
                        },
                        {
                            "name": "end",
                            "description": "one-past-last character index",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true
                },
                "String.isEmpty": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "helper": "stringEmpty",
                        "blockId": "string_isempty",
                        "blockNamespace": "text",
                        "block": "%this=text| is empty",
                        "jsDoc": "Returns a value indicating if the string is empty",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " is empty",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "String.is_empty"
                },
                "String.indexOf": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "help": "text/index-of",
                        "blockId": "string_indexof",
                        "blockNamespace": "text",
                        "block": "%this=text|find index of %searchValue",
                        "paramHelp": {
                            "searchValue": "the text to find",
                            "start": "optional start index for the search"
                        },
                        "jsDoc": "Returns the position of the first occurrence of a specified value in a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "find index of ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "searchValue",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "searchValue",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "searchValue",
                            "description": "the text to find",
                            "type": "string"
                        },
                        {
                            "name": "start",
                            "description": "optional start index for the search",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "String.index_of"
                },
                "String.includes": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "help": "text/includes",
                        "blockId": "string_includes",
                        "blockNamespace": "text",
                        "block": "%this=text|includes %searchValue",
                        "paramHelp": {
                            "searchValue": "the text to find",
                            "start": "optional start index for the search"
                        },
                        "jsDoc": "Determines whether a string contains the characters of a specified string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "includes ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "searchValue",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "searchValue",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "searchValue",
                            "description": "the text to find",
                            "type": "string"
                        },
                        {
                            "name": "start",
                            "description": "optional start index for the search",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true
                },
                "String.split": {
                    "kind": -1,
                    "retType": "string[]",
                    "attributes": {
                        "helper": "stringSplit",
                        "help": "text/split",
                        "blockId": "string_split",
                        "blockNamespace": "text",
                        "block": "split %this=text|at %separator",
                        "paramHelp": {
                            "separator": "@param limit"
                        },
                        "jsDoc": "Splits the string according to the separators",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "split ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "separator",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "text",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "separator",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "separator",
                            "description": "@param limit",
                            "type": "string",
                            "initializer": "undefined"
                        },
                        {
                            "name": "limit",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true
                },
                "String.trim": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "Return a substring of the current string with whitespace removed from both ends"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "String.toLowerCase": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "helper": "stringToLowerCase",
                        "help": "text/to-lower-case",
                        "jsDoc": "Converts the string to lower case characters."
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "String.to_lower_case"
                },
                "parseFloat": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "text": "123",
                            "s": "123"
                        },
                        "help": "text/parse-float",
                        "blockId": "string_parsefloat",
                        "block": "parse to number %text",
                        "blockNamespace": "text",
                        "explicitDefaults": [
                            "text"
                        ],
                        "paramHelp": {
                            "s": "A string to convert into a number. eg: 123"
                        },
                        "jsDoc": "Convert a string to a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "parse to number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "text",
                            "type": "string",
                            "initializer": "123",
                            "default": "123"
                        }
                    ],
                    "pyQName": "parse_float"
                },
                "randint": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "min": "0",
                            "max": "10"
                        },
                        "blockId": "device_random",
                        "block": "pick random %min|to %limit",
                        "blockNamespace": "Math",
                        "help": "math/randint",
                        "paramHelp": {
                            "min": "the lower inclusive bound, eg: 0",
                            "max": "the upper inclusive bound, eg: 10"
                        },
                        "jsDoc": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pick random ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "min",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "limit",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "min",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "limit",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "min",
                            "description": "the lower inclusive bound, eg: 0",
                            "default": "0"
                        },
                        {
                            "name": "max",
                            "description": "the upper inclusive bound, eg: 10",
                            "default": "10"
                        }
                    ]
                },
                "Object": {
                    "kind": 5,
                    "retType": ""
                },
                "Function": {
                    "kind": 9,
                    "retType": "Function",
                    "extendsTypes": []
                },
                "IArguments": {
                    "kind": 9,
                    "retType": "IArguments",
                    "extendsTypes": []
                },
                "RegExp": {
                    "kind": 9,
                    "retType": "RegExp",
                    "extendsTypes": []
                },
                "Boolean": {
                    "kind": 9,
                    "retType": "Boolean",
                    "extendsTypes": []
                },
                "Boolean.toString": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "Returns a string representation of an object."
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Boolean.to_string"
                },
                "String@type": {
                    "kind": 9,
                    "retType": "String",
                    "attributes": {
                        "blockNamespace": "text",
                        "jsDoc": "Combine, split, and search text strings."
                    },
                    "extendsTypes": [],
                    "pyQName": "String"
                },
                "String.fromCharCode": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "math/from-char-code",
                        "weight": 1,
                        "blockNamespace": "text",
                        "blockId": "stringFromCharCode",
                        "block": "text from char code %code",
                        "jsDoc": "Make a string from the given ASCII character code.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "text from char code ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "code",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "code",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "code"
                        }
                    ],
                    "pyQName": "String.from_char_code"
                },
                "Number@type": {
                    "kind": 9,
                    "retType": "Number",
                    "extendsTypes": [],
                    "pyQName": "Number"
                },
                "Number.toString": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "Returns a string representation of a number."
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Number.to_string"
                },
                "Array@type": {
                    "kind": 9,
                    "retType": "T[]",
                    "attributes": {
                        "blockNamespace": "Arrays",
                        "jsDoc": "Add, remove, and replace items in lists."
                    },
                    "extendsTypes": [],
                    "pyQName": "Array"
                },
                "Array.isArray": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "jsDoc": "Check if a given object is an array."
                    },
                    "parameters": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ],
                    "pyQName": "Array.is_array"
                },
                "Object@type": {
                    "kind": 9,
                    "retType": "Object",
                    "extendsTypes": [],
                    "pyQName": "Object"
                },
                "Object.keys": {
                    "kind": -3,
                    "retType": "string[]",
                    "attributes": {
                        "jsDoc": "Return the field names in an object."
                    },
                    "parameters": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ]
                },
                "Math.pow": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "The base value of the expression.",
                            "y": "The exponent value of the expression."
                        },
                        "jsDoc": "Returns the value of a base expression taken to a specified power."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "The base value of the expression."
                        },
                        {
                            "name": "y",
                            "description": "The exponent value of the expression."
                        }
                    ]
                },
                "Math.random": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/random",
                        "jsDoc": "Returns a pseudorandom number between 0 and 1."
                    },
                    "parameters": []
                },
                "Math.randomRange": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "min": "0",
                            "max": "10"
                        },
                        "blockId": "device_random_deprecated",
                        "block": "pick random %min|to %limit",
                        "help": "math/random-range",
                        "deprecated": "true",
                        "paramHelp": {
                            "min": "the lower inclusive bound, eg: 0",
                            "max": "the upper inclusive bound, eg: 10"
                        },
                        "jsDoc": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pick random ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "min",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "limit",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "min",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "limit",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "min",
                            "description": "the lower inclusive bound, eg: 0",
                            "default": "0"
                        },
                        {
                            "name": "max",
                            "description": "the upper inclusive bound, eg: 10",
                            "default": "10"
                        }
                    ],
                    "pyQName": "Math.random_range"
                },
                "Math.log": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "A number"
                        },
                        "jsDoc": "Returns the natural logarithm (base e) of a number."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A number"
                        }
                    ]
                },
                "Math.exp": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "A number"
                        },
                        "jsDoc": "Returns returns ``e^x``."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A number"
                        }
                    ]
                },
                "Math.sin": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/trigonometry",
                        "paramHelp": {
                            "x": "An angle in radians"
                        },
                        "jsDoc": "Returns the sine of a number."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "An angle in radians"
                        }
                    ]
                },
                "Math.cos": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/trigonometry",
                        "paramHelp": {
                            "x": "An angle in radians"
                        },
                        "jsDoc": "Returns the cosine of a number."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "An angle in radians"
                        }
                    ]
                },
                "Math.tan": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "An angle in radians"
                        },
                        "jsDoc": "Returns the tangent of a number."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "An angle in radians"
                        }
                    ]
                },
                "Math.asin": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "A number"
                        },
                        "jsDoc": "Returns the arcsine (in radians) of a number"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A number"
                        }
                    ]
                },
                "Math.acos": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "A number"
                        },
                        "jsDoc": "Returns the arccosine (in radians) of a number"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A number"
                        }
                    ]
                },
                "Math.atan": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "A number"
                        },
                        "jsDoc": "Returns the arctangent (in radians) of a number"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A number"
                        }
                    ]
                },
                "Math.atan2": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "y": "A number",
                            "x": "A number"
                        },
                        "jsDoc": "Returns the arctangent of the quotient of its arguments."
                    },
                    "parameters": [
                        {
                            "name": "y",
                            "description": "A number"
                        },
                        {
                            "name": "x",
                            "description": "A number"
                        }
                    ]
                },
                "Math.sqrt": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "A numeric expression."
                        },
                        "jsDoc": "Returns the square root of a number."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A numeric expression."
                        }
                    ]
                },
                "Math.ceil": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math",
                        "paramHelp": {
                            "x": "A numeric expression."
                        },
                        "jsDoc": "Returns the smallest number greater than or equal to its numeric argument."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A numeric expression."
                        }
                    ]
                },
                "Math.floor": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math",
                        "paramHelp": {
                            "x": "A numeric expression."
                        },
                        "jsDoc": "Returns the greatest number less than or equal to its numeric argument."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A numeric expression."
                        }
                    ]
                },
                "Math.trunc": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math",
                        "paramHelp": {
                            "x": "A numeric expression."
                        },
                        "jsDoc": "Returns the number with the decimal part truncated."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A numeric expression."
                        }
                    ],
                    "pyQName": "int"
                },
                "Math.round": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math",
                        "paramHelp": {
                            "x": "The value to be rounded to the nearest number."
                        },
                        "jsDoc": "Returns a supplied numeric expression rounded to the nearest number."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "The value to be rounded to the nearest number."
                        }
                    ]
                },
                "Math.imul": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "The first number",
                            "y": "The second number"
                        },
                        "jsDoc": "Returns the value of integer signed 32 bit multiplication of two numbers."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "The first number"
                        },
                        {
                            "name": "y",
                            "description": "The second number"
                        }
                    ]
                },
                "Math.idiv": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "The first number",
                            "y": "The second number"
                        },
                        "jsDoc": "Returns the value of integer signed 32 bit division of two numbers."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "The first number"
                        },
                        {
                            "name": "y",
                            "description": "The second number"
                        }
                    ]
                },
                "control._onCodeStart": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "arg",
                            "type": "any"
                        }
                    ],
                    "pyQName": "control._on_code_start"
                },
                "control._onCodeStop": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "arg",
                            "type": "any"
                        }
                    ],
                    "pyQName": "control._on_code_stop"
                },
                "NaN": {
                    "kind": 4,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Constant representing Not-A-Number."
                    },
                    "pyQName": "na_n"
                },
                "Infinity": {
                    "kind": 4,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Constant representing positive infinity."
                    },
                    "pyQName": "infinity"
                },
                "isNaN": {
                    "kind": -3,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "x"
                        }
                    ],
                    "pyQName": "is_na_n"
                },
                "Number.isNaN": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "jsDoc": "Check if a given value is of type Number and it is a NaN."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "type": "any"
                        }
                    ],
                    "pyQName": "Number.is_na_n"
                },
                "StringMap": {
                    "kind": 9,
                    "retType": "StringMap",
                    "attributes": {
                        "jsDoc": "A dictionary from string key to string values"
                    },
                    "extendsTypes": []
                },
                "parseInt": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "text": "123"
                        },
                        "help": "text/parse-int",
                        "blockId": "string_parseint",
                        "block": "parse to integer %text",
                        "blockNamespace": "text",
                        "explicitDefaults": [
                            "text"
                        ],
                        "blockHidden": true,
                        "paramHelp": {
                            "text": "A string to convert into an integral number. eg: \"123\"",
                            "radix": "optional A value between 2 and 36 that specifies the base of the number in text."
                        },
                        "jsDoc": "Convert a string to an integer.\n\n\nIf this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\nAll other strings are considered decimal.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "parse to integer ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "text",
                            "description": "A string to convert into an integral number. eg: \"123\"",
                            "type": "string",
                            "initializer": "123",
                            "default": "123"
                        },
                        {
                            "name": "radix",
                            "description": "optional A value between 2 and 36 that specifies the base of the number in text.",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "int"
                },
                "helpers": {
                    "kind": 5,
                    "retType": ""
                },
                "helpers.arrayFill": {
                    "kind": -3,
                    "retType": "T[]",
                    "parameters": [
                        {
                            "name": "O",
                            "type": "T[]"
                        },
                        {
                            "name": "value",
                            "type": "T"
                        },
                        {
                            "name": "start",
                            "initializer": "undefined"
                        },
                        {
                            "name": "end",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "helpers.array_fill"
                },
                "helpers.arraySplice": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "start"
                        },
                        {
                            "name": "len"
                        }
                    ],
                    "pyQName": "helpers.array_splice"
                },
                "helpers.arrayReverse": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        }
                    ],
                    "pyQName": "helpers.array_reverse"
                },
                "helpers.arrayShift": {
                    "kind": -3,
                    "retType": "T",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        }
                    ],
                    "pyQName": "helpers.array_shift"
                },
                "helpers.arrayJoin": {
                    "kind": -3,
                    "retType": "string",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "sep",
                            "type": "string",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "helpers.array_join"
                },
                "helpers.arrayUnshift": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "pyQName": "helpers.array_unshift"
                },
                "helpers.arraySort": {
                    "kind": -3,
                    "retType": "T[]",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "callbackfn",
                            "type": "(value1: T, value2: T) => number",
                            "initializer": "undefined",
                            "handlerParameters": [
                                {
                                    "name": "value1",
                                    "type": "T"
                                },
                                {
                                    "name": "value2",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "pyQName": "helpers.array_sort"
                },
                "helpers.arrayMap": {
                    "kind": -3,
                    "retType": "U[]",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "callbackfn",
                            "type": "(value: T, index: number) => U",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "helpers.array_map"
                },
                "helpers.arraySome": {
                    "kind": -3,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "callbackfn",
                            "type": "(value: T, index: number) => boolean",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "helpers.array_some"
                },
                "helpers.arrayEvery": {
                    "kind": -3,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "callbackfn",
                            "type": "(value: T, index: number) => boolean",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "helpers.array_every"
                },
                "helpers.arrayForEach": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "callbackfn",
                            "type": "(value: T, index: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "helpers.array_for_each"
                },
                "helpers.arrayFilter": {
                    "kind": -3,
                    "retType": "T[]",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "callbackfn",
                            "type": "(value: T, index: number) => boolean",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "helpers.array_filter"
                },
                "helpers.arrayFind": {
                    "kind": -3,
                    "retType": "T",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "callbackfn",
                            "type": "(value: T, index: number) => boolean",
                            "handlerParameters": [
                                {
                                    "name": "value",
                                    "type": "T"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "helpers.array_find"
                },
                "helpers.arrayReduce": {
                    "kind": -3,
                    "retType": "U",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "callbackfn",
                            "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
                            "handlerParameters": [
                                {
                                    "name": "previousValue",
                                    "type": "U"
                                },
                                {
                                    "name": "currentValue",
                                    "type": "T"
                                },
                                {
                                    "name": "currentIndex",
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "name": "initialValue",
                            "type": "U"
                        }
                    ],
                    "pyQName": "helpers.array_reduce"
                },
                "helpers.arrayConcat": {
                    "kind": -3,
                    "retType": "T[]",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "otherArr",
                            "type": "T[]"
                        }
                    ],
                    "pyQName": "helpers.array_concat"
                },
                "helpers.arraySlice": {
                    "kind": -3,
                    "retType": "T[]",
                    "parameters": [
                        {
                            "name": "arr",
                            "type": "T[]"
                        },
                        {
                            "name": "start",
                            "initializer": "undefined"
                        },
                        {
                            "name": "end",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "helpers.array_slice"
                },
                "helpers.stringReplace": {
                    "kind": -3,
                    "retType": "string",
                    "parameters": [
                        {
                            "name": "s",
                            "type": "string"
                        },
                        {
                            "name": "toReplace",
                            "type": "string"
                        },
                        {
                            "name": "replacer",
                            "type": "string | ((sub: string) => string)"
                        }
                    ],
                    "pyQName": "helpers.string_replace"
                },
                "helpers.stringReplaceAll": {
                    "kind": -3,
                    "retType": "string",
                    "parameters": [
                        {
                            "name": "s",
                            "type": "string"
                        },
                        {
                            "name": "toReplace",
                            "type": "string"
                        },
                        {
                            "name": "replacer",
                            "type": "string | ((sub: string) => string)"
                        }
                    ],
                    "pyQName": "helpers.string_replace_all"
                },
                "helpers.stringSlice": {
                    "kind": -3,
                    "retType": "string",
                    "parameters": [
                        {
                            "name": "s",
                            "type": "string"
                        },
                        {
                            "name": "start"
                        },
                        {
                            "name": "end",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "helpers.string_slice"
                },
                "helpers.stringToLowerCase": {
                    "kind": -3,
                    "retType": "string",
                    "parameters": [
                        {
                            "name": "s",
                            "type": "string"
                        }
                    ],
                    "pyQName": "helpers.string_to_lower_case"
                },
                "helpers.stringSplit": {
                    "kind": -3,
                    "retType": "string[]",
                    "parameters": [
                        {
                            "name": "S",
                            "type": "string"
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "initializer": "undefined"
                        },
                        {
                            "name": "limit",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "helpers.string_split"
                },
                "helpers.stringTrim": {
                    "kind": -3,
                    "retType": "string",
                    "parameters": [
                        {
                            "name": "s",
                            "type": "string"
                        }
                    ],
                    "pyQName": "helpers.string_trim"
                },
                "helpers.isWhitespace": {
                    "kind": -3,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "c"
                        }
                    ],
                    "pyQName": "helpers.is_whitespace"
                },
                "helpers.stringEmpty": {
                    "kind": -3,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "S",
                            "type": "string"
                        }
                    ],
                    "pyQName": "helpers.string_empty"
                },
                "Math.clamp": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "min"
                        },
                        {
                            "name": "max"
                        },
                        {
                            "name": "value"
                        }
                    ]
                },
                "Math.abs": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/abs",
                        "paramHelp": {
                            "x": "A numeric expression for which the absolute value is needed."
                        },
                        "jsDoc": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "A numeric expression for which the absolute value is needed."
                        }
                    ],
                    "pyQName": "abs"
                },
                "Math.sign": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "The numeric expression to test"
                        },
                        "jsDoc": "Returns the sign of the x, indicating whether x is positive, negative or zero."
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "The numeric expression to test"
                        }
                    ]
                },
                "Math.max": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/max",
                        "jsDoc": "Returns the larger of two supplied numeric expressions."
                    },
                    "parameters": [
                        {
                            "name": "a"
                        },
                        {
                            "name": "b"
                        }
                    ],
                    "pyQName": "max"
                },
                "Math.min": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "math/min",
                        "jsDoc": "Returns the smaller of two supplied numeric expressions."
                    },
                    "parameters": [
                        {
                            "name": "a"
                        },
                        {
                            "name": "b"
                        }
                    ],
                    "pyQName": "min"
                },
                "Math.roundWithPrecision": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "x": "the number to round",
                            "digits": "the number of resulting digits"
                        },
                        "jsDoc": "Rounds ``x`` to a number with the given number of ``digits``"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "the number to round"
                        },
                        {
                            "name": "digits",
                            "description": "the number of resulting digits"
                        }
                    ],
                    "pyQName": "Math.round_with_precision"
                },
                "__internal": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "blockHidden": true
                    }
                },
                "__internal.__downUp": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "blockId": "toggleDownUp",
                        "block": "%down",
                        "paramFieldEditor": {
                            "down": "toggledownup"
                        },
                        "paramFieldEditorOptions": {
                            "down": {
                                "decompileLiterals": "true"
                            }
                        },
                        "jsDoc": "A shim to render a boolean as a down/up toggle",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "down",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "down",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "down",
                            "type": "boolean"
                        }
                    ]
                },
                "__internal.__upDown": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "blockId": "toggleUpDown",
                        "block": "%up",
                        "paramFieldEditor": {
                            "up": "toggleupdown"
                        },
                        "paramFieldEditorOptions": {
                            "up": {
                                "decompileLiterals": "true"
                            }
                        },
                        "jsDoc": "A shim to render a boolean as a up/down toggle",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "up",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "up",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "up",
                            "type": "boolean"
                        }
                    ]
                },
                "__internal.__highLow": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "blockId": "toggleHighLow",
                        "block": "%high",
                        "paramFieldEditor": {
                            "high": "togglehighlow"
                        },
                        "paramFieldEditorOptions": {
                            "high": {
                                "decompileLiterals": "true"
                            }
                        },
                        "jsDoc": "A shim to render a boolean as a high/low toggle",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "high",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "high",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "high",
                            "type": "boolean"
                        }
                    ]
                },
                "__internal.__onOff": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "blockId": "toggleOnOff",
                        "block": "%on",
                        "paramFieldEditor": {
                            "on": "toggleonoff"
                        },
                        "paramFieldEditorOptions": {
                            "on": {
                                "decompileLiterals": "true"
                            }
                        },
                        "jsDoc": "A shim to render a boolean as a on/off toggle",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "on",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "on",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "on",
                            "type": "boolean"
                        }
                    ]
                },
                "__internal.__yesNo": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "blockId": "toggleYesNo",
                        "block": "%yes",
                        "paramFieldEditor": {
                            "yes": "toggleyesno"
                        },
                        "paramFieldEditorOptions": {
                            "yes": {
                                "decompileLiterals": "true"
                            }
                        },
                        "jsDoc": "A shim to render a boolean as a yes/no toggle",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "yes",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "yes",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "yes",
                            "type": "boolean"
                        }
                    ]
                },
                "__internal.__winLose": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "blockId": "toggleWinLose",
                        "block": "%win",
                        "paramFieldEditor": {
                            "win": "togglewinlose"
                        },
                        "paramFieldEditorOptions": {
                            "win": {
                                "decompileLiterals": "true"
                            }
                        },
                        "jsDoc": "A shim to render a boolean as a win/lose toggle",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "win",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "win",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "win",
                            "type": "boolean"
                        }
                    ]
                },
                "__internal.__colorNumberPicker": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "value": "#ff0000",
                            "color": "#ff0000"
                        },
                        "blockId": "colorNumberPicker",
                        "block": "%value",
                        "blockHidden": true,
                        "shim": "TD_ID",
                        "colorSecondary": "#FFFFFF",
                        "paramFieldEditor": {
                            "value": "colornumber"
                        },
                        "paramFieldEditorOptions": {
                            "value": {
                                "decompileLiterals": "true",
                                "colours": "[\"#ff0000\",\"#ff8000\",\"#ffff00\",\"#ff9da5\",\"#00ff00\",\"#b09eff\",\"#00ffff\",\"#007fff\",\"#65471f\",\"#0000ff\",\"#7f00ff\",\"#ff0080\",\"#ff00ff\",\"#ffffff\",\"#999999\",\"#000000\"]",
                                "columns": "4",
                                "className": "rgbColorPicker"
                            }
                        },
                        "explicitDefaults": [
                            "value"
                        ],
                        "paramHelp": {
                            "color": "color, eg: #ff0000"
                        },
                        "jsDoc": "Get the color wheel field editor",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "initializer": "#ff0000",
                            "default": "#ff0000"
                        }
                    ]
                },
                "__internal.__colorWheelPicker": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "value": "10"
                        },
                        "blockId": "colorWheelPicker",
                        "block": "%value",
                        "blockHidden": true,
                        "shim": "TD_ID",
                        "colorSecondary": "#FFFFFF",
                        "paramFieldEditor": {
                            "value": "colorwheel"
                        },
                        "paramFieldEditorOptions": {
                            "value": {
                                "decompileLiterals": "true",
                                "sliderWidth": "200",
                                "min": "0",
                                "max": "255"
                            }
                        },
                        "paramHelp": {
                            "value": "value between 0 to 255 to get a color value, eg: 10"
                        },
                        "jsDoc": "Get the color wheel field editor",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "value between 0 to 255 to get a color value, eg: 10",
                            "default": "10"
                        }
                    ]
                },
                "__internal.__colorWheelHsvPicker": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "value": "10"
                        },
                        "blockId": "colorWheelHsvPicker",
                        "block": "%value",
                        "blockHidden": true,
                        "shim": "TD_ID",
                        "colorSecondary": "#FFFFFF",
                        "paramFieldEditor": {
                            "value": "colorwheel"
                        },
                        "paramFieldEditorOptions": {
                            "value": {
                                "decompileLiterals": "true",
                                "sliderWidth": "200",
                                "min": "0",
                                "max": "255",
                                "channel": "hsvfast"
                            }
                        },
                        "paramHelp": {
                            "value": "value between 0 to 255 to get a color value, eg: 10"
                        },
                        "jsDoc": "Get the color wheel field editor using HSV values",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "value between 0 to 255 to get a color value, eg: 10",
                            "default": "10"
                        }
                    ]
                },
                "__internal.__speedPicker": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "speed": "50"
                        },
                        "blockId": "speedPicker",
                        "block": "%speed",
                        "shim": "TD_ID",
                        "paramFieldEditor": {
                            "speed": "speed"
                        },
                        "colorSecondary": "#FFFFFF",
                        "weight": 0,
                        "blockHidden": true,
                        "paramFieldEditorOptions": {
                            "speed": {
                                "decompileLiterals": "1"
                            }
                        },
                        "paramHelp": {
                            "speed": "the speed, eg: 50"
                        },
                        "jsDoc": "A speed picker",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "speed",
                            "description": "the speed, eg: 50",
                            "default": "50"
                        }
                    ]
                },
                "__internal.__turnRatioPicker": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "turnratio": "0"
                        },
                        "blockId": "turnRatioPicker",
                        "block": "%turnratio",
                        "shim": "TD_ID",
                        "paramFieldEditor": {
                            "turnratio": "turnratio"
                        },
                        "colorSecondary": "#FFFFFF",
                        "weight": 0,
                        "blockHidden": true,
                        "paramFieldEditorOptions": {
                            "turnRatio": {
                                "decompileLiterals": "1"
                            }
                        },
                        "paramHelp": {
                            "turnratio": "the turn ratio, eg: 0"
                        },
                        "jsDoc": "A turn ratio picker",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "turnratio",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "turnratio",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "turnratio",
                            "description": "the turn ratio, eg: 0",
                            "default": "0"
                        }
                    ]
                },
                "__internal.__protractor": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "protractorPicker",
                        "block": "%angle",
                        "shim": "TD_ID",
                        "paramFieldEditor": {
                            "angle": "protractor"
                        },
                        "paramFieldEditorOptions": {
                            "angle": {
                                "decompileLiterals": "1"
                            }
                        },
                        "colorSecondary": "#FFFFFF",
                        "blockHidden": true,
                        "jsDoc": "A field editor that displays a protractor",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "angle",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "angle",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "angle"
                        }
                    ]
                },
                "__internal.__timePicker": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "ms": "500"
                        },
                        "blockId": "timePicker",
                        "block": "%ms",
                        "blockHidden": true,
                        "shim": "TD_ID",
                        "colorSecondary": "#FFFFFF",
                        "paramFieldEditor": {
                            "ms": "numberdropdown"
                        },
                        "paramFieldEditorOptions": {
                            "ms": {
                                "decompileLiterals": "true",
                                "data": "[[\"100 ms\", 100], [\"200 ms\", 200], [\"500 ms\", 500], [\"1 second\", 1000], [\"2 seconds\", 2000], [\"5 seconds\", 5000]]"
                            }
                        },
                        "paramHelp": {
                            "ms": "time duration in milliseconds, eg: 500, 1000"
                        },
                        "jsDoc": "Get the time field editor",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "ms",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ms",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "time duration in milliseconds, eg: 500, 1000",
                            "default": "500"
                        }
                    ]
                },
                "Math.randomBoolean": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "blockId": "logic_random",
                        "block": "pick random true or false",
                        "help": "math/random-boolean",
                        "weight": 0,
                        "jsDoc": "Generates a `true` or `false` value randomly, just like flipping a coin.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pick random true or false",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "Math.random_boolean"
                },
                "PinEvent": {
                    "kind": 6,
                    "retType": "PinEvent",
                    "extendsTypes": [
                        "PinEvent",
                        "Number"
                    ]
                },
                "PinEvent.PulseHigh": {
                    "retType": "PinEvent",
                    "attributes": {
                        "block": "pulse high",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pulse high",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinEvent.PulseHigh",
                        "Number"
                    ],
                    "pyQName": "PinEvent.PULSE_HIGH"
                },
                "PinEvent.PulseLow": {
                    "retType": "PinEvent",
                    "attributes": {
                        "block": "pulse low",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pulse low",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinEvent.PulseLow",
                        "Number"
                    ],
                    "pyQName": "PinEvent.PULSE_LOW"
                },
                "PinEvent.Rise": {
                    "retType": "PinEvent",
                    "attributes": {
                        "block": "rise",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "rise",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinEvent.Rise",
                        "Number"
                    ],
                    "pyQName": "PinEvent.RISE"
                },
                "PinEvent.Fall": {
                    "retType": "PinEvent",
                    "attributes": {
                        "block": "fall",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "fall",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "PinEvent.Fall",
                        "Number"
                    ],
                    "pyQName": "PinEvent.FALL"
                },
                "DigitalInOutPin": {
                    "kind": 9,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "noRefCounting": "true",
                        "fixedInstances": "true"
                    },
                    "extendsTypes": [
                        "DigitalInOutPin"
                    ]
                },
                "DigitalInOutPin.digitalRead": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "DigitalInOutPin.digital_read"
                },
                "DigitalInOutPin.digitalWrite": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "DigitalInOutPin.digital_write"
                },
                "DigitalInOutPin.onPulsed": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "pulse",
                            "type": "PulseValue",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "DigitalInOutPin.on_pulsed"
                },
                "DigitalInOutPin.onEvent": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "event",
                            "type": "PinEvent",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "DigitalInOutPin.on_event"
                },
                "DigitalInOutPin.pulseIn": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "PulseValue",
                            "isEnum": true
                        },
                        {
                            "name": "maxDuration",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "DigitalInOutPin.pulse_in"
                },
                "DigitalInOutPin.setPull": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "pull",
                            "type": "PinPullMode",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "DigitalInOutPin.set_pull"
                },
                "AnalogInPin": {
                    "kind": 9,
                    "retType": "AnalogInPin",
                    "attributes": {
                        "noRefCounting": "true",
                        "fixedInstances": "true"
                    },
                    "extendsTypes": [
                        "AnalogInPin",
                        "DigitalInOutPin"
                    ]
                },
                "AnalogInPin.analogRead": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "AnalogInPin.analog_read"
                },
                "AnalogOutPin": {
                    "kind": 9,
                    "retType": "AnalogOutPin",
                    "attributes": {
                        "noRefCounting": "true",
                        "fixedInstances": "true"
                    },
                    "extendsTypes": [
                        "AnalogOutPin",
                        "DigitalInOutPin"
                    ]
                },
                "AnalogOutPin.analogWrite": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AnalogOutPin.analog_write"
                },
                "AnalogInOutPin": {
                    "kind": 9,
                    "retType": "AnalogInOutPin",
                    "attributes": {
                        "noRefCounting": "true",
                        "fixedInstances": "true"
                    },
                    "extendsTypes": [
                        "AnalogInOutPin",
                        "AnalogInPin",
                        "DigitalInOutPin",
                        "AnalogOutPin"
                    ]
                },
                "PwmOnlyPin": {
                    "kind": 9,
                    "retType": "PwmOnlyPin",
                    "attributes": {
                        "noRefCounting": "true",
                        "fixedInstances": "true"
                    },
                    "extendsTypes": [
                        "PwmOnlyPin",
                        "DigitalInOutPin",
                        "AnalogOutPin"
                    ]
                },
                "PwmOnlyPin.analogSetPeriod": {
                    "kind": -1,
                    "attributes": {
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ]
                    },
                    "parameters": [
                        {
                            "name": "period"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "PwmOnlyPin.analog_set_period"
                },
                "PwmOnlyPin.servoWrite": {
                    "kind": -1,
                    "attributes": {
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ]
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "PwmOnlyPin.servo_write"
                },
                "PwmOnlyPin.servoSetPulse": {
                    "kind": -1,
                    "attributes": {
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ]
                    },
                    "parameters": [
                        {
                            "name": "duration"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "PwmOnlyPin.servo_set_pulse"
                },
                "PwmOnlyPin.servoSetContinuous": {
                    "kind": -1,
                    "attributes": {
                        "parts": "microservo",
                        "tracArgs": "0"
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "PwmOnlyPin.servo_set_continuous"
                },
                "PwmPin": {
                    "kind": 9,
                    "retType": "PwmPin",
                    "attributes": {
                        "noRefCounting": "true",
                        "fixedInstances": "true"
                    },
                    "extendsTypes": [
                        "PwmPin",
                        "PwmOnlyPin",
                        "DigitalInOutPin",
                        "AnalogOutPin",
                        "AnalogInPin"
                    ]
                },
                "MicrobitPin": {
                    "kind": 8,
                    "retType": "MicrobitPin",
                    "attributes": {
                        "noRefCounting": "true",
                        "fixedInstances": "true"
                    },
                    "extendsTypes": [
                        "MicrobitPin",
                        "AnalogInPin",
                        "DigitalInOutPin",
                        "AnalogOutPin",
                        "AnalogInOutPin",
                        "PwmOnlyPin"
                    ]
                },
                "MicrobitPin.id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "MicrobitPin.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "id"
                        }
                    ],
                    "isInstance": true
                },
                "MicrobitPin.digitalRead": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.digital_read"
                },
                "MicrobitPin.digitalWrite": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.digital_write"
                },
                "MicrobitPin.onPulsed": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "pulse",
                            "type": "PulseValue",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.on_pulsed"
                },
                "MicrobitPin.onEvent": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "event",
                            "type": "PinEvent",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.on_event"
                },
                "MicrobitPin.pulseIn": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "PulseValue",
                            "isEnum": true
                        },
                        {
                            "name": "maxDuration",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.pulse_in"
                },
                "MicrobitPin.setPull": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "pull",
                            "type": "PinPullMode",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.set_pull"
                },
                "MicrobitPin.analogRead": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.analog_read"
                },
                "MicrobitPin.analogWrite": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.analog_write"
                },
                "MicrobitPin.analogSetPeriod": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "period"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.analog_set_period"
                },
                "MicrobitPin.servoWrite": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.servo_write"
                },
                "MicrobitPin.servoSetContinuous": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.servo_set_continuous"
                },
                "MicrobitPin.servoSetPulse": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "duration"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "MicrobitPin.servo_set_pulse"
                },
                "pins.P0": {
                    "kind": 4,
                    "retType": "PwmPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P0"
                    }
                },
                "pins.P1": {
                    "kind": 4,
                    "retType": "PwmPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P1"
                    }
                },
                "pins.P2": {
                    "kind": 4,
                    "retType": "PwmPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P2"
                    }
                },
                "pins.P3": {
                    "kind": 4,
                    "retType": "AnalogInPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P3"
                    }
                },
                "pins.P4": {
                    "kind": 4,
                    "retType": "AnalogInPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P4"
                    }
                },
                "pins.P5": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P5"
                    }
                },
                "pins.P6": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P6"
                    }
                },
                "pins.P7": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P7"
                    }
                },
                "pins.P8": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P8"
                    }
                },
                "pins.P9": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P9"
                    }
                },
                "pins.P10": {
                    "kind": 4,
                    "retType": "AnalogInPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P10"
                    }
                },
                "pins.P11": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P3"
                    }
                },
                "pins.P12": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P12"
                    }
                },
                "pins.P13": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P13"
                    }
                },
                "pins.P14": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P14"
                    }
                },
                "pins.P15": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P15"
                    }
                },
                "pins.P16": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P16"
                    }
                },
                "pins.P19": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P19"
                    }
                },
                "pins.P20": {
                    "kind": 4,
                    "retType": "DigitalInOutPin",
                    "attributes": {
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "jsDoc": "Pin P19"
                    }
                },
                "basic.showNumber": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "interval": "150"
                        },
                        "callingConvention": 1,
                        "help": "basic/show-number",
                        "weight": 96,
                        "blockId": "device_show_number",
                        "block": "show|number %number",
                        "blockGap": "8",
                        "async": "true",
                        "parts": "ledmatrix",
                        "explicitDefaults": [
                            "interval"
                        ],
                        "paramHelp": {
                            "interval": "speed of scroll; eg: 150, 100, 200, -100"
                        },
                        "jsDoc": "Scroll a number on the screen. If the number fits on the screen (i.e. is a single digit), do not scroll.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "show",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "number",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "number",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "interval",
                            "description": "speed of scroll; eg: 150, 100, 200, -100",
                            "initializer": "150",
                            "default": "150"
                        }
                    ],
                    "pyQName": "basic.show_number"
                },
                "pause": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "ms": "100"
                        },
                        "paramHelp": {
                            "ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000"
                        },
                        "jsDoc": "Pause for the specified time in milliseconds"
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
                            "default": "100"
                        }
                    ]
                },
                "forever": {
                    "kind": -3,
                    "attributes": {
                        "paramHelp": {
                            "body": "code to execute"
                        },
                        "jsDoc": "Repeats the code forever in the background. On each iteration, allows other codes to run."
                    },
                    "parameters": [
                        {
                            "name": "a",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ]
                },
                "IconNames": {
                    "kind": 6,
                    "retType": "IconNames",
                    "extendsTypes": [
                        "IconNames",
                        "Number"
                    ]
                },
                "IconNames.Heart": {
                    "retType": "IconNames.Heart",
                    "attributes": {
                        "block": "heart",
                        "jres": "icons.heart",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "heart",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Heart",
                        "Number"
                    ],
                    "pyQName": "IconNames.HEART"
                },
                "IconNames.SmallHeart": {
                    "retType": "IconNames.SmallHeart",
                    "attributes": {
                        "block": "small heart",
                        "jres": "icons.smallheart",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "small heart",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.SmallHeart",
                        "Number"
                    ],
                    "pyQName": "IconNames.SMALL_HEART"
                },
                "IconNames.Yes": {
                    "retType": "IconNames.Yes",
                    "attributes": {
                        "block": "yes",
                        "jres": "icons.yes",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "yes",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Yes",
                        "Number"
                    ],
                    "pyQName": "IconNames.YES"
                },
                "IconNames.No": {
                    "retType": "IconNames.No",
                    "attributes": {
                        "block": "no",
                        "jres": "icons.no",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "no",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.No",
                        "Number"
                    ],
                    "pyQName": "IconNames.NO"
                },
                "IconNames.Happy": {
                    "retType": "IconNames.Happy",
                    "attributes": {
                        "block": "happy",
                        "jres": "icons.happy",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "happy",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Happy",
                        "Number"
                    ],
                    "pyQName": "IconNames.HAPPY"
                },
                "IconNames.Sad": {
                    "retType": "IconNames.Sad",
                    "attributes": {
                        "block": "sad",
                        "jres": "icons.sad",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "sad",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Sad",
                        "Number"
                    ],
                    "pyQName": "IconNames.SAD"
                },
                "IconNames.Confused": {
                    "retType": "IconNames.Confused",
                    "attributes": {
                        "block": "confused",
                        "jres": "icons.confused",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "confused",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Confused",
                        "Number"
                    ],
                    "pyQName": "IconNames.CONFUSED"
                },
                "IconNames.Angry": {
                    "retType": "IconNames.Angry",
                    "attributes": {
                        "block": "angry",
                        "jres": "icons.angry",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "angry",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Angry",
                        "Number"
                    ],
                    "pyQName": "IconNames.ANGRY"
                },
                "IconNames.Asleep": {
                    "retType": "IconNames.Asleep",
                    "attributes": {
                        "block": "asleep",
                        "jres": "icons.asleep",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "asleep",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Asleep",
                        "Number"
                    ],
                    "pyQName": "IconNames.ASLEEP"
                },
                "IconNames.Surprised": {
                    "retType": "IconNames.Surprised",
                    "attributes": {
                        "block": "surprised",
                        "jres": "icons.surprised",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "surprised",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Surprised",
                        "Number"
                    ],
                    "pyQName": "IconNames.SURPRISED"
                },
                "IconNames.Silly": {
                    "retType": "IconNames.Silly",
                    "attributes": {
                        "block": "silly",
                        "jres": "icons.silly",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "silly",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Silly",
                        "Number"
                    ],
                    "pyQName": "IconNames.SILLY"
                },
                "IconNames.Fabulous": {
                    "retType": "IconNames.Fabulous",
                    "attributes": {
                        "block": "fabulous",
                        "jres": "icons.fabulous",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "fabulous",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Fabulous",
                        "Number"
                    ],
                    "pyQName": "IconNames.FABULOUS"
                },
                "IconNames.Meh": {
                    "retType": "IconNames.Meh",
                    "attributes": {
                        "block": "meh",
                        "jres": "icons.meh",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "meh",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Meh",
                        "Number"
                    ],
                    "pyQName": "IconNames.MEH"
                },
                "IconNames.TShirt": {
                    "retType": "IconNames.TShirt",
                    "attributes": {
                        "block": "t-shirt",
                        "jres": "icons.tshirt",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "t-shirt",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.TShirt",
                        "Number"
                    ],
                    "pyQName": "IconNames.TSHIRT"
                },
                "IconNames.Rollerskate": {
                    "retType": "IconNames.Rollerskate",
                    "attributes": {
                        "block": "roller skate",
                        "jres": "icons.rollerskate",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "roller skate",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Rollerskate",
                        "Number"
                    ],
                    "pyQName": "IconNames.ROLLERSKATE"
                },
                "IconNames.Duck": {
                    "retType": "IconNames.Duck",
                    "attributes": {
                        "block": "duck",
                        "jres": "icons.duck",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "duck",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Duck",
                        "Number"
                    ],
                    "pyQName": "IconNames.DUCK"
                },
                "IconNames.House": {
                    "retType": "IconNames.House",
                    "attributes": {
                        "block": "house",
                        "jres": "icons.house",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "house",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.House",
                        "Number"
                    ],
                    "pyQName": "IconNames.HOUSE"
                },
                "IconNames.Tortoise": {
                    "retType": "IconNames.Tortoise",
                    "attributes": {
                        "block": "tortoise",
                        "jres": "icons.tortoise",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "tortoise",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Tortoise",
                        "Number"
                    ],
                    "pyQName": "IconNames.TORTOISE"
                },
                "IconNames.Butterfly": {
                    "retType": "IconNames.Butterfly",
                    "attributes": {
                        "block": "butterfly",
                        "jres": "icons.butterfly",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "butterfly",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Butterfly",
                        "Number"
                    ],
                    "pyQName": "IconNames.BUTTERFLY"
                },
                "IconNames.StickFigure": {
                    "retType": "IconNames.StickFigure",
                    "attributes": {
                        "block": "stick figure",
                        "jres": "icons.stickfigure",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "stick figure",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.StickFigure",
                        "Number"
                    ],
                    "pyQName": "IconNames.STICK_FIGURE"
                },
                "IconNames.Ghost": {
                    "retType": "IconNames.Ghost",
                    "attributes": {
                        "block": "ghost",
                        "jres": "icons.ghost",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ghost",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Ghost",
                        "Number"
                    ],
                    "pyQName": "IconNames.GHOST"
                },
                "IconNames.Sword": {
                    "retType": "IconNames.Sword",
                    "attributes": {
                        "block": "sword",
                        "jres": "icons.sword",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "sword",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Sword",
                        "Number"
                    ],
                    "pyQName": "IconNames.SWORD"
                },
                "IconNames.Giraffe": {
                    "retType": "IconNames.Giraffe",
                    "attributes": {
                        "block": "giraffe",
                        "jres": "icons.giraffe",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "giraffe",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Giraffe",
                        "Number"
                    ],
                    "pyQName": "IconNames.GIRAFFE"
                },
                "IconNames.Skull": {
                    "retType": "IconNames.Skull",
                    "attributes": {
                        "block": "skull",
                        "jres": "icons.skull",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "skull",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Skull",
                        "Number"
                    ],
                    "pyQName": "IconNames.SKULL"
                },
                "IconNames.Umbrella": {
                    "retType": "IconNames.Umbrella",
                    "attributes": {
                        "block": "umbrella",
                        "jres": "icons.umbrella",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "umbrella",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Umbrella",
                        "Number"
                    ],
                    "pyQName": "IconNames.UMBRELLA"
                },
                "IconNames.Snake": {
                    "retType": "IconNames.Snake",
                    "attributes": {
                        "block": "snake",
                        "jres": "icons.snake",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "snake",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Snake",
                        "Number"
                    ],
                    "pyQName": "IconNames.SNAKE"
                },
                "IconNames.Rabbit": {
                    "retType": "IconNames.Rabbit",
                    "attributes": {
                        "block": "rabbit",
                        "jres": "icons.rabbit",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "rabbit",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Rabbit",
                        "Number"
                    ],
                    "pyQName": "IconNames.RABBIT"
                },
                "IconNames.Cow": {
                    "retType": "IconNames.Cow",
                    "attributes": {
                        "block": "cow",
                        "jres": "icons.cow",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "cow",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Cow",
                        "Number"
                    ],
                    "pyQName": "IconNames.COW"
                },
                "IconNames.QuarterNote": {
                    "retType": "IconNames.QuarterNote",
                    "attributes": {
                        "block": "quarter note",
                        "jres": "icons.quarternote",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "quarter note",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.QuarterNote",
                        "Number"
                    ],
                    "pyQName": "IconNames.QUARTER_NOTE"
                },
                "IconNames.EigthNote": {
                    "retType": "IconNames.EigthNote",
                    "attributes": {
                        "block": "eigth note",
                        "jres": "icons.eigthnote",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "eigth note",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.EigthNote",
                        "Number"
                    ],
                    "pyQName": "IconNames.EIGTH_NOTE"
                },
                "IconNames.Pitchfork": {
                    "retType": "IconNames.Pitchfork",
                    "attributes": {
                        "block": "pitchfork",
                        "jres": "icons.pitchfork",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pitchfork",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Pitchfork",
                        "Number"
                    ],
                    "pyQName": "IconNames.PITCHFORK"
                },
                "IconNames.Target": {
                    "retType": "IconNames.Target",
                    "attributes": {
                        "block": "target",
                        "jres": "icons.target",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "target",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Target",
                        "Number"
                    ],
                    "pyQName": "IconNames.TARGET"
                },
                "IconNames.Triangle": {
                    "retType": "IconNames.Triangle",
                    "attributes": {
                        "block": "triangle",
                        "jres": "icons.triangle",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "triangle",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Triangle",
                        "Number"
                    ],
                    "pyQName": "IconNames.TRIANGLE"
                },
                "IconNames.LeftTriangle": {
                    "retType": "IconNames.LeftTriangle",
                    "attributes": {
                        "block": "left triangle",
                        "jres": "icons.lefttriangle",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "left triangle",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.LeftTriangle",
                        "Number"
                    ],
                    "pyQName": "IconNames.LEFT_TRIANGLE"
                },
                "IconNames.Chessboard": {
                    "retType": "IconNames.Chessboard",
                    "attributes": {
                        "block": "chess board",
                        "jres": "icons.chessboard",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "chess board",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Chessboard",
                        "Number"
                    ],
                    "pyQName": "IconNames.CHESSBOARD"
                },
                "IconNames.Diamond": {
                    "retType": "IconNames.Diamond",
                    "attributes": {
                        "block": "diamond",
                        "jres": "icons.diamond",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "diamond",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Diamond",
                        "Number"
                    ],
                    "pyQName": "IconNames.DIAMOND"
                },
                "IconNames.SmallDiamond": {
                    "retType": "IconNames.SmallDiamond",
                    "attributes": {
                        "block": "small diamond",
                        "jres": "icons.smalldiamond",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "small diamond",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.SmallDiamond",
                        "Number"
                    ],
                    "pyQName": "IconNames.SMALL_DIAMOND"
                },
                "IconNames.Square": {
                    "retType": "IconNames.Square",
                    "attributes": {
                        "block": "square",
                        "jres": "icons.square",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "square",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Square",
                        "Number"
                    ],
                    "pyQName": "IconNames.SQUARE"
                },
                "IconNames.SmallSquare": {
                    "retType": "IconNames.SmallSquare",
                    "attributes": {
                        "block": "small square",
                        "jres": "icons.smallsquare",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "small square",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.SmallSquare",
                        "Number"
                    ],
                    "pyQName": "IconNames.SMALL_SQUARE"
                },
                "IconNames.Scissors": {
                    "retType": "IconNames.Scissors",
                    "attributes": {
                        "block": "scissors",
                        "jres": "icons.scissors",
                        "whenUsed": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "scissors",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IconNames.Scissors",
                        "Number"
                    ],
                    "pyQName": "IconNames.SCISSORS"
                },
                "ArrowNames": {
                    "kind": 6,
                    "retType": "ArrowNames",
                    "extendsTypes": [
                        "ArrowNames",
                        "Number"
                    ]
                },
                "ArrowNames.North": {
                    "retType": "ArrowNames.North",
                    "attributes": {
                        "blockIdentity": "images.arrowNumber",
                        "block": "North",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "North",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ArrowNames.North",
                        "Number"
                    ],
                    "pyQName": "ArrowNames.NORTH"
                },
                "ArrowNames.NorthEast": {
                    "retType": "ArrowNames.NorthEast",
                    "attributes": {
                        "blockIdentity": "images.arrowNumber",
                        "block": "North East",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "North East",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ArrowNames.NorthEast",
                        "Number"
                    ],
                    "pyQName": "ArrowNames.NORTH_EAST"
                },
                "ArrowNames.East": {
                    "retType": "ArrowNames.East",
                    "attributes": {
                        "blockIdentity": "images.arrowNumber",
                        "block": "East",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "East",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ArrowNames.East",
                        "Number"
                    ],
                    "pyQName": "ArrowNames.EAST"
                },
                "ArrowNames.SouthEast": {
                    "retType": "ArrowNames.SouthEast",
                    "attributes": {
                        "blockIdentity": "images.arrowNumber",
                        "block": "South East",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "South East",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ArrowNames.SouthEast",
                        "Number"
                    ],
                    "pyQName": "ArrowNames.SOUTH_EAST"
                },
                "ArrowNames.South": {
                    "retType": "ArrowNames.South",
                    "attributes": {
                        "blockIdentity": "images.arrowNumber",
                        "block": "South",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "South",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ArrowNames.South",
                        "Number"
                    ],
                    "pyQName": "ArrowNames.SOUTH"
                },
                "ArrowNames.SouthWest": {
                    "retType": "ArrowNames.SouthWest",
                    "attributes": {
                        "blockIdentity": "images.arrowNumber",
                        "block": "South West",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "South West",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ArrowNames.SouthWest",
                        "Number"
                    ],
                    "pyQName": "ArrowNames.SOUTH_WEST"
                },
                "ArrowNames.West": {
                    "retType": "ArrowNames.West",
                    "attributes": {
                        "blockIdentity": "images.arrowNumber",
                        "block": "West",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "West",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ArrowNames.West",
                        "Number"
                    ],
                    "pyQName": "ArrowNames.WEST"
                },
                "ArrowNames.NorthWest": {
                    "retType": "ArrowNames.NorthWest",
                    "attributes": {
                        "blockIdentity": "images.arrowNumber",
                        "block": "North West",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "North West",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ArrowNames.NorthWest",
                        "Number"
                    ],
                    "pyQName": "ArrowNames.NORTH_WEST"
                },
                "basic.showIcon": {
                    "kind": -3,
                    "attributes": {
                        "weight": 90,
                        "blockGap": "8",
                        "blockId": "basic_show_icon",
                        "block": "show icon %i",
                        "icon": "",
                        "parts": "ledmatrix",
                        "help": "basic/show-icon",
                        "paramFieldEditor": {
                            "icon": "imagedropdown"
                        },
                        "paramFieldEditorOptions": {
                            "icon": {
                                "columns": "5",
                                "width": "380",
                                "maxRows": "4"
                            }
                        },
                        "paramHelp": {
                            "icon": "the predefined icon id",
                            "interval": "the amount of time (milliseconds) to show the icon. Default is 600."
                        },
                        "jsDoc": "Draws the selected icon on the LED screen",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "show icon ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "i",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "i",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "icon",
                            "description": "the predefined icon id",
                            "type": "IconNames",
                            "isEnum": true
                        },
                        {
                            "name": "interval",
                            "description": "the amount of time (milliseconds) to show the icon. Default is 600.",
                            "initializer": "600"
                        }
                    ],
                    "pyQName": "basic.show_icon"
                },
                "basic.showArrow": {
                    "kind": -3,
                    "attributes": {
                        "weight": 50,
                        "blockGap": "8",
                        "blockId": "basic_show_arrow",
                        "block": "show arrow %i=device_arrow",
                        "parts": "ledmatrix",
                        "advanced": true,
                        "help": "basic/show-arrow",
                        "paramHelp": {
                            "direction": "the direction of the arrow",
                            "interval": "the amount of time (milliseconds) to show the icon. Default is 600."
                        },
                        "jsDoc": "Draws an arrow on the LED screen",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "show arrow ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "i",
                                    "shadowBlockId": "device_arrow",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "i",
                                    "shadowBlockId": "device_arrow",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "direction",
                            "description": "the direction of the arrow"
                        },
                        {
                            "name": "interval",
                            "description": "the amount of time (milliseconds) to show the icon. Default is 600.",
                            "initializer": "600"
                        }
                    ],
                    "pyQName": "basic.show_arrow"
                },
                "images.arrowImage": {
                    "kind": -3,
                    "retType": "Image",
                    "attributes": {
                        "weight": 50,
                        "blockGap": "8",
                        "help": "images/arrow-image",
                        "blockId": "builtin_arrow_image",
                        "block": "arrow image %i",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "arrow image ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "i",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "i",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "i",
                            "type": "ArrowNames",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "images.arrow_image"
                },
                "images.iconImage": {
                    "kind": -3,
                    "retType": "Image",
                    "attributes": {
                        "weight": 50,
                        "blockGap": "8",
                        "help": "images/icon-image",
                        "blockId": "builtin_image",
                        "block": "icon image %i",
                        "paramFieldEditor": {
                            "i": "imagedropdown"
                        },
                        "paramFieldEditorOptions": {
                            "i": {
                                "columns": "5",
                                "width": "380",
                                "maxRows": "4"
                            }
                        },
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "icon image ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "i",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "i",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "i",
                            "type": "IconNames",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "images.icon_image"
                },
                "images.arrowNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "weight": 50,
                        "blockGap": "8",
                        "help": "images/arrow-number",
                        "blockId": "device_arrow",
                        "block": "%arrow",
                        "shim": "TD_ID",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "arrow",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "arrow",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "arrow",
                            "type": "ArrowNames",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "images.arrow_number"
                },
                "input.onScreenUp": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/on-screen-up",
                        "paramHelp": {
                            "body": "TODO"
                        },
                        "jsDoc": "Attaches code to run when the screen is facing up."
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "TODO",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_screen_up"
                },
                "input.onScreenDown": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/on-screen-down",
                        "paramHelp": {
                            "body": "TODO"
                        },
                        "jsDoc": "Attaches code to run when the screen is facing down."
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "TODO",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_screen_down"
                },
                "input.onShake": {
                    "kind": -3,
                    "attributes": {
                        "deprecated": "true",
                        "help": "input/on-shake",
                        "paramHelp": {
                            "body": "TODO"
                        },
                        "jsDoc": "Attaches code to run when the device is shaken."
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "TODO",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_shake"
                },
                "input.onLogoUp": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/on-logo-up",
                        "paramHelp": {
                            "body": "TODO"
                        },
                        "jsDoc": "Attaches code to run when the logo is oriented upwards and the board is vertical."
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "TODO",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_logo_up"
                },
                "input.onLogoDown": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/on-logo-down",
                        "paramHelp": {
                            "body": "TODO"
                        },
                        "jsDoc": "Attaches code to run when the logo is oriented downwards and the board is vertical."
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "TODO",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_logo_down"
                },
                "input.calibrate": {
                    "kind": -3,
                    "attributes": {
                        "weight": 0,
                        "help": "input/calibrate-compass",
                        "jsDoc": "Obsolete, use input.calibrateCompass instead."
                    },
                    "parameters": []
                },
                "input.runningTime": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "input/running-time",
                        "weight": 50,
                        "blockGap": "8",
                        "blockId": "device_get_running_time",
                        "block": "running time (ms)",
                        "advanced": true,
                        "jsDoc": "Gets the number of milliseconds elapsed since power on.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "running time (ms)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "input.running_time"
                },
                "input.runningTimeMicros": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "input/running-time-micros",
                        "weight": 49,
                        "blockId": "device_get_running_time_micros",
                        "block": "running time (micros)",
                        "advanced": true,
                        "jsDoc": "Gets the number of microseconds elapsed since power on.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "running time (micros)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "input.running_time_micros"
                },
                "control.runInParallel": {
                    "kind": -3,
                    "attributes": {
                        "hidden": "1",
                        "jsDoc": "Run other code in the parallel."
                    },
                    "parameters": [
                        {
                            "name": "a",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "control.run_in_parallel"
                },
                "control.eventSourceId": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "weight": 19,
                        "blockId": "control_event_source_id",
                        "block": "%id",
                        "blockGap": "8",
                        "shim": "TD_ID",
                        "advanced": true,
                        "jsDoc": "Returns the value of a C++ runtime constant",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "id",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "id",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "id",
                            "type": "EventBusSource",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "control.event_source_id"
                },
                "control.eventValueId": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "weight": 19,
                        "blockId": "control_event_value_id",
                        "block": "%id",
                        "shim": "TD_ID",
                        "advanced": true,
                        "jsDoc": "Returns the value of a C++ runtime constant",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "id",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "id",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "id",
                            "type": "EventBusValue",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "control.event_value_id"
                },
                "control.panic": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Display specified error code and stop the program."
                    },
                    "parameters": [
                        {
                            "name": "code"
                        }
                    ]
                },
                "control.assert": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "If the condition is false, display msg on serial console, and panic with code 098."
                    },
                    "parameters": [
                        {
                            "name": "condition",
                            "type": "boolean"
                        },
                        {
                            "name": "msg",
                            "type": "string",
                            "initializer": "undefined"
                        }
                    ]
                },
                "control.fail": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ]
                },
                "control.runtimeWarning": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Display warning in the simulator."
                    },
                    "parameters": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "pyQName": "control.runtime_warning"
                },
                "convertToText": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "text/convert-to-text",
                        "weight": 1,
                        "block": "convert $value=math_number to text",
                        "blockId": "variable_to_text",
                        "blockNamespace": "text",
                        "paramHelp": {
                            "value": "value to be converted to text"
                        },
                        "jsDoc": "Convert any value to text",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "convert ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "math_number",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to text",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "math_number",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "value to be converted to text",
                            "type": "any"
                        }
                    ],
                    "pyQName": "convert_to_text"
                },
                "control.IntervalMode": {
                    "kind": 6,
                    "retType": "control.IntervalMode",
                    "extendsTypes": [
                        "control.IntervalMode",
                        "Number"
                    ]
                },
                "control.IntervalMode.Interval": {
                    "retType": "control.IntervalMode.Interval",
                    "extendsTypes": [
                        "control.IntervalMode.Interval",
                        "Number"
                    ],
                    "pyQName": "control.IntervalMode.INTERVAL"
                },
                "control.IntervalMode.Timeout": {
                    "retType": "control.IntervalMode.Timeout",
                    "extendsTypes": [
                        "control.IntervalMode.Timeout",
                        "Number"
                    ],
                    "pyQName": "control.IntervalMode.TIMEOUT"
                },
                "control.IntervalMode.Immediate": {
                    "retType": "control.IntervalMode.Immediate",
                    "extendsTypes": [
                        "control.IntervalMode.Immediate",
                        "Number"
                    ],
                    "pyQName": "control.IntervalMode.IMMEDIATE"
                },
                "control.setInterval": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "func",
                            "type": "() => void",
                            "handlerParameters": []
                        },
                        {
                            "name": "delay"
                        },
                        {
                            "name": "mode",
                            "type": "control.IntervalMode",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "control.set_interval"
                },
                "control.clearInterval": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "intervalId"
                        },
                        {
                            "name": "mode",
                            "type": "control.IntervalMode",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "control.clear_interval"
                },
                "control.GCStats": {
                    "kind": 9,
                    "retType": "control.GCStats",
                    "extendsTypes": []
                },
                "control.GCStats.numGC": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "control.GCStats.num_gc"
                },
                "control.GCStats.numBlocks": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "control.GCStats.num_blocks"
                },
                "control.GCStats.totalBytes": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "control.GCStats.total_bytes"
                },
                "control.GCStats.lastFreeBytes": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "control.GCStats.last_free_bytes"
                },
                "control.GCStats.lastMaxBlockBytes": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "control.GCStats.last_max_block_bytes"
                },
                "control.GCStats.minFreeBytes": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "control.GCStats.min_free_bytes"
                },
                "control.gcStats": {
                    "kind": -3,
                    "retType": "control.GCStats",
                    "attributes": {
                        "jsDoc": "Get various statistics about the garbage collector (GC)"
                    },
                    "parameters": [],
                    "pyQName": "control.gc_stats"
                },
                "console": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 12,
                        "color": "#002050",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Reading and writing data to the console output."
                    }
                },
                "console.log": {
                    "kind": -3,
                    "attributes": {
                        "weight": 90,
                        "help": "console/log",
                        "blockGap": "8",
                        "paramShadowOptions": {
                            "text": {
                                "toString": "true"
                            }
                        },
                        "paramHelp": {
                            "value": "to send"
                        },
                        "jsDoc": "Write a line of text to the console output."
                    },
                    "parameters": [
                        {
                            "name": "text",
                            "type": "string"
                        }
                    ],
                    "pyQName": "print"
                },
                "console.logValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "x"
                        },
                        "weight": 88,
                        "blockGap": "8",
                        "help": "console/log-value",
                        "paramHelp": {
                            "name": "name of the value stream, eg: \"x\"",
                            "value": "to write"
                        },
                        "jsDoc": "Write a name:value pair as a line of text to the console output."
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "name of the value stream, eg: \"x\"",
                            "type": "string",
                            "default": "x"
                        },
                        {
                            "name": "value",
                            "description": "to write"
                        }
                    ],
                    "pyQName": "console.log_value"
                },
                "console.addListener": {
                    "kind": -3,
                    "attributes": {
                        "paramHelp": {
                            "listener": ""
                        },
                        "jsDoc": "Adds a listener for the log messages"
                    },
                    "parameters": [
                        {
                            "name": "listener",
                            "type": "(text: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "text",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "console.add_listener"
                },
                "Direction": {
                    "kind": 6,
                    "retType": "Direction",
                    "extendsTypes": [
                        "Direction",
                        "Number"
                    ]
                },
                "Direction.Right": {
                    "retType": "Direction.Right",
                    "attributes": {
                        "block": "right",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "right",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Direction.Right",
                        "Number"
                    ],
                    "pyQName": "Direction.RIGHT"
                },
                "Direction.Left": {
                    "retType": "Direction.Left",
                    "attributes": {
                        "block": "left",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "left",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Direction.Left",
                        "Number"
                    ],
                    "pyQName": "Direction.LEFT"
                },
                "LedSpriteProperty": {
                    "kind": 6,
                    "retType": "LedSpriteProperty",
                    "extendsTypes": [
                        "LedSpriteProperty",
                        "Number"
                    ]
                },
                "LedSpriteProperty.X": {
                    "retType": "LedSpriteProperty.X",
                    "attributes": {
                        "block": "x",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "x",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LedSpriteProperty.X",
                        "Number"
                    ]
                },
                "LedSpriteProperty.Y": {
                    "retType": "LedSpriteProperty.Y",
                    "attributes": {
                        "block": "y",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "y",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LedSpriteProperty.Y",
                        "Number"
                    ]
                },
                "LedSpriteProperty.Direction": {
                    "retType": "LedSpriteProperty.Direction",
                    "attributes": {
                        "block": "direction",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "direction",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LedSpriteProperty.Direction",
                        "Number"
                    ],
                    "pyQName": "LedSpriteProperty.DIRECTION"
                },
                "LedSpriteProperty.Brightness": {
                    "retType": "LedSpriteProperty.Brightness",
                    "attributes": {
                        "block": "brightness",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "brightness",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LedSpriteProperty.Brightness",
                        "Number"
                    ],
                    "pyQName": "LedSpriteProperty.BRIGHTNESS"
                },
                "LedSpriteProperty.Blink": {
                    "retType": "LedSpriteProperty.Blink",
                    "attributes": {
                        "block": "blink",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "blink",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LedSpriteProperty.Blink",
                        "Number"
                    ],
                    "pyQName": "LedSpriteProperty.BLINK"
                },
                "game": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#007A4B",
                        "weight": 32,
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "A single-LED sprite game engine"
                    }
                },
                "game.createSprite": {
                    "kind": -3,
                    "retType": "game.LedSprite",
                    "attributes": {
                        "paramDefl": {
                            "x": "2",
                            "y": "2"
                        },
                        "weight": 60,
                        "blockGap": "8",
                        "help": "game/create-sprite",
                        "blockId": "game_create_sprite",
                        "block": "create sprite at|x: %x|y: %y",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "x": "sprite horizontal coordinate, eg: 2",
                            "y": "sprite vertical coordinate, eg: 2"
                        },
                        "jsDoc": "Creates a new LED sprite pointing to the right.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create sprite at",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "x: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "y: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "sprite horizontal coordinate, eg: 2",
                            "default": "2"
                        },
                        {
                            "name": "y",
                            "description": "sprite vertical coordinate, eg: 2",
                            "default": "2"
                        }
                    ],
                    "pyQName": "game.create_sprite"
                },
                "game.score": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "weight": 9,
                        "help": "game/score",
                        "blockId": "game_score",
                        "block": "score",
                        "blockGap": "8",
                        "jsDoc": "Gets the current score",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "score",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "game.addScore": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "points": "1"
                        },
                        "weight": 10,
                        "help": "game/add-score",
                        "blockId": "game_add_score",
                        "block": "change score by|%points",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "points": "amount of points to change, eg: 1"
                        },
                        "jsDoc": "Adds points to the current score and shows an animation",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "change score by",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "points",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "points",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "points",
                            "description": "amount of points to change, eg: 1",
                            "default": "1"
                        }
                    ],
                    "pyQName": "game.add_score"
                },
                "game.startCountdown": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "ms": "10000"
                        },
                        "weight": 9,
                        "help": "game/start-countdown",
                        "blockId": "game_start_countdown",
                        "block": "start countdown|(ms) %duration",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "ms": "countdown duration in milliseconds, eg: 10000"
                        },
                        "jsDoc": "Shows an animation, then starts a game countdown timer, which causes Game Over when it reaches 0",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "start countdown",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "(ms) ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "duration",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "duration",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "countdown duration in milliseconds, eg: 10000",
                            "default": "10000"
                        }
                    ],
                    "pyQName": "game.start_countdown"
                },
                "game.gameOver": {
                    "kind": -3,
                    "attributes": {
                        "weight": 8,
                        "help": "game/game-over",
                        "blockId": "game_game_over",
                        "block": "game over",
                        "parts": "ledmatrix",
                        "jsDoc": "Displays a game over animation and the score.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "game over",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "game.game_over"
                },
                "game.setScore": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "game_set_score",
                        "block": "set score %points",
                        "blockGap": "8",
                        "weight": 10,
                        "help": "game/set-score",
                        "paramHelp": {
                            "value": "new score value."
                        },
                        "jsDoc": "Sets the current score value",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set score ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "points",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "points",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "new score value."
                        }
                    ],
                    "pyQName": "game.set_score"
                },
                "game.life": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "weight": 10,
                        "jsDoc": "Gets the current life"
                    },
                    "parameters": []
                },
                "game.setLife": {
                    "kind": -3,
                    "attributes": {
                        "weight": 10,
                        "help": "game/set-life",
                        "blockId": "game_set_life",
                        "block": "set life %value",
                        "blockGap": "8",
                        "paramHelp": {
                            "value": "current life value"
                        },
                        "jsDoc": "Sets the current life value",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set life ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "current life value"
                        }
                    ],
                    "pyQName": "game.set_life"
                },
                "game.addLife": {
                    "kind": -3,
                    "attributes": {
                        "weight": 10,
                        "help": "game/add-life",
                        "blockId": "game_add_life",
                        "block": "add life %lives",
                        "blockGap": "8",
                        "paramHelp": {
                            "lives": "amount of lives to add"
                        },
                        "jsDoc": "Add life points to the current life amount",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "add life ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "lives",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "lives",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "lives",
                            "description": "amount of lives to add"
                        }
                    ],
                    "pyQName": "game.add_life"
                },
                "game.currentTime": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "weight": 10,
                        "jsDoc": "Gets the remaining time (since `start countdown`) or current time (since the device started or `start stopwatch`) in milliseconds."
                    },
                    "parameters": [],
                    "pyQName": "game.current_time"
                },
                "game.removeLife": {
                    "kind": -3,
                    "attributes": {
                        "weight": 10,
                        "help": "game/remove-life",
                        "parts": "ledmatrix",
                        "blockId": "game_remove_life",
                        "block": "remove life %life",
                        "blockGap": "8",
                        "paramHelp": {
                            "life": "amount of life to remove"
                        },
                        "jsDoc": "Remove some life",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "remove life ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "life",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "life",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "life",
                            "description": "amount of life to remove"
                        }
                    ],
                    "pyQName": "game.remove_life"
                },
                "game.levelUp": {
                    "kind": -3,
                    "attributes": {
                        "weight": 10,
                        "parts": "ledmatrix",
                        "jsDoc": "Increments the level and display a message."
                    },
                    "parameters": [],
                    "pyQName": "game.level_up"
                },
                "game.level": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "weight": 10,
                        "jsDoc": "Gets the current level"
                    },
                    "parameters": []
                },
                "game.startStopwatch": {
                    "kind": -3,
                    "attributes": {
                        "weight": 10,
                        "jsDoc": "Starts a stopwatch timer. `current time` will return the elapsed time."
                    },
                    "parameters": [],
                    "pyQName": "game.start_stopwatch"
                },
                "game.isRunning": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "weight": 5,
                        "help": "game/is-running",
                        "blockId": "game_isrunning",
                        "block": "is running",
                        "blockGap": "8",
                        "jsDoc": "Indicates if the game is still running. Returns `false` if the game is over or paused.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "is running",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "game.is_running"
                },
                "game.showScore": {
                    "kind": -3,
                    "attributes": {
                        "weight": 60,
                        "parts": "ledmatrix",
                        "jsDoc": "Displays the score on the screen."
                    },
                    "parameters": [],
                    "pyQName": "game.show_score"
                },
                "game.isGameOver": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "weight": 7,
                        "help": "game/is-game-over",
                        "blockId": "game_isgameover",
                        "block": "is game over",
                        "blockGap": "8",
                        "jsDoc": "Indicates if the game is over and displaying the game over sequence.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "is game over",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "game.is_game_over"
                },
                "game.isPaused": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "weight": 6,
                        "help": "game/is-paused",
                        "blockId": "game_ispaused",
                        "block": "is paused",
                        "blockGap": "8",
                        "jsDoc": "Indicates if the game rendering is paused to allow other animations",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "is paused",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "game.is_paused"
                },
                "game.pause": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "game_pause",
                        "block": "pause",
                        "advanced": true,
                        "blockGap": "8",
                        "help": "game/pause",
                        "jsDoc": "Pauses the game rendering engine to allow other animations",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pause",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "game.resume": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "game_resume",
                        "block": "resume",
                        "advanced": true,
                        "blockGap": "8",
                        "help": "game/resumeP",
                        "jsDoc": "Resumes the game rendering engine",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "resume",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "game.LedSprite": {
                    "kind": 8,
                    "retType": "game.LedSprite",
                    "attributes": {
                        "jsDoc": "A game sprite rendered as a single LED"
                    },
                    "extendsTypes": []
                },
                "game.LedSprite.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "x"
                        },
                        {
                            "name": "y"
                        }
                    ],
                    "isInstance": true
                },
                "game.LedSprite.move": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "leds": "1"
                        },
                        "weight": 50,
                        "help": "game/move",
                        "blockId": "game_move_sprite",
                        "block": "%sprite|move by %leds",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "this": "the sprite to move",
                            "leds": "number of leds to move, eg: 1, -1"
                        },
                        "jsDoc": "Move a certain number of LEDs in the current direction",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "move by ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "leds",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "leds",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "leds",
                            "description": "number of leds to move, eg: 1, -1",
                            "default": "1"
                        }
                    ],
                    "isInstance": true
                },
                "game.LedSprite.goTo": {
                    "kind": -1,
                    "attributes": {
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "this": "TODO",
                            "x": "TODO",
                            "y": "TODO"
                        },
                        "jsDoc": "Go to this position on the screen"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "TODO"
                        },
                        {
                            "name": "y",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.go_to"
                },
                "game.LedSprite.ifOnEdgeBounce": {
                    "kind": -1,
                    "attributes": {
                        "weight": 18,
                        "help": "game/if-on-edge-bounce",
                        "blockId": "game_sprite_bounce",
                        "block": "%sprite|if on edge, bounce",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "this": "the sprite to check for bounce"
                        },
                        "jsDoc": "If touching the edge of the stage and facing towards it, then turn away.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "if on edge, bounce",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.if_on_edge_bounce"
                },
                "game.LedSprite.turn": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "degrees": "45"
                        },
                        "weight": 49,
                        "help": "game/turn",
                        "blockId": "game_turn_sprite",
                        "block": "%sprite|turn %direction|by (°) %degrees",
                        "paramHelp": {
                            "this": "the sprite to trun",
                            "direction": "left or right",
                            "degrees": "angle in degrees to turn, eg: 45, 90, 180, 135"
                        },
                        "jsDoc": "Turn the sprite",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "turn ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "by (°) ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "degrees",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "degrees",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "direction",
                            "description": "left or right",
                            "type": "Direction",
                            "isEnum": true
                        },
                        {
                            "name": "degrees",
                            "description": "angle in degrees to turn, eg: 45, 90, 180, 135",
                            "default": "45"
                        }
                    ],
                    "isInstance": true
                },
                "game.LedSprite.turnRight": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "the sprite to turn",
                            "degrees": "TODO"
                        },
                        "jsDoc": "Turn to the right (clockwise)"
                    },
                    "parameters": [
                        {
                            "name": "degrees",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.turn_right"
                },
                "game.LedSprite.turnLeft": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "the sprite to turn",
                            "degrees": "TODO"
                        },
                        "jsDoc": "Turn to the left (counter-clockwise)"
                    },
                    "parameters": [
                        {
                            "name": "degrees",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.turn_left"
                },
                "game.LedSprite.set": {
                    "kind": -1,
                    "attributes": {
                        "weight": 29,
                        "help": "game/set",
                        "blockId": "game_sprite_set_property",
                        "block": "%sprite|set %property|to %value",
                        "blockGap": "8",
                        "paramHelp": {
                            "property": "the name of the property to change",
                            "the": "updated value"
                        },
                        "jsDoc": "Sets a property of the sprite",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "property",
                            "description": "the name of the property to change",
                            "type": "LedSpriteProperty",
                            "isEnum": true
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true
                },
                "game.LedSprite.change": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "value": "1"
                        },
                        "weight": 30,
                        "help": "game/change",
                        "blockId": "game_sprite_change_xy",
                        "block": "%sprite|change %property|by %value",
                        "blockGap": "8",
                        "paramHelp": {
                            "property": "the name of the property to change",
                            "value": "amount of change, eg: 1"
                        },
                        "jsDoc": "Changes a property of the sprite",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "change ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "by ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "property",
                            "description": "the name of the property to change",
                            "type": "LedSpriteProperty",
                            "isEnum": true
                        },
                        {
                            "name": "value",
                            "description": "amount of change, eg: 1",
                            "default": "1"
                        }
                    ],
                    "isInstance": true
                },
                "game.LedSprite.get": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "weight": 28,
                        "help": "game/get",
                        "blockId": "game_sprite_property",
                        "block": "%sprite|%property",
                        "paramHelp": {
                            "property": "the name of the property to change"
                        },
                        "jsDoc": "Gets a property of the sprite",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "property",
                            "description": "the name of the property to change",
                            "type": "LedSpriteProperty",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "game.LedSprite.setDirection": {
                    "kind": -1,
                    "attributes": {
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "this": "the sprite to set direction for",
                            "degrees": "new direction in degrees"
                        },
                        "jsDoc": "Set the direction of the current sprite, rounded to the nearest multiple of 45"
                    },
                    "parameters": [
                        {
                            "name": "degrees",
                            "description": "new direction in degrees"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.set_direction"
                },
                "game.LedSprite.x": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO"
                        },
                        "jsDoc": "Reports the ``x`` position of a sprite on the LED screen"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "game.LedSprite.y": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO"
                        },
                        "jsDoc": "Reports the ``y`` position of a sprite on the LED screen"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "game.LedSprite.direction": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO"
                        },
                        "jsDoc": "Reports the current direction of a sprite"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "game.LedSprite.setX": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO",
                            "x": "TODO"
                        },
                        "jsDoc": "Set the ``x`` position of a sprite"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.set_x"
                },
                "game.LedSprite.setY": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO",
                            "y": "TODO"
                        },
                        "jsDoc": "Set the ``y`` position of a sprite"
                    },
                    "parameters": [
                        {
                            "name": "y",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.set_y"
                },
                "game.LedSprite.changeYBy": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO",
                            "y": "TODO"
                        },
                        "jsDoc": "Changes the ``y`` position by the given amount"
                    },
                    "parameters": [
                        {
                            "name": "y",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.change_yby"
                },
                "game.LedSprite.changeXBy": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO",
                            "x": "TODO"
                        },
                        "jsDoc": "Changes the ``x`` position by the given amount"
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.change_xby"
                },
                "game.LedSprite.isTouching": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "weight": 20,
                        "help": "game/is-touching",
                        "blockId": "game_sprite_touching_sprite",
                        "block": "is %sprite|touching %other",
                        "blockGap": "8",
                        "paramHelp": {
                            "this": "the sprite to check overlap or touch",
                            "other": "the other sprite to check overlap or touch"
                        },
                        "jsDoc": "Reports true if sprite has the same position as specified sprite",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "is ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "touching ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "other",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "other",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "other",
                            "description": "the other sprite to check overlap or touch",
                            "type": "game.LedSprite"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.is_touching"
                },
                "game.LedSprite.isTouchingEdge": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "weight": 19,
                        "help": "game/is-touching-edge",
                        "blockId": "game_sprite_touching_edge",
                        "block": "is %sprite|touching edge",
                        "blockGap": "8",
                        "paramHelp": {
                            "this": "the sprite to check for an edge contact"
                        },
                        "jsDoc": "Reports true if sprite is touching an edge",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "is ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "touching edge",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.is_touching_edge"
                },
                "game.LedSprite.on": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "the sprite"
                        },
                        "jsDoc": "Turns on the sprite (on by default)"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "game.LedSprite.off": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "the sprite"
                        },
                        "jsDoc": "Turns off the sprite (on by default)"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "game.LedSprite.setBrightness": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "brightness": "255."
                        },
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "this": "the sprite",
                            "brightness": "the brightness from 0 (off) to 255 (on), eg: 255."
                        },
                        "jsDoc": "Set the ``brightness`` of a sprite"
                    },
                    "parameters": [
                        {
                            "name": "brightness",
                            "description": "the brightness from 0 (off) to 255 (on), eg: 255.",
                            "default": "255."
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.set_brightness"
                },
                "game.LedSprite.brightness": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "this": "the sprite"
                        },
                        "jsDoc": "Reports the ``brightness` of a sprite on the LED screen"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "game.LedSprite.changeBrightnessBy": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "the sprite",
                            "value": "the value to change brightness"
                        },
                        "jsDoc": "Changes the ``y`` position by the given amount"
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "the value to change brightness"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.change_brightness_by"
                },
                "game.LedSprite.changeDirectionBy": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO",
                            "angle": "TODO"
                        },
                        "jsDoc": "Changes the ``direction`` position by the given amount by turning right"
                    },
                    "parameters": [
                        {
                            "name": "angle",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.change_direction_by"
                },
                "game.LedSprite.delete": {
                    "kind": -1,
                    "attributes": {
                        "weight": 59,
                        "blockGap": "8",
                        "help": "game/delete",
                        "blockId": "game_delete_sprite",
                        "block": "delete %this(sprite)",
                        "paramHelp": {
                            "this": "sprite to delete"
                        },
                        "jsDoc": "Deletes the sprite from the game engine. The sprite will no longer appear on the screen or interact with other sprites.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "delete ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "ref": false,
                                    "varName": "sprite"
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "ref": false,
                                    "varName": "sprite"
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "game.LedSprite.isDeleted": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "weight": 58,
                        "help": "game/is-deleted",
                        "blockId": "game_sprite_is_deleted",
                        "block": "is %sprite|deleted",
                        "jsDoc": "Reports whether the sprite has been deleted from the game engine.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "is ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "deleted",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "sprite",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.is_deleted"
                },
                "game.LedSprite.setBlink": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "sprite": "TODO",
                            "ms": "TODO"
                        },
                        "jsDoc": "Sets the blink duration interval in millisecond."
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.set_blink"
                },
                "game.LedSprite.changeBlinkBy": {
                    "kind": -1,
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO",
                            "ms": "TODO"
                        },
                        "jsDoc": "Changes the ``blink`` duration by the given amount of millisecons"
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "TODO"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "game.LedSprite.change_blink_by"
                },
                "game.LedSprite.blink": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramHelp": {
                            "this": "TODO"
                        },
                        "jsDoc": "Reports the ``blink`` duration of a sprite"
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "game.invalidSprite": {
                    "kind": -3,
                    "retType": "game.LedSprite",
                    "attributes": {
                        "weight": 0,
                        "jsDoc": "Gets an invalid sprite; used to initialize locals."
                    },
                    "parameters": [],
                    "pyQName": "game.invalid_sprite"
                },
                "led.point": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "help": "led/point",
                        "weight": 76,
                        "blockId": "device_point",
                        "block": "a point|x %x|y %y",
                        "parts": "ledmatrix",
                        "paramMin": {
                            "x": "0",
                            "y": "0"
                        },
                        "paramMax": {
                            "x": "4",
                            "y": "4"
                        },
                        "paramFieldEditorOptions": {
                            "x": {
                                "precision": "1"
                            },
                            "y": {
                                "precision": "1"
                            }
                        },
                        "paramHelp": {
                            "x": "the horizontal coordinate of the LED",
                            "y": "the vertical coordinate of the LED"
                        },
                        "jsDoc": "Get the on/off state of the specified LED using x, y coordinates. (0,0) is upper left.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "a point",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "x ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "y ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "the horizontal coordinate of the LED",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        },
                        {
                            "name": "y",
                            "description": "the vertical coordinate of the LED",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        }
                    ]
                },
                "led.plotBarGraph": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "high": "0"
                        },
                        "help": "led/plot-bar-graph",
                        "weight": 20,
                        "blockId": "device_plot_bar_graph",
                        "block": "plot bar graph of %value up to %high",
                        "icon": "",
                        "blockExternalInputs": "true",
                        "parts": "ledmatrix",
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "value": "current value to plot",
                            "high": "maximum value. If 0, maximum value adjusted automatically, eg: 0"
                        },
                        "jsDoc": "Displays a vertical bar graph based on the `value` and `high` value.\nIf `high` is 0, the chart gets adjusted automatically.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "plot bar graph of ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " up to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "high",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "high",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "current value to plot"
                        },
                        {
                            "name": "high",
                            "description": "maximum value. If 0, maximum value adjusted automatically, eg: 0",
                            "default": "0"
                        }
                    ],
                    "pyQName": "led.plot_bar_graph"
                },
                "led.toggle": {
                    "kind": -3,
                    "attributes": {
                        "help": "led/toggle",
                        "weight": 77,
                        "blockId": "device_led_toggle",
                        "block": "toggle|x %x|y %y",
                        "icon": "",
                        "blockGap": "8",
                        "parts": "ledmatrix",
                        "paramMin": {
                            "x": "0",
                            "y": "0"
                        },
                        "paramMax": {
                            "x": "4",
                            "y": "4"
                        },
                        "paramFieldEditorOptions": {
                            "x": {
                                "precision": "1"
                            },
                            "y": {
                                "precision": "1"
                            }
                        },
                        "paramHelp": {
                            "x": "pixel column",
                            "y": "pixel row"
                        },
                        "jsDoc": "Toggles a particular pixel",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "toggle",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "x ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "y ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "x",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "y",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "x",
                            "description": "pixel column",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        },
                        {
                            "name": "y",
                            "description": "pixel row",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "4"
                                }
                            }
                        }
                    ]
                },
                "led.plotAll": {
                    "kind": -3,
                    "attributes": {
                        "help": "led/plot-all",
                        "parts": "ledmatrix",
                        "jsDoc": "Turns all LEDS on"
                    },
                    "parameters": [],
                    "pyQName": "led.plot_all"
                },
                "led.toggleAll": {
                    "kind": -3,
                    "attributes": {
                        "help": "led/toggle-all",
                        "parts": "ledmatrix",
                        "jsDoc": "Inverts the current LED display"
                    },
                    "parameters": [],
                    "pyQName": "led.toggle_all"
                },
                "led.fadeIn": {
                    "kind": -3,
                    "attributes": {
                        "help": "led/fade-in",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "ms": "fade time in milleseconds"
                        },
                        "jsDoc": "Fades in the screen display."
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "fade time in milleseconds",
                            "initializer": "700"
                        }
                    ],
                    "pyQName": "led.fade_in"
                },
                "led.fadeOut": {
                    "kind": -3,
                    "attributes": {
                        "help": "led/fade-out",
                        "parts": "ledmatrix",
                        "paramHelp": {
                            "ms": "fade time in milliseconds"
                        },
                        "jsDoc": "Fades out the screen brightness."
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "fade time in milliseconds",
                            "initializer": "700"
                        }
                    ],
                    "pyQName": "led.fade_out"
                },
                "Note": {
                    "kind": 6,
                    "retType": "Note",
                    "extendsTypes": [
                        "Note",
                        "Number"
                    ]
                },
                "Note.C": {
                    "retType": "Note.C",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "262"
                    },
                    "extendsTypes": [
                        "Note.C",
                        "Number"
                    ]
                },
                "Note.CSharp": {
                    "retType": "Note.CSharp",
                    "attributes": {
                        "block": "C#",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "277",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "C#",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.CSharp",
                        "Number"
                    ],
                    "pyQName": "Note.CSHARP"
                },
                "Note.D": {
                    "retType": "Note.D",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "294"
                    },
                    "extendsTypes": [
                        "Note.D",
                        "Number"
                    ]
                },
                "Note.Eb": {
                    "retType": "Note.Eb",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "311"
                    },
                    "extendsTypes": [
                        "Note.Eb",
                        "Number"
                    ],
                    "pyQName": "Note.EB"
                },
                "Note.E": {
                    "retType": "Note.E",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "330"
                    },
                    "extendsTypes": [
                        "Note.E",
                        "Number"
                    ]
                },
                "Note.F": {
                    "retType": "Note.F",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "349"
                    },
                    "extendsTypes": [
                        "Note.F",
                        "Number"
                    ]
                },
                "Note.FSharp": {
                    "retType": "Note.FSharp",
                    "attributes": {
                        "block": "F#",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "370",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "F#",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.FSharp",
                        "Number"
                    ],
                    "pyQName": "Note.FSHARP"
                },
                "Note.G": {
                    "retType": "Note.G",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "392"
                    },
                    "extendsTypes": [
                        "Note.G",
                        "Number"
                    ]
                },
                "Note.GSharp": {
                    "retType": "Note.GSharp",
                    "attributes": {
                        "block": "G#",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "415",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "G#",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.GSharp",
                        "Number"
                    ],
                    "pyQName": "Note.GSHARP"
                },
                "Note.A": {
                    "retType": "Note.A",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "440"
                    },
                    "extendsTypes": [
                        "Note.A",
                        "Number"
                    ]
                },
                "Note.Bb": {
                    "retType": "Note.Bb",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "466"
                    },
                    "extendsTypes": [
                        "Note.Bb",
                        "Number"
                    ],
                    "pyQName": "Note.BB"
                },
                "Note.B": {
                    "retType": "Note.B",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "494"
                    },
                    "extendsTypes": [
                        "Note.B",
                        "Number"
                    ]
                },
                "Note.C3": {
                    "retType": "Note.C3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "131"
                    },
                    "extendsTypes": [
                        "Note.C3",
                        "Number"
                    ]
                },
                "Note.CSharp3": {
                    "retType": "Note.CSharp3",
                    "attributes": {
                        "block": "C#3",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "139",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "C#3",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.CSharp3",
                        "Number"
                    ],
                    "pyQName": "Note.CSHARP3"
                },
                "Note.D3": {
                    "retType": "Note.D3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "147"
                    },
                    "extendsTypes": [
                        "Note.D3",
                        "Number"
                    ]
                },
                "Note.Eb3": {
                    "retType": "Note.Eb3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "156"
                    },
                    "extendsTypes": [
                        "Note.Eb3",
                        "Number"
                    ],
                    "pyQName": "Note.EB3"
                },
                "Note.E3": {
                    "retType": "Note.E3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "165"
                    },
                    "extendsTypes": [
                        "Note.E3",
                        "Number"
                    ]
                },
                "Note.F3": {
                    "retType": "Note.F3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "175"
                    },
                    "extendsTypes": [
                        "Note.F3",
                        "Number"
                    ]
                },
                "Note.FSharp3": {
                    "retType": "Note.FSharp3",
                    "attributes": {
                        "block": "F#3",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "185",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "F#3",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.FSharp3",
                        "Number"
                    ],
                    "pyQName": "Note.FSHARP3"
                },
                "Note.G3": {
                    "retType": "Note.G3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "196"
                    },
                    "extendsTypes": [
                        "Note.G3",
                        "Number"
                    ]
                },
                "Note.GSharp3": {
                    "retType": "Note.GSharp3",
                    "attributes": {
                        "block": "G#3",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "208",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "G#3",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.GSharp3",
                        "Number"
                    ],
                    "pyQName": "Note.GSHARP3"
                },
                "Note.A3": {
                    "retType": "Note.A3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "220"
                    },
                    "extendsTypes": [
                        "Note.A3",
                        "Number"
                    ]
                },
                "Note.Bb3": {
                    "retType": "Note.Bb3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "233"
                    },
                    "extendsTypes": [
                        "Note.Bb3",
                        "Number"
                    ],
                    "pyQName": "Note.BB3"
                },
                "Note.B3": {
                    "retType": "Note.B3",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "247"
                    },
                    "extendsTypes": [
                        "Note.B3",
                        "Number"
                    ]
                },
                "Note.C4": {
                    "retType": "Note.C",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "262"
                    },
                    "extendsTypes": [
                        "Note.C4",
                        "Number"
                    ]
                },
                "Note.CSharp4": {
                    "retType": "Note.CSharp",
                    "attributes": {
                        "block": "C#4",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "277",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "C#4",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.CSharp4",
                        "Number"
                    ],
                    "pyQName": "Note.CSHARP4"
                },
                "Note.D4": {
                    "retType": "Note.D",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "294"
                    },
                    "extendsTypes": [
                        "Note.D4",
                        "Number"
                    ]
                },
                "Note.Eb4": {
                    "retType": "Note.Eb",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "311"
                    },
                    "extendsTypes": [
                        "Note.Eb4",
                        "Number"
                    ],
                    "pyQName": "Note.EB4"
                },
                "Note.E4": {
                    "retType": "Note.E",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "330"
                    },
                    "extendsTypes": [
                        "Note.E4",
                        "Number"
                    ]
                },
                "Note.F4": {
                    "retType": "Note.F",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "349"
                    },
                    "extendsTypes": [
                        "Note.F4",
                        "Number"
                    ]
                },
                "Note.FSharp4": {
                    "retType": "Note.FSharp",
                    "attributes": {
                        "block": "F#4",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "370",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "F#4",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.FSharp4",
                        "Number"
                    ],
                    "pyQName": "Note.FSHARP4"
                },
                "Note.G4": {
                    "retType": "Note.G",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "392"
                    },
                    "extendsTypes": [
                        "Note.G4",
                        "Number"
                    ]
                },
                "Note.GSharp4": {
                    "retType": "Note.GSharp",
                    "attributes": {
                        "block": "G#4",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "415",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "G#4",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.GSharp4",
                        "Number"
                    ],
                    "pyQName": "Note.GSHARP4"
                },
                "Note.A4": {
                    "retType": "Note.A",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "440"
                    },
                    "extendsTypes": [
                        "Note.A4",
                        "Number"
                    ]
                },
                "Note.Bb4": {
                    "retType": "Note.Bb",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "466"
                    },
                    "extendsTypes": [
                        "Note.Bb4",
                        "Number"
                    ],
                    "pyQName": "Note.BB4"
                },
                "Note.B4": {
                    "retType": "Note.B",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "494"
                    },
                    "extendsTypes": [
                        "Note.B4",
                        "Number"
                    ]
                },
                "Note.C5": {
                    "retType": "Note.C5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "523"
                    },
                    "extendsTypes": [
                        "Note.C5",
                        "Number"
                    ]
                },
                "Note.CSharp5": {
                    "retType": "Note.CSharp5",
                    "attributes": {
                        "block": "C#5",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "555",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "C#5",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.CSharp5",
                        "Number"
                    ],
                    "pyQName": "Note.CSHARP5"
                },
                "Note.D5": {
                    "retType": "Note.D5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "587"
                    },
                    "extendsTypes": [
                        "Note.D5",
                        "Number"
                    ]
                },
                "Note.Eb5": {
                    "retType": "Note.Eb5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "622"
                    },
                    "extendsTypes": [
                        "Note.Eb5",
                        "Number"
                    ],
                    "pyQName": "Note.EB5"
                },
                "Note.E5": {
                    "retType": "Note.E5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "659"
                    },
                    "extendsTypes": [
                        "Note.E5",
                        "Number"
                    ]
                },
                "Note.F5": {
                    "retType": "Note.F5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "698"
                    },
                    "extendsTypes": [
                        "Note.F5",
                        "Number"
                    ]
                },
                "Note.FSharp5": {
                    "retType": "Note.FSharp5",
                    "attributes": {
                        "block": "F#5",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "740",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "F#5",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.FSharp5",
                        "Number"
                    ],
                    "pyQName": "Note.FSHARP5"
                },
                "Note.G5": {
                    "retType": "Note.G5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "784"
                    },
                    "extendsTypes": [
                        "Note.G5",
                        "Number"
                    ]
                },
                "Note.GSharp5": {
                    "retType": "Note.GSharp5",
                    "attributes": {
                        "block": "G#5",
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "831",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "G#5",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Note.GSharp5",
                        "Number"
                    ],
                    "pyQName": "Note.GSHARP5"
                },
                "Note.A5": {
                    "retType": "Note.A5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "880"
                    },
                    "extendsTypes": [
                        "Note.A5",
                        "Number"
                    ]
                },
                "Note.Bb5": {
                    "retType": "Note.Bb5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "932"
                    },
                    "extendsTypes": [
                        "Note.Bb5",
                        "Number"
                    ],
                    "pyQName": "Note.BB5"
                },
                "Note.B5": {
                    "retType": "Note.B5",
                    "attributes": {
                        "blockIdentity": "music.noteFrequency",
                        "enumval": "988"
                    },
                    "extendsTypes": [
                        "Note.B5",
                        "Number"
                    ]
                },
                "BeatFraction": {
                    "kind": 6,
                    "retType": "BeatFraction",
                    "extendsTypes": [
                        "BeatFraction",
                        "Number"
                    ]
                },
                "BeatFraction.Whole": {
                    "retType": "BeatFraction.Whole",
                    "attributes": {
                        "block": "1",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BeatFraction.Whole",
                        "Number"
                    ],
                    "pyQName": "BeatFraction.WHOLE"
                },
                "BeatFraction.Half": {
                    "retType": "BeatFraction.Half",
                    "attributes": {
                        "block": "1/2",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1/2",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BeatFraction.Half",
                        "Number"
                    ],
                    "pyQName": "BeatFraction.HALF"
                },
                "BeatFraction.Quarter": {
                    "retType": "BeatFraction.Quarter",
                    "attributes": {
                        "block": "1/4",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1/4",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BeatFraction.Quarter",
                        "Number"
                    ],
                    "pyQName": "BeatFraction.QUARTER"
                },
                "BeatFraction.Eighth": {
                    "retType": "BeatFraction.Eighth",
                    "attributes": {
                        "block": "1/8",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1/8",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BeatFraction.Eighth",
                        "Number"
                    ],
                    "pyQName": "BeatFraction.EIGHTH"
                },
                "BeatFraction.Sixteenth": {
                    "retType": "BeatFraction.Sixteenth",
                    "attributes": {
                        "block": "1/16",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1/16",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BeatFraction.Sixteenth",
                        "Number"
                    ],
                    "pyQName": "BeatFraction.SIXTEENTH"
                },
                "BeatFraction.Double": {
                    "retType": "BeatFraction.Double",
                    "attributes": {
                        "block": "2",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "2",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BeatFraction.Double",
                        "Number"
                    ],
                    "pyQName": "BeatFraction.DOUBLE"
                },
                "BeatFraction.Breve": {
                    "retType": "BeatFraction.Breve",
                    "attributes": {
                        "block": "4",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "4",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "BeatFraction.Breve",
                        "Number"
                    ],
                    "pyQName": "BeatFraction.BREVE"
                },
                "MelodyOptions": {
                    "kind": 6,
                    "retType": "MelodyOptions",
                    "extendsTypes": [
                        "MelodyOptions",
                        "Number"
                    ]
                },
                "MelodyOptions.Once": {
                    "retType": "MelodyOptions.Once",
                    "attributes": {
                        "block": "once",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "once",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MelodyOptions.Once",
                        "Number"
                    ],
                    "pyQName": "MelodyOptions.ONCE"
                },
                "MelodyOptions.Forever": {
                    "retType": "MelodyOptions.Forever",
                    "attributes": {
                        "block": "forever",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "forever",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MelodyOptions.Forever",
                        "Number"
                    ],
                    "pyQName": "MelodyOptions.FOREVER"
                },
                "MelodyOptions.OnceInBackground": {
                    "retType": "MelodyOptions.OnceInBackground",
                    "attributes": {
                        "block": "once in background",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "once in background",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MelodyOptions.OnceInBackground",
                        "Number"
                    ],
                    "pyQName": "MelodyOptions.ONCE_IN_BACKGROUND"
                },
                "MelodyOptions.ForeverInBackground": {
                    "retType": "MelodyOptions.ForeverInBackground",
                    "attributes": {
                        "block": "forever in background",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "forever in background",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MelodyOptions.ForeverInBackground",
                        "Number"
                    ],
                    "pyQName": "MelodyOptions.FOREVER_IN_BACKGROUND"
                },
                "MelodyStopOptions": {
                    "kind": 6,
                    "retType": "MelodyStopOptions",
                    "extendsTypes": [
                        "MelodyStopOptions",
                        "Number"
                    ]
                },
                "MelodyStopOptions.All": {
                    "retType": "MelodyStopOptions",
                    "attributes": {
                        "block": "all",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "all",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MelodyStopOptions.All",
                        "Number"
                    ],
                    "pyQName": "MelodyStopOptions.ALL"
                },
                "MelodyStopOptions.Foreground": {
                    "retType": "MelodyStopOptions",
                    "attributes": {
                        "block": "foreground",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "foreground",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MelodyStopOptions.Foreground",
                        "Number"
                    ],
                    "pyQName": "MelodyStopOptions.FOREGROUND"
                },
                "MelodyStopOptions.Background": {
                    "retType": "MelodyStopOptions",
                    "attributes": {
                        "block": "background",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "background",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MelodyStopOptions.Background",
                        "Number"
                    ],
                    "pyQName": "MelodyStopOptions.BACKGROUND"
                },
                "MusicEvent": {
                    "kind": 6,
                    "retType": "MusicEvent",
                    "extendsTypes": [
                        "MusicEvent",
                        "Number"
                    ]
                },
                "MusicEvent.MelodyNotePlayed": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "melody note played",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "melody note played",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.MelodyNotePlayed",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.MELODY_NOTE_PLAYED"
                },
                "MusicEvent.MelodyStarted": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "melody started",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "melody started",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.MelodyStarted",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.MELODY_STARTED"
                },
                "MusicEvent.MelodyEnded": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "melody ended",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "melody ended",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.MelodyEnded",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.MELODY_ENDED"
                },
                "MusicEvent.MelodyRepeated": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "melody repeated",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "melody repeated",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.MelodyRepeated",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.MELODY_REPEATED"
                },
                "MusicEvent.BackgroundMelodyNotePlayed": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "background melody note played",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "background melody note played",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.BackgroundMelodyNotePlayed",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.BACKGROUND_MELODY_NOTE_PLAYED"
                },
                "MusicEvent.BackgroundMelodyStarted": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "background melody started",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "background melody started",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.BackgroundMelodyStarted",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.BACKGROUND_MELODY_STARTED"
                },
                "MusicEvent.BackgroundMelodyEnded": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "background melody ended",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "background melody ended",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.BackgroundMelodyEnded",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.BACKGROUND_MELODY_ENDED"
                },
                "MusicEvent.BackgroundMelodyRepeated": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "background melody repeated",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "background melody repeated",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.BackgroundMelodyRepeated",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.BACKGROUND_MELODY_REPEATED"
                },
                "MusicEvent.BackgroundMelodyPaused": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "background melody paused",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "background melody paused",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.BackgroundMelodyPaused",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.BACKGROUND_MELODY_PAUSED"
                },
                "MusicEvent.BackgroundMelodyResumed": {
                    "retType": "MusicEvent",
                    "attributes": {
                        "block": "background melody resumed",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "background melody resumed",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MusicEvent.BackgroundMelodyResumed",
                        "Number"
                    ],
                    "pyQName": "MusicEvent.BACKGROUND_MELODY_RESUMED"
                },
                "music": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#E63022",
                        "weight": 106,
                        "icon": "",
                        "groups": [
                            "Melody",
                            "Tone",
                            "Volume",
                            "Tempo",
                            "Melody Advanced"
                        ],
                        "jsDoc": "Generation of music tones."
                    }
                },
                "music.playTone": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "frequency": "Note.C"
                        },
                        "help": "music/play-tone",
                        "weight": 90,
                        "blockId": "device_play_note",
                        "block": "play|tone %note=device_note|for %duration=device_beat",
                        "blockGap": "8",
                        "parts": "headphone",
                        "useEnumVal": "1",
                        "group": "Tone",
                        "paramHelp": {
                            "frequency": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
                            "ms": "tone duration in milliseconds (ms)"
                        },
                        "jsDoc": "Plays a tone through pin ``P0`` for the given duration.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "play",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "tone ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "shadowBlockId": "device_note",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "for ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "duration",
                                    "shadowBlockId": "device_beat",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "shadowBlockId": "device_note",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "duration",
                                    "shadowBlockId": "device_beat",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "frequency",
                            "description": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
                            "default": "Note.C"
                        },
                        {
                            "name": "ms",
                            "description": "tone duration in milliseconds (ms)"
                        }
                    ],
                    "pyQName": "music.play_tone"
                },
                "music.ringTone": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "frequency": "Note.C"
                        },
                        "help": "music/ring-tone",
                        "weight": 80,
                        "blockId": "device_ring",
                        "block": "ring tone (Hz)|%note=device_note",
                        "blockGap": "8",
                        "parts": "headphone",
                        "useEnumVal": "1",
                        "group": "Tone",
                        "paramHelp": {
                            "frequency": "pitch of the tone to play in Hertz (Hz), eg: Note.C"
                        },
                        "jsDoc": "Plays a tone through pin ``P0``.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ring tone (Hz)",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "shadowBlockId": "device_note",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "shadowBlockId": "device_note",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "frequency",
                            "description": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
                            "default": "Note.C"
                        }
                    ],
                    "pyQName": "music.ring_tone"
                },
                "music.rest": {
                    "kind": -3,
                    "attributes": {
                        "help": "music/rest",
                        "weight": 79,
                        "blockId": "device_rest",
                        "block": "rest(ms)|%duration=device_beat",
                        "parts": "headphone",
                        "group": "Tone",
                        "paramHelp": {
                            "ms": "rest duration in milliseconds (ms)"
                        },
                        "jsDoc": "Rests (plays nothing) for a specified time through pin ``P0``.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "rest(ms)",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "duration",
                                    "shadowBlockId": "device_beat",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "duration",
                                    "shadowBlockId": "device_beat",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ms",
                            "description": "rest duration in milliseconds (ms)"
                        }
                    ]
                },
                "music.noteFrequency": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "name": "262"
                        },
                        "weight": 50,
                        "help": "music/note-frequency",
                        "blockId": "device_note",
                        "block": "%name",
                        "shim": "TD_ID",
                        "color": "#FFFFFF",
                        "colorSecondary": "#FFFFFF",
                        "paramFieldEditor": {
                            "name": "note"
                        },
                        "explicitDefaults": [
                            "name"
                        ],
                        "paramFieldEditorOptions": {
                            "name": {
                                "decompileLiterals": "true"
                            }
                        },
                        "useEnumVal": "1",
                        "group": "Tone",
                        "blockGap": "8",
                        "paramHelp": {
                            "name": "the note name"
                        },
                        "jsDoc": "Gets the frequency of a note.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "the note name",
                            "type": "Note",
                            "initializer": "262",
                            "default": "262",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "music.note_frequency"
                },
                "music.beat": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "music/beat",
                        "weight": 49,
                        "blockId": "device_beat",
                        "block": "%fraction|beat",
                        "group": "Tempo",
                        "blockGap": "8",
                        "jsDoc": "Returns the duration of a beat in milli-seconds",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "fraction",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "beat",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "fraction",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "fraction",
                            "type": "BeatFraction",
                            "initializer": "undefined",
                            "isEnum": true
                        }
                    ]
                },
                "music.tempo": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "music/tempo",
                        "weight": 40,
                        "blockId": "device_tempo",
                        "block": "tempo (bpm)",
                        "blockGap": "8",
                        "group": "Tempo",
                        "jsDoc": "Returns the tempo in beats per minute. Tempo is the speed (bpm = beats per minute) at which notes play. The larger the tempo value, the faster the notes will play.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "tempo (bpm)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "music.changeTempoBy": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "bpm": "20"
                        },
                        "help": "music/change-tempo-by",
                        "weight": 39,
                        "blockId": "device_change_tempo",
                        "block": "change tempo by (bpm)|%value",
                        "blockGap": "8",
                        "group": "Tempo",
                        "paramHelp": {
                            "bpm": "The change in beats per minute to the tempo, eg: 20"
                        },
                        "jsDoc": "Change the tempo by the specified amount",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "change tempo by (bpm)",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "bpm",
                            "description": "The change in beats per minute to the tempo, eg: 20",
                            "default": "20"
                        }
                    ],
                    "pyQName": "music.change_tempo_by"
                },
                "music.setTempo": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "bpm": "120"
                        },
                        "help": "music/set-tempo",
                        "weight": 38,
                        "blockId": "device_set_tempo",
                        "block": "set tempo to (bpm)|%value",
                        "paramMin": {
                            "bpm": "4"
                        },
                        "paramMax": {
                            "bpm": "400"
                        },
                        "group": "Tempo",
                        "paramHelp": {
                            "bpm": "The new tempo in beats per minute, eg: 120"
                        },
                        "jsDoc": "Sets the tempo to the specified amount",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set tempo to (bpm)",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "bpm",
                            "description": "The new tempo in beats per minute, eg: 120",
                            "default": "120",
                            "options": {
                                "min": {
                                    "value": "4"
                                },
                                "max": {
                                    "value": "400"
                                }
                            }
                        }
                    ],
                    "pyQName": "music.set_tempo"
                },
                "music.builtInMelody": {
                    "kind": -3,
                    "retType": "string[]",
                    "attributes": {
                        "paramDefl": {
                            "name": "Note.C"
                        },
                        "weight": 50,
                        "help": "music/builtin-melody",
                        "blockId": "device_builtin_melody",
                        "block": "%melody",
                        "blockHidden": true,
                        "group": "Melody Advanced",
                        "paramHelp": {
                            "name": "the note name, eg: Note.C"
                        },
                        "jsDoc": "Gets the melody array of a built-in melody.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "melody",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "melody",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "melody",
                            "type": "Melodies",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "music.built_in_melody"
                },
                "music.onEvent": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "melody_on_event",
                        "block": "music on %value",
                        "help": "music/on-event",
                        "weight": 59,
                        "blockGap": "32",
                        "group": "Melody Advanced",
                        "jsDoc": "Registers code to run on various melody events",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "music on ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "MusicEvent",
                            "isEnum": true
                        },
                        {
                            "name": "handler",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "music.on_event"
                },
                "music.beginMelody": {
                    "kind": -3,
                    "attributes": {
                        "hidden": "1",
                        "deprecated": "1",
                        "parts": "headphone",
                        "group": "Melody Advanced",
                        "jsDoc": "Use startMelody instead"
                    },
                    "parameters": [
                        {
                            "name": "melodyArray",
                            "type": "string[]"
                        },
                        {
                            "name": "options",
                            "type": "MelodyOptions",
                            "initializer": "1",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "music.begin_melody"
                },
                "music.startMelody": {
                    "kind": -3,
                    "attributes": {
                        "help": "music/begin-melody",
                        "weight": 60,
                        "blockGap": "16",
                        "blockId": "device_start_melody",
                        "block": "start melody %melody=device_builtin_melody| repeating %options",
                        "parts": "headphone",
                        "group": "Melody Advanced",
                        "paramHelp": {
                            "melodyArray": "the melody array to play",
                            "options": "melody options, once / forever, in the foreground / background"
                        },
                        "jsDoc": "Starts playing a melody.\nNotes are expressed as a string of characters with this format: NOTE[octave][:duration]",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "start melody ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "melody",
                                    "shadowBlockId": "device_builtin_melody",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " repeating ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "options",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "melody",
                                    "shadowBlockId": "device_builtin_melody",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "options",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "melodyArray",
                            "description": "the melody array to play",
                            "type": "string[]"
                        },
                        {
                            "name": "options",
                            "description": "melody options, once / forever, in the foreground / background",
                            "type": "MelodyOptions",
                            "initializer": "1",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "music.start_melody"
                },
                "music.playMelody": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "tempo": "120"
                        },
                        "block": "play melody $melody at tempo $tempo|(bpm)",
                        "blockId": "playMelody",
                        "weight": 85,
                        "blockGap": "8",
                        "help": "music/play-melody",
                        "_shadowOverrides": {
                            "melody": "melody_editor"
                        },
                        "paramMin": {
                            "tempo": "40"
                        },
                        "paramMax": {
                            "tempo": "500"
                        },
                        "explicitDefaults": [
                            "tempo"
                        ],
                        "parts": "headphone",
                        "group": "Melody",
                        "paramHelp": {
                            "melody": "- string of up to eight notes [C D E F G A B C5] or rests [-] separated by spaces, which will be played one at a time, ex: \"E D G F B A C5 B \"",
                            "tempo": "- number in beats per minute (bpm), dictating how long each note will play for"
                        },
                        "jsDoc": "Play a melody from the melody editor.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "play melody ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "melody",
                                    "shadowBlockId": "melody_editor",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " at tempo ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "tempo",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "(bpm)",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "melody",
                                    "shadowBlockId": "melody_editor",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "tempo",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "melody",
                            "description": "- string of up to eight notes [C D E F G A B C5] or rests [-] separated by spaces, which will be played one at a time, ex: \"E D G F B A C5 B \"",
                            "type": "string"
                        },
                        {
                            "name": "tempo",
                            "description": "- number in beats per minute (bpm), dictating how long each note will play for",
                            "initializer": "120",
                            "default": "120",
                            "options": {
                                "min": {
                                    "value": "40"
                                },
                                "max": {
                                    "value": "500"
                                }
                            }
                        }
                    ],
                    "pyQName": "music.play_melody"
                },
                "music.melodyEditor": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "block": "$melody",
                        "blockId": "melody_editor",
                        "blockHidden": true,
                        "weight": 85,
                        "blockGap": "8",
                        "duplicateShadowOnDrag": true,
                        "paramFieldEditor": {
                            "melody": "melody"
                        },
                        "paramFieldEditorOptions": {
                            "melody": {
                                "decompileLiterals": "true",
                                "decompileIndirectFixedInstances": "true",
                                "onParentBlock": "true"
                            }
                        },
                        "shim": "TD_ID",
                        "group": "Melody",
                        "paramHelp": {
                            "melody": ""
                        },
                        "jsDoc": "Create a melody with the melody editor.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "melody",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "melody",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "melody",
                            "type": "string"
                        }
                    ],
                    "pyQName": "music.melody_editor"
                },
                "music.stopMelody": {
                    "kind": -3,
                    "attributes": {
                        "help": "music/stop-melody",
                        "weight": 59,
                        "blockGap": "16",
                        "blockId": "device_stop_melody",
                        "block": "stop melody $options",
                        "parts": "headphone",
                        "group": "Melody Advanced",
                        "paramHelp": {
                            "options": "which melody to stop"
                        },
                        "jsDoc": "Stops the melodies",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "stop melody ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "options",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "options",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "options",
                            "description": "which melody to stop",
                            "type": "MelodyStopOptions",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "music.stop_melody"
                },
                "music.setPlayTone": {
                    "kind": -3,
                    "attributes": {
                        "help": "music/set-play-tone",
                        "advanced": true,
                        "group": "Tone",
                        "jsDoc": "Sets a custom playTone function for playing melodies"
                    },
                    "parameters": [
                        {
                            "name": "f",
                            "type": "(frequency: number, duration: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "frequency",
                                    "type": "number"
                                },
                                {
                                    "name": "duration",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "music.set_play_tone"
                },
                "music.setVolume": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "volume": "127"
                        },
                        "blockId": "synth_set_volume",
                        "block": "set volume %volume",
                        "parts": "speaker",
                        "paramMin": {
                            "volume": "0"
                        },
                        "paramMax": {
                            "volume": "255"
                        },
                        "explicitDefaults": [
                            "volume"
                        ],
                        "help": "music/set-volume",
                        "weight": 70,
                        "group": "Volume",
                        "paramHelp": {
                            "volume": "the volume 0...255"
                        },
                        "jsDoc": "Set the default output volume of the sound synthesizer.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set volume ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "volume",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "volume",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "volume",
                            "description": "the volume 0...255",
                            "initializer": "127",
                            "default": "127",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "music.set_volume"
                },
                "music.volume": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "parts": "speaker",
                        "weight": 70,
                        "jsDoc": "Gets the current volume"
                    },
                    "parameters": []
                },
                "Melodies": {
                    "kind": 6,
                    "retType": "Melodies",
                    "extendsTypes": [
                        "Melodies",
                        "Number"
                    ]
                },
                "Melodies.Dadadadum": {
                    "retType": "Melodies.Dadadadum",
                    "attributes": {
                        "block": "dadadum",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "dadadum",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Dadadadum",
                        "Number"
                    ],
                    "pyQName": "Melodies.DADADADUM"
                },
                "Melodies.Entertainer": {
                    "retType": "Melodies.Entertainer",
                    "attributes": {
                        "block": "entertainer",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "entertainer",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Entertainer",
                        "Number"
                    ],
                    "pyQName": "Melodies.ENTERTAINER"
                },
                "Melodies.Prelude": {
                    "retType": "Melodies.Prelude",
                    "attributes": {
                        "block": "prelude",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "prelude",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Prelude",
                        "Number"
                    ],
                    "pyQName": "Melodies.PRELUDE"
                },
                "Melodies.Ode": {
                    "retType": "Melodies.Ode",
                    "attributes": {
                        "block": "ode",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ode",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Ode",
                        "Number"
                    ],
                    "pyQName": "Melodies.ODE"
                },
                "Melodies.Nyan": {
                    "retType": "Melodies.Nyan",
                    "attributes": {
                        "block": "nyan",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "nyan",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Nyan",
                        "Number"
                    ],
                    "pyQName": "Melodies.NYAN"
                },
                "Melodies.Ringtone": {
                    "retType": "Melodies.Ringtone",
                    "attributes": {
                        "block": "ringtone",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ringtone",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Ringtone",
                        "Number"
                    ],
                    "pyQName": "Melodies.RINGTONE"
                },
                "Melodies.Funk": {
                    "retType": "Melodies.Funk",
                    "attributes": {
                        "block": "funk",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "funk",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Funk",
                        "Number"
                    ],
                    "pyQName": "Melodies.FUNK"
                },
                "Melodies.Blues": {
                    "retType": "Melodies.Blues",
                    "attributes": {
                        "block": "blues",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "blues",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Blues",
                        "Number"
                    ],
                    "pyQName": "Melodies.BLUES"
                },
                "Melodies.Birthday": {
                    "retType": "Melodies.Birthday",
                    "attributes": {
                        "block": "birthday",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "birthday",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Birthday",
                        "Number"
                    ],
                    "pyQName": "Melodies.BIRTHDAY"
                },
                "Melodies.Wedding": {
                    "retType": "Melodies.Wedding",
                    "attributes": {
                        "block": "wedding",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "wedding",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Wedding",
                        "Number"
                    ],
                    "pyQName": "Melodies.WEDDING"
                },
                "Melodies.Funeral": {
                    "retType": "Melodies.Funeral",
                    "attributes": {
                        "block": "funeral",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "funeral",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Funeral",
                        "Number"
                    ],
                    "pyQName": "Melodies.FUNERAL"
                },
                "Melodies.Punchline": {
                    "retType": "Melodies.Punchline",
                    "attributes": {
                        "block": "punchline",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "punchline",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Punchline",
                        "Number"
                    ],
                    "pyQName": "Melodies.PUNCHLINE"
                },
                "Melodies.Baddy": {
                    "retType": "Melodies.Baddy",
                    "attributes": {
                        "block": "baddy",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "baddy",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Baddy",
                        "Number"
                    ],
                    "pyQName": "Melodies.BADDY"
                },
                "Melodies.Chase": {
                    "retType": "Melodies.Chase",
                    "attributes": {
                        "block": "chase",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "chase",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Chase",
                        "Number"
                    ],
                    "pyQName": "Melodies.CHASE"
                },
                "Melodies.BaDing": {
                    "retType": "Melodies.BaDing",
                    "attributes": {
                        "block": "ba ding",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ba ding",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.BaDing",
                        "Number"
                    ],
                    "pyQName": "Melodies.BA_DING"
                },
                "Melodies.Wawawawaa": {
                    "retType": "Melodies.Wawawawaa",
                    "attributes": {
                        "block": "wawawawaa",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "wawawawaa",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.Wawawawaa",
                        "Number"
                    ],
                    "pyQName": "Melodies.WAWAWAWAA"
                },
                "Melodies.JumpUp": {
                    "retType": "Melodies.JumpUp",
                    "attributes": {
                        "block": "jump up",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "jump up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.JumpUp",
                        "Number"
                    ],
                    "pyQName": "Melodies.JUMP_UP"
                },
                "Melodies.JumpDown": {
                    "retType": "Melodies.JumpDown",
                    "attributes": {
                        "block": "jump down",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "jump down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.JumpDown",
                        "Number"
                    ],
                    "pyQName": "Melodies.JUMP_DOWN"
                },
                "Melodies.PowerUp": {
                    "retType": "Melodies.PowerUp",
                    "attributes": {
                        "block": "power up",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "power up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.PowerUp",
                        "Number"
                    ],
                    "pyQName": "Melodies.POWER_UP"
                },
                "Melodies.PowerDown": {
                    "retType": "Melodies.PowerDown",
                    "attributes": {
                        "block": "power down",
                        "blockIdentity": "music.builtInMelody",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "power down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Melodies.PowerDown",
                        "Number"
                    ],
                    "pyQName": "Melodies.POWER_DOWN"
                },
                "music.getMelody": {
                    "kind": -3,
                    "retType": "string[]",
                    "parameters": [
                        {
                            "name": "melody",
                            "type": "Melodies",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "music.get_melody"
                },
                "pins.map": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "fromHigh": "1023",
                            "toHigh": "4"
                        },
                        "help": "pins/map",
                        "weight": 23,
                        "blockId": "pin_map",
                        "block": "map %value|from low %fromLow|from high %fromHigh|to low %toLow|to high %toHigh",
                        "paramHelp": {
                            "value": "value to map in ranges",
                            "fromLow": "the lower bound of the value's current range",
                            "fromHigh": "the upper bound of the value's current range, eg: 1023",
                            "toLow": "the lower bound of the value's target range",
                            "toHigh": "the upper bound of the value's target range, eg: 4"
                        },
                        "jsDoc": "Map a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "map ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from low ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "fromLow",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from high ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "fromHigh",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to low ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "toLow",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "to high ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "toHigh",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "fromLow",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "fromHigh",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "toLow",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "toHigh",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "description": "value to map in ranges"
                        },
                        {
                            "name": "fromLow",
                            "description": "the lower bound of the value's current range"
                        },
                        {
                            "name": "fromHigh",
                            "description": "the upper bound of the value's current range, eg: 1023",
                            "default": "1023"
                        },
                        {
                            "name": "toLow",
                            "description": "the lower bound of the value's target range"
                        },
                        {
                            "name": "toHigh",
                            "description": "the upper bound of the value's target range, eg: 4",
                            "default": "4"
                        }
                    ]
                },
                "pins.i2cReadNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "pins/i2c-read-number",
                        "blockGap": "8",
                        "advanced": true,
                        "blockId": "pins_i2c_readnumber",
                        "block": "i2c read number|at address %address|of format %format|repeated %repeat",
                        "weight": 7,
                        "jsDoc": "Read one number from 7-bit I2C address.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "i2c read number",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "at address ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "address",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "of format ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "format",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "repeated ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "repeat",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "address",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "format",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "repeat",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "address"
                        },
                        {
                            "name": "format",
                            "type": "NumberFormat",
                            "isEnum": true
                        },
                        {
                            "name": "repeated",
                            "type": "boolean",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "pins.i2c_read_number"
                },
                "pins.i2cWriteNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "pins/i2c-write-number",
                        "blockGap": "8",
                        "advanced": true,
                        "blockId": "i2c_writenumber",
                        "block": "i2c write number|at address %address|with value %value|of format %format|repeated %repeat",
                        "weight": 6,
                        "jsDoc": "Write one number to a 7-bit I2C address.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "i2c write number",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "at address ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "address",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "of format ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "format",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "repeated ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "repeat",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "address",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "format",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "repeat",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "address"
                        },
                        {
                            "name": "value"
                        },
                        {
                            "name": "format",
                            "type": "NumberFormat",
                            "isEnum": true
                        },
                        {
                            "name": "repeated",
                            "type": "boolean",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "pins.i2c_write_number"
                },
                "Delimiters": {
                    "kind": 6,
                    "retType": "Delimiters",
                    "extendsTypes": [
                        "Delimiters",
                        "Number"
                    ]
                },
                "Delimiters.NewLine": {
                    "retType": "Delimiters.NewLine",
                    "attributes": {
                        "block": "new line (\n)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "new line (\n)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.NewLine",
                        "Number"
                    ],
                    "pyQName": "Delimiters.NEW_LINE"
                },
                "Delimiters.Comma": {
                    "retType": "Delimiters.Comma",
                    "attributes": {
                        "block": ",",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": ",",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.Comma",
                        "Number"
                    ],
                    "pyQName": "Delimiters.COMMA"
                },
                "Delimiters.Dollar": {
                    "retType": "Delimiters.Dollar",
                    "attributes": {
                        "block": "$",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.Dollar",
                        "Number"
                    ],
                    "pyQName": "Delimiters.DOLLAR"
                },
                "Delimiters.Colon": {
                    "retType": "Delimiters.Colon",
                    "attributes": {
                        "block": ":",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": ":",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.Colon",
                        "Number"
                    ],
                    "pyQName": "Delimiters.COLON"
                },
                "Delimiters.Fullstop": {
                    "retType": "Delimiters.Fullstop",
                    "attributes": {
                        "block": ".",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": ".",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.Fullstop",
                        "Number"
                    ],
                    "pyQName": "Delimiters.FULLSTOP"
                },
                "Delimiters.Hash": {
                    "retType": "Delimiters.Hash",
                    "attributes": {
                        "block": "#",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "#",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.Hash",
                        "Number"
                    ],
                    "pyQName": "Delimiters.HASH"
                },
                "Delimiters.CarriageReturn": {
                    "retType": "Delimiters.CarriageReturn",
                    "attributes": {
                        "block": "carriage return (\r)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "carriage return (\r)",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.CarriageReturn",
                        "Number"
                    ],
                    "pyQName": "Delimiters.CARRIAGE_RETURN"
                },
                "Delimiters.Pipe": {
                    "retType": "Delimiters.Pipe",
                    "attributes": {
                        "block": "|",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "break"
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.Pipe",
                        "Number"
                    ],
                    "pyQName": "Delimiters.PIPE"
                },
                "Delimiters.SemiColon": {
                    "retType": "Delimiters.SemiColon",
                    "attributes": {
                        "block": ";",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": ";",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Delimiters.SemiColon",
                        "Number"
                    ],
                    "pyQName": "Delimiters.SEMI_COLON"
                },
                "serial.NEW_LINE": {
                    "kind": 4,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "The string used to mark a new line, default is \\r\\n"
                    }
                },
                "serial.NEW_LINE_DELIMITER": {
                    "kind": 4,
                    "retType": "Delimiters"
                },
                "serial.writeLine": {
                    "kind": -3,
                    "attributes": {
                        "weight": 90,
                        "help": "serial/write-line",
                        "blockGap": "8",
                        "blockId": "serial_writeline",
                        "block": "serial|write line %text",
                        "paramShadowOptions": {
                            "text": {
                                "toString": "true"
                            }
                        },
                        "paramHelp": {
                            "value": "to send over serial"
                        },
                        "jsDoc": "Print a line of text to the serial port",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write line ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "text",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "text",
                            "type": "string",
                            "options": {
                                "fieldEditorOptions": {
                                    "value": {
                                        "toString": "true"
                                    }
                                }
                            }
                        }
                    ],
                    "pyQName": "serial.write_line"
                },
                "serial.setWriteLinePadding": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "length": "0"
                        },
                        "weight": 1,
                        "help": "serial/set-write-line-padding",
                        "blockId": "serialWriteNewLinePadding",
                        "block": "serial set write line padding to $length",
                        "advanced": true,
                        "paramMin": {
                            "length": "0"
                        },
                        "paramMax": {
                            "length": "128"
                        },
                        "paramHelp": {
                            "length": "the number of bytes alignment, eg: 0"
                        },
                        "jsDoc": "Sets the padding length for lines sent with \"write line\".",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial set write line padding to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "length",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "length",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "length",
                            "description": "the number of bytes alignment, eg: 0",
                            "default": "0",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "128"
                                }
                            }
                        }
                    ],
                    "pyQName": "serial.set_write_line_padding"
                },
                "serial.writeNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "serial/write-number",
                        "weight": 89,
                        "blockGap": "8",
                        "blockId": "serial_writenumber",
                        "block": "serial|write number %value",
                        "jsDoc": "Print a numeric value to the serial port",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "serial.write_number"
                },
                "serial.writeNumbers": {
                    "kind": -3,
                    "attributes": {
                        "help": "serial/write-numbers",
                        "weight": 86,
                        "blockId": "serial_writenumbers",
                        "block": "serial|write numbers %values",
                        "jsDoc": "Print an array of numeric values as CSV to the serial port",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write numbers ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "values",
                            "type": "number[]"
                        }
                    ],
                    "pyQName": "serial.write_numbers"
                },
                "serial.writeValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "x"
                        },
                        "weight": 88,
                        "blockGap": "8",
                        "help": "serial/write-value",
                        "blockId": "serial_writevalue",
                        "block": "serial|write value %name|= %value",
                        "paramHelp": {
                            "name": "name of the value stream, eg: x",
                            "value": "to write"
                        },
                        "jsDoc": "Write a name:value pair as a line to the serial port.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "= ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "name of the value stream, eg: x",
                            "type": "string",
                            "default": "x"
                        },
                        {
                            "name": "value",
                            "description": "to write"
                        }
                    ],
                    "pyQName": "serial.write_value"
                },
                "serial.readLine": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "serial/read-line",
                        "blockId": "serial_read_line",
                        "block": "serial|read line",
                        "weight": 20,
                        "blockGap": "8",
                        "jsDoc": "Read a line of text from the serial port.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "read line",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "serial.read_line"
                },
                "serial.delimiters": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "blockId": "serial_delimiter_conv",
                        "block": "%del",
                        "weight": 1,
                        "blockHidden": true,
                        "jsDoc": "Return the corresponding delimiter string",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "del",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "del",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "del",
                            "type": "Delimiters",
                            "isEnum": true
                        }
                    ]
                },
                "pins.sizeOf": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "deprecated": "1"
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "NumberFormat",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "pins.size_of"
                },
                "pins.createBufferFromArray": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "deprecated": "1"
                    },
                    "parameters": [
                        {
                            "name": "bytes",
                            "type": "number[]"
                        }
                    ],
                    "pyQName": "bytes"
                },
                "pins.packedSize": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "deprecated": "1"
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "string"
                        }
                    ],
                    "pyQName": "pins.packed_size"
                },
                "pins.packBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "deprecated": "1"
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "nums",
                            "type": "number[]"
                        }
                    ],
                    "pyQName": "pins.pack_buffer"
                },
                "pins.packIntoBuffer": {
                    "kind": -3,
                    "attributes": {
                        "deprecated": "1"
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "offset"
                        },
                        {
                            "name": "nums",
                            "type": "number[]"
                        }
                    ],
                    "pyQName": "pins.pack_into_buffer"
                },
                "pins.unpackBuffer": {
                    "kind": -3,
                    "retType": "number[]",
                    "attributes": {
                        "deprecated": "1"
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "offset",
                            "initializer": "0"
                        }
                    ],
                    "pyQName": "pins.unpack_buffer"
                },
                "pins.concatBuffers": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "deprecated": "1"
                    },
                    "parameters": [
                        {
                            "name": "bufs",
                            "type": "Buffer[]"
                        }
                    ],
                    "pyQName": "pins.concat_buffers"
                },
                "msgpack": {
                    "kind": 5,
                    "retType": ""
                },
                "msgpack.unpackNumberArray": {
                    "kind": -3,
                    "retType": "number[]",
                    "attributes": {
                        "jsDoc": "Unpacks a buffer into a number array."
                    },
                    "parameters": [
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "offset",
                            "initializer": "0"
                        }
                    ],
                    "pyQName": "msgpack.unpack_number_array"
                },
                "msgpack.packNumberArray": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "paramHelp": {
                            "nums": "the numbers to be packed"
                        },
                        "jsDoc": "Pack a number array into a buffer."
                    },
                    "parameters": [
                        {
                            "name": "nums",
                            "description": "the numbers to be packed",
                            "type": "number[]"
                        }
                    ],
                    "pyQName": "msgpack.pack_number_array"
                },
                "helpers.bufferConcat": {
                    "kind": -3,
                    "retType": "Buffer",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Buffer"
                        },
                        {
                            "name": "b",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "helpers.buffer_concat"
                },
                "helpers.bufferEquals": {
                    "kind": -3,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "l",
                            "type": "Buffer"
                        },
                        {
                            "name": "r",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "helpers.buffer_equals"
                },
                "helpers.bufferIndexOf": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Buffer"
                        },
                        {
                            "name": "b",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "helpers.buffer_index_of"
                },
                "helpers.bufferUnpack": {
                    "kind": -3,
                    "retType": "number[]",
                    "parameters": [
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "offset",
                            "initializer": "undefined"
                        }
                    ],
                    "pyQName": "helpers.buffer_unpack"
                },
                "helpers.bufferPackAt": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "offset"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "nums",
                            "type": "number[]"
                        }
                    ],
                    "pyQName": "helpers.buffer_pack_at"
                },
                "helpers.bufferChunked": {
                    "kind": -3,
                    "retType": "Buffer[]",
                    "parameters": [
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "maxBytes"
                        }
                    ],
                    "pyQName": "helpers.buffer_chunked"
                },
                "Buffer.concat": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "helper": "bufferConcat",
                        "jsDoc": "Return concatenation of current buffer and the given buffer\n\nConcatenates all buffers in the list"
                    },
                    "parameters": [
                        {
                            "name": "buffers",
                            "type": "Buffer[]"
                        }
                    ]
                },
                "Buffer.indexOf": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "helper": "bufferIndexOf",
                        "jsDoc": "Return position of other buffer in current buffer"
                    },
                    "parameters": [
                        {
                            "name": "other",
                            "type": "Buffer"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Buffer.index_of"
                },
                "Buffer.unpack": {
                    "kind": -1,
                    "retType": "number[]",
                    "attributes": {
                        "helper": "bufferUnpack",
                        "jsDoc": "Reads numbers from the buffer according to the format"
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "offset",
                            "initializer": "undefined"
                        }
                    ],
                    "isInstance": true
                },
                "Buffer.packAt": {
                    "kind": -1,
                    "attributes": {
                        "helper": "bufferPackAt",
                        "jsDoc": "Writes numbers to the buffer according to the format"
                    },
                    "parameters": [
                        {
                            "name": "offset"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "nums",
                            "type": "number[]"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Buffer.pack_at"
                },
                "Buffer.equals": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "helper": "bufferEquals",
                        "jsDoc": "Returns true if this and the other buffer hold the same data"
                    },
                    "parameters": [
                        {
                            "name": "other",
                            "type": "Buffer"
                        }
                    ],
                    "isInstance": true
                },
                "Buffer.chunked": {
                    "kind": -1,
                    "retType": "Buffer[]",
                    "attributes": {
                        "helper": "bufferChunked",
                        "jsDoc": "Splits buffer into parts no larger than specified"
                    },
                    "parameters": [
                        {
                            "name": "maxSize"
                        }
                    ],
                    "isInstance": true
                },
                "Buffer@type": {
                    "kind": 9,
                    "retType": "Buffer",
                    "attributes": {
                        "indexerGet": "BufferMethods::getByte",
                        "indexerSet": "BufferMethods::setByte"
                    },
                    "extendsTypes": [],
                    "pyQName": "Buffer"
                },
                "Buffer.create": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "paramHelp": {
                            "size": "number of bytes in the buffer"
                        },
                        "jsDoc": "Allocate a new buffer."
                    },
                    "parameters": [
                        {
                            "name": "size",
                            "description": "number of bytes in the buffer"
                        }
                    ]
                },
                "Buffer.fromHex": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "Create a new buffer, decoding a hex string"
                    },
                    "parameters": [
                        {
                            "name": "hex",
                            "type": "string"
                        }
                    ],
                    "pyQName": "Buffer.from_hex"
                },
                "Buffer.fromUTF8": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "paramHelp": {
                            "str": "the string to put in the buffer"
                        },
                        "jsDoc": "Create a new buffer with UTF8-encoded string"
                    },
                    "parameters": [
                        {
                            "name": "str",
                            "description": "the string to put in the buffer",
                            "type": "string"
                        }
                    ],
                    "pyQName": "Buffer.from_utf8"
                },
                "Buffer.chunkedFromUTF8": {
                    "kind": -3,
                    "retType": "Buffer[]",
                    "parameters": [
                        {
                            "name": "str",
                            "type": "string"
                        },
                        {
                            "name": "maxBytes"
                        }
                    ],
                    "pyQName": "Buffer.chunked_from_utf8"
                },
                "Buffer.fromArray": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "paramHelp": {
                            "bytes": "data to initialize with"
                        },
                        "jsDoc": "Create a new buffer initialized to bytes from given array."
                    },
                    "parameters": [
                        {
                            "name": "bytes",
                            "description": "data to initialize with",
                            "type": "number[]"
                        }
                    ],
                    "pyQName": "Buffer.from_array"
                },
                "Buffer.packedSize": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "format",
                            "type": "string"
                        }
                    ],
                    "pyQName": "Buffer.packed_size"
                },
                "Buffer.pack": {
                    "kind": -3,
                    "retType": "Buffer",
                    "parameters": [
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "nums",
                            "type": "number[]"
                        }
                    ]
                },
                "Buffer.__packUnpackCore": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "format",
                            "type": "string"
                        },
                        {
                            "name": "nums",
                            "type": "number[]"
                        },
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "isPack",
                            "type": "boolean"
                        },
                        {
                            "name": "off",
                            "initializer": "0"
                        }
                    ]
                },
                "Buffer.sizeOfNumberFormat": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Get the size in bytes of specified number format."
                    },
                    "parameters": [
                        {
                            "name": "format",
                            "type": "NumberFormat",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Buffer.size_of_number_format"
                },
                "Fx8": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "v"
                        }
                    ],
                    "pyQName": "fx8"
                },
                "Fx8._dummyFx8": {
                    "kind": 2,
                    "retType": "string",
                    "isInstance": true,
                    "pyQName": "fx8._dummy_fx8"
                },
                "Fx8@type": {
                    "kind": 9,
                    "retType": "Fx8",
                    "extendsTypes": [],
                    "pyQName": "Fx8"
                },
                "Fx": {
                    "kind": 5,
                    "retType": ""
                },
                "Fx.zeroFx8": {
                    "kind": 4,
                    "retType": "Fx8",
                    "pyQName": "Fx.zero_fx8"
                },
                "Fx.oneHalfFx8": {
                    "kind": 4,
                    "retType": "Fx8",
                    "pyQName": "Fx.one_half_fx8"
                },
                "Fx.oneFx8": {
                    "kind": 4,
                    "retType": "Fx8",
                    "pyQName": "Fx.one_fx8"
                },
                "Fx.twoFx8": {
                    "kind": 4,
                    "retType": "Fx8",
                    "pyQName": "Fx.two_fx8"
                },
                "Fx.neg": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.toIntShifted": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "n"
                        }
                    ],
                    "pyQName": "Fx.to_int_shifted"
                },
                "Fx.add": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.iadd": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a"
                        },
                        {
                            "name": "b",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.sub": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.mul": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.imul": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b"
                        }
                    ]
                },
                "Fx.div": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.idiv": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b"
                        }
                    ]
                },
                "Fx.compare": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.abs": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.min": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.max": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "b",
                            "type": "Fx8"
                        }
                    ]
                },
                "Fx.leftShift": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "n"
                        }
                    ],
                    "pyQName": "Fx.left_shift"
                },
                "Fx.rightShift": {
                    "kind": -3,
                    "retType": "Fx8",
                    "parameters": [
                        {
                            "name": "a",
                            "type": "Fx8"
                        },
                        {
                            "name": "n"
                        }
                    ],
                    "pyQName": "Fx.right_shift"
                },
                "Fx.toInt": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "v",
                            "type": "Fx8"
                        }
                    ],
                    "pyQName": "Fx.to_int"
                },
                "Fx.toFloat": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "v",
                            "type": "Fx8"
                        }
                    ],
                    "pyQName": "Fx.to_float"
                },
                "hex": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "shim": "@hex",
                        "jsDoc": "Tagged hex literal converter"
                    },
                    "parameters": [
                        {
                            "name": "lits",
                            "type": "any"
                        },
                        {
                            "name": "args",
                            "type": "any[]"
                        }
                    ]
                },
                "clickBoardID": {
                    "kind": 6,
                    "retType": "clickBoardID",
                    "extendsTypes": [
                        "clickBoardID",
                        "Number"
                    ]
                },
                "clickBoardID.one": {
                    "retType": "clickBoardID.one",
                    "attributes": {
                        "block": "1",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.one",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.ONE"
                },
                "clickBoardID.two": {
                    "retType": "clickBoardID.two",
                    "attributes": {
                        "block": "2",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "2",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.two",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWO"
                },
                "clickBoardID.three": {
                    "retType": "clickBoardID.three",
                    "attributes": {
                        "block": "3",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "3",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.three",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.THREE"
                },
                "clickBoardID.four": {
                    "retType": "clickBoardID.four",
                    "attributes": {
                        "block": "4",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "4",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.four",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.FOUR"
                },
                "clickBoardID.five": {
                    "retType": "clickBoardID.five",
                    "attributes": {
                        "block": "5",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "5",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.five",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.FIVE"
                },
                "clickBoardID.six": {
                    "retType": "clickBoardID.six",
                    "attributes": {
                        "block": "6",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "6",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.six",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.SIX"
                },
                "clickBoardID.seven": {
                    "retType": "clickBoardID.seven",
                    "attributes": {
                        "block": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "7",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.seven",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.SEVEN"
                },
                "clickBoardID.eight": {
                    "retType": "clickBoardID.eight",
                    "attributes": {
                        "block": "8",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "8",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.eight",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.EIGHT"
                },
                "clickBoardID.nine": {
                    "retType": "clickBoardID.nine",
                    "attributes": {
                        "block": "9",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "9",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.nine",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.NINE"
                },
                "clickBoardID.ten": {
                    "retType": "clickBoardID.ten",
                    "attributes": {
                        "block": "10",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "10",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.ten",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TEN"
                },
                "clickBoardID.eleven": {
                    "retType": "clickBoardID.eleven",
                    "attributes": {
                        "block": "11",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "11",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.eleven",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.ELEVEN"
                },
                "clickBoardID.twelve": {
                    "retType": "clickBoardID.twelve",
                    "attributes": {
                        "block": "12",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "12",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twelve",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWELVE"
                },
                "clickBoardID.thirteen": {
                    "retType": "clickBoardID.thirteen",
                    "attributes": {
                        "block": "13",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "13",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.thirteen",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.THIRTEEN"
                },
                "clickBoardID.fourteen": {
                    "retType": "clickBoardID.fourteen",
                    "attributes": {
                        "block": "14",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "14",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.fourteen",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.FOURTEEN"
                },
                "clickBoardID.fifteen": {
                    "retType": "clickBoardID.fifteen",
                    "attributes": {
                        "block": "15",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "15",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.fifteen",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.FIFTEEN"
                },
                "clickBoardID.sixteen": {
                    "retType": "clickBoardID.sixteen",
                    "attributes": {
                        "block": "16",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "16",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.sixteen",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.SIXTEEN"
                },
                "clickBoardID.seventeen": {
                    "retType": "clickBoardID.seventeen",
                    "attributes": {
                        "block": "17",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "17",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.seventeen",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.SEVENTEEN"
                },
                "clickBoardID.eighteen": {
                    "retType": "clickBoardID.eighteen",
                    "attributes": {
                        "block": "18",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "18",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.eighteen",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.EIGHTEEN"
                },
                "clickBoardID.nineteen": {
                    "retType": "clickBoardID.nineteen",
                    "attributes": {
                        "block": "19",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "19",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.nineteen",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.NINETEEN"
                },
                "clickBoardID.twenty": {
                    "retType": "clickBoardID.twenty",
                    "attributes": {
                        "block": "20",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "20",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twenty",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTY"
                },
                "clickBoardID.twentyone": {
                    "retType": "clickBoardID.twentyone",
                    "attributes": {
                        "block": "21",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "21",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentyone",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYONE"
                },
                "clickBoardID.twentytwo": {
                    "retType": "clickBoardID.twentytwo",
                    "attributes": {
                        "block": "22",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "22",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentytwo",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYTWO"
                },
                "clickBoardID.twentythree": {
                    "retType": "clickBoardID.twentythree",
                    "attributes": {
                        "block": "23",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "23",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentythree",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYTHREE"
                },
                "clickBoardID.twentyfour": {
                    "retType": "clickBoardID.twentyfour",
                    "attributes": {
                        "block": "24",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "24",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentyfour",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYFOUR"
                },
                "clickBoardID.twentyfive": {
                    "retType": "clickBoardID.twentyfive",
                    "attributes": {
                        "block": "25",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "25",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentyfive",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYFIVE"
                },
                "clickBoardID.twentysix": {
                    "retType": "clickBoardID.twentysix",
                    "attributes": {
                        "block": "26",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "26",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentysix",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYSIX"
                },
                "clickBoardID.twentyseven": {
                    "retType": "clickBoardID.twentyseven",
                    "attributes": {
                        "block": "27",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "27",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentyseven",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYSEVEN"
                },
                "clickBoardID.twentyeight": {
                    "retType": "clickBoardID.twentyeight",
                    "attributes": {
                        "block": "28",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "28",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentyeight",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYEIGHT"
                },
                "clickBoardID.twentynine": {
                    "retType": "clickBoardID.twentynine",
                    "attributes": {
                        "block": "29",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "29",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.twentynine",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.TWENTYNINE"
                },
                "clickBoardID.thirty": {
                    "retType": "clickBoardID.thirty",
                    "attributes": {
                        "block": "30",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "30",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.thirty",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.THIRTY"
                },
                "clickBoardID.thirtyone": {
                    "retType": "clickBoardID.thirtyone",
                    "attributes": {
                        "block": "31",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "31",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.thirtyone",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.THIRTYONE"
                },
                "clickBoardID.thirtytwo": {
                    "retType": "clickBoardID.thirtytwo",
                    "attributes": {
                        "block": "32",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "32",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "clickBoardID.thirtytwo",
                        "Number"
                    ],
                    "pyQName": "clickBoardID.THIRTYTWO"
                },
                "clickIOPin": {
                    "kind": 6,
                    "retType": "clickIOPin",
                    "extendsTypes": [
                        "clickIOPin",
                        "Number"
                    ]
                },
                "clickIOPin.AN": {
                    "retType": "clickIOPin.AN",
                    "extendsTypes": [
                        "clickIOPin.AN",
                        "Number"
                    ]
                },
                "clickIOPin.RST": {
                    "retType": "clickIOPin.RST",
                    "extendsTypes": [
                        "clickIOPin.RST",
                        "Number"
                    ]
                },
                "clickIOPin.CS": {
                    "retType": "clickIOPin.CS",
                    "extendsTypes": [
                        "clickIOPin.CS",
                        "Number"
                    ]
                },
                "clickIOPin.SCK": {
                    "retType": "clickIOPin.SCK",
                    "extendsTypes": [
                        "clickIOPin.SCK",
                        "Number"
                    ]
                },
                "clickIOPin.MISO": {
                    "retType": "clickIOPin.MISO",
                    "extendsTypes": [
                        "clickIOPin.MISO",
                        "Number"
                    ]
                },
                "clickIOPin.MOSI": {
                    "retType": "clickIOPin.MOSI",
                    "extendsTypes": [
                        "clickIOPin.MOSI",
                        "Number"
                    ]
                },
                "clickIOPin.SDA": {
                    "retType": "clickIOPin.SDA",
                    "extendsTypes": [
                        "clickIOPin.SDA",
                        "Number"
                    ]
                },
                "clickIOPin.SCL": {
                    "retType": "clickIOPin.SCL",
                    "extendsTypes": [
                        "clickIOPin.SCL",
                        "Number"
                    ]
                },
                "clickIOPin.TX": {
                    "retType": "clickIOPin.TX",
                    "extendsTypes": [
                        "clickIOPin.TX",
                        "Number"
                    ]
                },
                "clickIOPin.RX": {
                    "retType": "clickIOPin.RX",
                    "extendsTypes": [
                        "clickIOPin.RX",
                        "Number"
                    ]
                },
                "clickIOPin.INT": {
                    "retType": "clickIOPin.INT",
                    "extendsTypes": [
                        "clickIOPin.INT",
                        "Number"
                    ]
                },
                "clickIOPin.PWM": {
                    "retType": "clickIOPin.PWM",
                    "extendsTypes": [
                        "clickIOPin.PWM",
                        "Number"
                    ]
                },
                "IOPullDirection": {
                    "kind": 6,
                    "retType": "IOPullDirection",
                    "extendsTypes": [
                        "IOPullDirection",
                        "Number"
                    ]
                },
                "IOPullDirection.one": {
                    "retType": "IOPullDirection.one",
                    "attributes": {
                        "block": "Pull Up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Pull Up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IOPullDirection.one",
                        "Number"
                    ],
                    "pyQName": "IOPullDirection.ONE"
                },
                "IOPullDirection.two": {
                    "retType": "IOPullDirection.two",
                    "attributes": {
                        "block": "Pull Down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Pull Down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IOPullDirection.two",
                        "Number"
                    ],
                    "pyQName": "IOPullDirection.TWO"
                },
                "IOPullDirection.three": {
                    "retType": "IOPullDirection.three",
                    "attributes": {
                        "block": "None",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "None",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IOPullDirection.three",
                        "Number"
                    ],
                    "pyQName": "IOPullDirection.THREE"
                },
                "ODCEnable": {
                    "kind": 6,
                    "retType": "ODCEnable",
                    "extendsTypes": [
                        "ODCEnable",
                        "Number"
                    ]
                },
                "ODCEnable.zero": {
                    "retType": "ODCEnable.zero",
                    "attributes": {
                        "block": "Disable Open Drain",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Disable Open Drain",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ODCEnable.zero",
                        "Number"
                    ],
                    "pyQName": "ODCEnable.ZERO"
                },
                "ODCEnable.one": {
                    "retType": "ODCEnable.one",
                    "attributes": {
                        "block": "Enable Open Drain",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Enable Open Drain",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "ODCEnable.one",
                        "Number"
                    ],
                    "pyQName": "ODCEnable.ONE"
                },
                "clickADCPin": {
                    "kind": 6,
                    "retType": "clickADCPin",
                    "extendsTypes": [
                        "clickADCPin",
                        "Number"
                    ]
                },
                "clickADCPin.AN": {
                    "retType": "clickADCPin.AN",
                    "extendsTypes": [
                        "clickADCPin.AN",
                        "Number"
                    ]
                },
                "clickADCPin.RST": {
                    "retType": "clickADCPin.RST",
                    "extendsTypes": [
                        "clickADCPin.RST",
                        "Number"
                    ]
                },
                "clickADCPin.PWM": {
                    "retType": "clickADCPin.PWM",
                    "extendsTypes": [
                        "clickADCPin.PWM",
                        "Number"
                    ]
                },
                "SPIMode": {
                    "kind": 6,
                    "retType": "SPIMode",
                    "extendsTypes": [
                        "SPIMode",
                        "Number"
                    ]
                },
                "SPIMode.Mode0": {
                    "retType": "SPIMode.Mode0",
                    "extendsTypes": [
                        "SPIMode.Mode0",
                        "Number"
                    ],
                    "pyQName": "SPIMode.MODE0"
                },
                "SPIMode.Mode1": {
                    "retType": "SPIMode.Mode1",
                    "extendsTypes": [
                        "SPIMode.Mode1",
                        "Number"
                    ],
                    "pyQName": "SPIMode.MODE1"
                },
                "SPIMode.Mode2": {
                    "retType": "SPIMode.Mode2",
                    "extendsTypes": [
                        "SPIMode.Mode2",
                        "Number"
                    ],
                    "pyQName": "SPIMode.MODE2"
                },
                "SPIMode.Mode3": {
                    "retType": "SPIMode.Mode3",
                    "extendsTypes": [
                        "SPIMode.Mode3",
                        "Number"
                    ],
                    "pyQName": "SPIMode.MODE3"
                },
                "clickPWMPin": {
                    "kind": 6,
                    "retType": "clickPWMPin",
                    "extendsTypes": [
                        "clickPWMPin",
                        "Number"
                    ]
                },
                "clickPWMPin.AN": {
                    "retType": "clickPWMPin.AN",
                    "extendsTypes": [
                        "clickPWMPin.AN",
                        "Number"
                    ]
                },
                "clickPWMPin.RST": {
                    "retType": "clickPWMPin.RST",
                    "extendsTypes": [
                        "clickPWMPin.RST",
                        "Number"
                    ]
                },
                "clickPWMPin.PWM": {
                    "retType": "clickPWMPin.PWM",
                    "extendsTypes": [
                        "clickPWMPin.PWM",
                        "Number"
                    ]
                },
                "clickPWMPin.INT": {
                    "retType": "clickPWMPin.INT",
                    "extendsTypes": [
                        "clickPWMPin.INT",
                        "Number"
                    ]
                },
                "clickIODirection": {
                    "kind": 6,
                    "retType": "clickIODirection",
                    "extendsTypes": [
                        "clickIODirection",
                        "Number"
                    ]
                },
                "clickIODirection.input": {
                    "retType": "clickIODirection.input",
                    "extendsTypes": [
                        "clickIODirection.input",
                        "Number"
                    ],
                    "pyQName": "clickIODirection.INPUT"
                },
                "clickIODirection.output": {
                    "retType": "clickIODirection.output",
                    "extendsTypes": [
                        "clickIODirection.output",
                        "Number"
                    ],
                    "pyQName": "clickIODirection.OUTPUT"
                },
                "bBoard": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom clickBoard"
                    }
                },
                "bBoard.arrayClick": {
                    "kind": 4,
                    "retType": "clickBoardID[]",
                    "pyQName": "bBoard.array_click"
                },
                "bBoard.createIOSettings": {
                    "kind": -3,
                    "retType": "bBoard.IOSettings",
                    "attributes": {
                        "block": "create IO settings",
                        "blockSetVariable": "IOSettings",
                        "group": "IO",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create IO settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bBoard.create_io_settings"
                },
                "bBoard.createPWMSettings": {
                    "kind": -3,
                    "retType": "bBoard.PWMSettings",
                    "attributes": {
                        "block": "create PWM settings",
                        "blockSetVariable": "PWMSettings",
                        "group": "PWM",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create PWM settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bBoard.create_pwm_settings"
                },
                "bBoard.createUARTSettings": {
                    "kind": -3,
                    "retType": "bBoard.UARTSettings",
                    "attributes": {
                        "block": "create UART settings",
                        "blockSetVariable": "UARTSettings",
                        "group": "UART",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create UART settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bBoard.create_uart_settings"
                },
                "bBoard.createI2cSettings": {
                    "kind": -3,
                    "retType": "bBoard.I2CSettings",
                    "attributes": {
                        "block": "create I2C settings",
                        "blockSetVariable": "I2CSettings",
                        "group": "I2C",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create I2C settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bBoard.create_i2c_settings"
                },
                "bBoard.createSPISettings": {
                    "kind": -3,
                    "retType": "bBoard.SPIsetting",
                    "attributes": {
                        "block": "create SPI settings",
                        "blockSetVariable": "SPISettings",
                        "group": "SPI",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create SPI settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bBoard.create_spi_settings"
                },
                "bBoard.createPinSettings": {
                    "kind": -3,
                    "retType": "bBoard.PinSettings",
                    "attributes": {
                        "block": "create Pin settings",
                        "blockSetVariable": "PinSettings",
                        "group": "PINs",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Pin settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bBoard.create_pin_settings"
                },
                "bBoard.IOSettings": {
                    "kind": 8,
                    "retType": "bBoard.IOSettings",
                    "extendsTypes": [
                        "bBoard.IOSettings"
                    ]
                },
                "bBoard.IOSettings.GPIO_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.IOSettings.SET_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.IOSettings.CLR_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.IOSettings.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "bBoard.IOSettings.setIODirection": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "IOSettings"
                        },
                        "blockId": "set_IO_direction",
                        "block": "$this Set $clickPin to $direction on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "IO",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickIOPin",
                            "isEnum": true
                        },
                        {
                            "name": "direction",
                            "type": "clickIODirection",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.IOSettings.set_io_direction"
                },
                "bBoard.IOSettings.setOpenDrain": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "IOSettings"
                        },
                        "blockId": "Open_Drain_set",
                        "block": "for $this $ODC_Enable on $clickPin on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "IO",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "for ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ODC_Enable",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "ODC_Enable",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ODC_Enable",
                            "type": "ODCEnable",
                            "isEnum": true
                        },
                        {
                            "name": "clickPin",
                            "type": "clickIOPin",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.IOSettings.set_open_drain"
                },
                "bBoard.IOSettings.setPullDirection": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "IOSettings"
                        },
                        "blockId": "GPIO_pull_set",
                        "block": "$this Set $clickPin to $pullDirection on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "IO",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pullDirection",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "pullDirection",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickIOPin",
                            "isEnum": true
                        },
                        {
                            "name": "pullDirection",
                            "type": "IOPullDirection",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.IOSettings.set_pull_direction"
                },
                "bBoard.PWMSettings": {
                    "kind": 8,
                    "retType": "bBoard.PWMSettings",
                    "extendsTypes": [
                        "bBoard.PWMSettings"
                    ]
                },
                "bBoard.PWMSettings.pitchPin": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "bBoard.PWMSettings.pitch_pin"
                },
                "bBoard.PWMSettings.pitchClick": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "bBoard.PWMSettings.pitch_click"
                },
                "bBoard.PWMSettings.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "bBoard.PWMSettings.analogPitch": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "frequency"
                        },
                        {
                            "name": "ms"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.PWMSettings.analog_pitch"
                },
                "bBoard.PWMSettings.PWMScaled": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "PWM"
                        },
                        "blockId": "PWM_scaled",
                        "block": "Set $this PWM on pin $clickPin to $PWMValue on click$clickBoardNum with max = $PWMMax",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": true,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "PWM",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " PWM on pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMValue",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " with max = ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMMax",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMValue",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMMax",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickPWMPin",
                            "isEnum": true
                        },
                        {
                            "name": "PWMValue"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        },
                        {
                            "name": "PWMMax"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.PWMSettings.pwm_scaled"
                },
                "bBoard.PWMSettings.PWMOut": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "PWM"
                        },
                        "blockId": "PWM_out",
                        "block": "Set $this PWM on pin $clickPin to $PWMValue on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "paramMin": {
                            "PWMValue": "0"
                        },
                        "paramMax": {
                            "PWMValue": "100"
                        },
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "PWM",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " PWM on pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMValue",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMValue",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickPWMPin",
                            "isEnum": true
                        },
                        {
                            "name": "PWMValue",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.PWMSettings.pwm_out"
                },
                "bBoard.PWMSettings.PWMFrequency": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "PWM"
                        },
                        "blockId": "PWM_frequency",
                        "block": "Set $this PWM frequency on pin $clickPin to $PWMfreq on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "PWM",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " PWM frequency on pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMfreq",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMfreq",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickPWMPin",
                            "isEnum": true
                        },
                        {
                            "name": "PWMfreq"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.PWMSettings.pwm_frequency"
                },
                "bBoard.UARTSettings": {
                    "kind": 8,
                    "retType": "bBoard.UARTSettings",
                    "extendsTypes": []
                },
                "bBoard.UARTSettings.UART_BAUD_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.UARTSettings.UART_READ_RX_DATA_BYTES": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.UARTSettings.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "bBoard.UARTSettings.getUARTDataSize": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.UARTSettings.get_uart_data_size"
                },
                "bBoard.UARTSettings.clearUARTRxBuffer": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.UARTSettings.clear_uart_rx_buffer"
                },
                "bBoard.UARTSettings.isUARTDataAvailable": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "UARTS"
                        },
                        "blockId": "is_UART_Data_Avail",
                        "block": "Is $this UART data available on click$clickBoardNum ?",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "UART",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Is ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " UART data available on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ?",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.UARTSettings.is_uart_data_available"
                },
                "bBoard.UARTSettings.UARTFrequency": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "UARTS",
                            "frequency": "115200"
                        },
                        "weight": 4,
                        "advanced": true,
                        "blockId": "bBoard_UART_frequency",
                        "block": "Set $this the UART frequency %frequency on click$clickBoardNum",
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "UART",
                        "paramHelp": {
                            "frequency": "the clock frequency, eg: 115200"
                        },
                        "jsDoc": "Set the UART frequency",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " the UART frequency ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "frequency",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "frequency",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "frequency",
                            "description": "the clock frequency, eg: 115200",
                            "default": "115200"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.UARTSettings.uart_frequency"
                },
                "bBoard.UARTSettings.sendBuffer": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "UARTS"
                        },
                        "blockId": "send_UART_Buffer",
                        "block": "$this Send buffer $Buf to click $clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "UART",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Send buffer ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "Buf",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to click ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "Buf",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "Buf",
                            "type": "Buffer",
                            "initializer": "undefined"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "initializer": "undefined",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.UARTSettings.send_buffer"
                },
                "bBoard.UARTSettings.getUARTData": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "paramDefl": {
                            "this": "UARTS"
                        },
                        "blockId": "get_UART_Byte",
                        "block": "Get $this Byte from UART on click%clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "UART",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Byte from UART on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.UARTSettings.get_uart_data"
                },
                "bBoard.UARTSettings.sendString": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "UARTS"
                        },
                        "blockId": "send_UART_String",
                        "block": "$this Send string $UARTString to click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "UART",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Send string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "UARTString",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "UARTString",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "UARTString",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.UARTSettings.send_string"
                },
                "bBoard.PinSettings": {
                    "kind": 8,
                    "retType": "bBoard.PinSettings",
                    "extendsTypes": [
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "bBoard.PinSettings.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "bBoard.PinSettings.digitalReadPin": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "PinSettings"
                        },
                        "blockId": "digital_Read_Pin",
                        "block": "$this Digital read pin $clickIOPin on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "PINs",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Digital read pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickIOPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickIOPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickIOPin",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.PinSettings.digital_read_pin"
                },
                "bBoard.PinSettings.writePin": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "PinSettings"
                        },
                        "blockId": "write_pin",
                        "block": "$this Write $value to pin $clickIOPin on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "PINs",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickIOPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickIOPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "clickPin",
                            "type": "clickIOPin",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.PinSettings.write_pin"
                },
                "bBoard.PinSettings.setPin": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "PinSettings"
                        },
                        "blockId": "set_pin",
                        "block": "$this Set pin $clickPin on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "PINs",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Set pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickIOPin",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.PinSettings.set_pin"
                },
                "bBoard.PinSettings.clearPin": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "PinSettings"
                        },
                        "blockId": "clear_pin",
                        "block": "$this Clear pin $clickIOPin on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "PINs",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Clear pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickIOPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickIOPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickIOPin",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.PinSettings.clear_pin"
                },
                "bBoard.getFirmwareVersion": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "getFirmwareVersion",
                        "block": "Get firmware version of click%clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "group": "_____________",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get firmware version of click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "bBoard.get_firmware_version"
                },
                "bBoard.analogRead": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "Analog_Read",
                        "block": "Analog read pin %clickPin on click%clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "group": "_____________",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Analog read pin ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickADCPin",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "bBoard.analog_read"
                },
                "bBoard.SPIsetting": {
                    "kind": 8,
                    "retType": "bBoard.SPIsetting",
                    "extendsTypes": [
                        "bBoard.SPIsetting"
                    ]
                },
                "bBoard.SPIsetting.SPI_WRITE_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.SPIsetting.SPI_READ_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.SPIsetting.SPI_CONFIG_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.SPIsetting.SPI_WRITEBULK_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.SPIsetting.SPI_BAUD_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.SPIsetting.SPI_CONFIG_CS_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.SPIsetting.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "bBoard.SPIsetting.SPIWrite": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "SPISettings"
                        },
                        "blockId": "spi_Write",
                        "block": "$this Write $value to SPI on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": true,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "SPI",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to SPI on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.SPIsetting.spi_write"
                },
                "bBoard.SPIsetting.SPIWriteArray": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "SPISettings"
                        },
                        "blockId": "spi_Write_array",
                        "block": "$this Write array $arrayValues to SPI on click $clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "SPI",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write array ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "arrayValues",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to SPI on click ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "arrayValues",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "arrayValues",
                            "type": "number[]"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.SPIsetting.spi_write_array"
                },
                "bBoard.SPIsetting.spiFrequency": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "SPISettings",
                            "frequency": "1000000"
                        },
                        "help": "pins/spi-frequency",
                        "weight": 4,
                        "advanced": true,
                        "blockId": "bBoard_spi_frequency",
                        "block": "Set $this the SPI frequency $frequency on click$clickBoardNum",
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "SPI",
                        "paramHelp": {
                            "frequency": "the clock frequency, eg: 1000000"
                        },
                        "jsDoc": "Set the SPI frequency",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " the SPI frequency ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "frequency",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "frequency",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "frequency",
                            "description": "the clock frequency, eg: 1000000",
                            "default": "1000000"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.SPIsetting.spi_frequency"
                },
                "bBoard.SPIsetting.SPIWriteBuffer": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "SPISettings"
                        },
                        "blockId": "spi_Write_buffer",
                        "block": "$this Write buffer $bufferValues to SPI on click $clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "SPI",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write buffer ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "bufferValues",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to SPI on click ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "bufferValues",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "bufferValues",
                            "type": "Buffer"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.SPIsetting.spi_write_buffer"
                },
                "bBoard.SPIsetting.SPIModeSelect": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "SPISettings"
                        },
                        "blockId": "spi_Mode_Select",
                        "block": "Set $this SPI to $mode on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "SPI",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " SPI to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "mode",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "mode",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "mode",
                            "type": "SPIMode",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.SPIsetting.spi_mode_select"
                },
                "bBoard.SPIsetting.SPIread": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "SPISettings"
                        },
                        "blockId": "spi_Read",
                        "block": "$this Read $numBytes SPI bytes on click$clickBoardNum",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "SPI",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Read ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "numBytes",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " SPI bytes on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "numBytes",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "numBytes"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.SPIsetting.sp_iread"
                },
                "bBoard.SPIsetting.spiCS": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "SPISettings"
                        },
                        "weight": 4,
                        "advanced": true,
                        "blockId": "bBoard_spi_CS",
                        "block": "Set $this the SPI CS Pin to $clickPin on click$clickBoardNum",
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "SPI",
                        "jsDoc": "Set the SPI Chip Select Pin",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " the SPI CS Pin to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickPin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickPin",
                            "type": "clickIOPin",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.SPIsetting.spi_cs"
                },
                "bBoard.I2CSettings": {
                    "kind": 8,
                    "retType": "bBoard.I2CSettings",
                    "extendsTypes": [
                        "bBoard.I2CSettings"
                    ]
                },
                "bBoard.I2CSettings.I2C_WRITE_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.I2CSettings.I2C_READ_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.I2CSettings.I2C_WRITE_NO_MEM_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.I2CSettings.I2C_READ_NO_MEM_id": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "bBoard.I2CSettings.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "bBoard.I2CSettings.I2CreadNoMem": {
                    "kind": -1,
                    "retType": "Buffer",
                    "attributes": {
                        "paramDefl": {
                            "this": "I2CSettings"
                        },
                        "blockId": "i2c_ReadNoMem",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "I2C"
                    },
                    "parameters": [
                        {
                            "name": "address"
                        },
                        {
                            "name": "numBytes"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.I2CSettings.i2_cread_no_mem"
                },
                "bBoard.I2CSettings.I2Cread": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "I2CSettings"
                        },
                        "blockId": "i2c_Read",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "I2C"
                    },
                    "parameters": [
                        {
                            "name": "address"
                        },
                        {
                            "name": "memAddress"
                        },
                        {
                            "name": "numBytes"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.I2CSettings.i2_cread"
                },
                "bBoard.I2CSettings.i2cWriteNumber": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "I2CSettings"
                        },
                        "blockId": "i2c_write_number",
                        "block": "i2c $this write number|at address $address|with value $value|of format $format on click$clickBoardNum|repeated $repeated",
                        "weight": 90,
                        "blockGap": "7",
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "bBoard",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "group": "I2C",
                        "jsDoc": "Write one number to a 7-bit I2C address.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "i2c ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " write number",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "at address ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "address",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "of format ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "format",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "repeated ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "repeated",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "address",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "format",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "repeated",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "address"
                        },
                        {
                            "name": "value"
                        },
                        {
                            "name": "format",
                            "type": "NumberFormat",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        },
                        {
                            "name": "repeated",
                            "type": "boolean"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.I2CSettings.i2c_write_number"
                },
                "bBoard.I2CSettings.i2cWriteBuffer": {
                    "kind": -1,
                    "attributes": {
                        "help": "pins/i2c-write-number",
                        "blockGap": "8",
                        "blockNamespace": "bBoard",
                        "jsDoc": "Write a buffer to a 7-bit I2C address."
                    },
                    "parameters": [
                        {
                            "name": "address"
                        },
                        {
                            "name": "buf",
                            "type": "Buffer"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "bBoard.I2CSettings.i2c_write_buffer"
                },
                "WiFiSetResponses": {
                    "kind": 5,
                    "retType": ""
                },
                "WiFiSetResponses.SetResponse": {
                    "kind": 8,
                    "retType": "WiFiSetResponses.SetResponse",
                    "extendsTypes": []
                },
                "WiFiSetResponses.SetResponse.defaultWiFiTimeoutmS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "WiFiSetResponses.SetResponse.default_wi_fi_timeoutm_s"
                },
                "WiFiSetResponses.SetResponse.response": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "WiFiSetResponses.SetResponse.receivedData": {
                    "kind": 2,
                    "retType": "String",
                    "isInstance": true,
                    "pyQName": "WiFiSetResponses.SetResponse.received_data"
                },
                "WiFiSetResponses.SetResponse.MQTTMessageRetrieveState": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "WiFiSetResponses.SetResponse.mqtt_message_retrieve_state"
                },
                "WiFiSetResponses.SetResponse.MQTTMessage": {
                    "kind": 2,
                    "retType": "String",
                    "isInstance": true,
                    "pyQName": "WiFiSetResponses.SetResponse.mqtt_message"
                },
                "WiFiSetResponses.SetResponse.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "WiFiSetResponses.SetResponse.clearSerialBuffer": {
                    "kind": -1,
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "WiFiSetResponses.SetResponse.clear_serial_buffer"
                },
                "WiFiSetResponses.SetResponse.WiFiResponse": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "expectedResponse",
                            "type": "string"
                        },
                        {
                            "name": "IPDResponseTrue",
                            "type": "boolean"
                        },
                        {
                            "name": "timeoutmS"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "WiFiSetResponses.SetResponse.wi_fi_response"
                },
                "WiFiSetResponses.SetResponse.ThingSpeakResponse": {
                    "kind": -1,
                    "retType": "string",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "WiFiSetResponses.SetResponse.thing_speak_response"
                },
                "WiFi_BLE": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#FF2F92",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "WiFi_BLE.Command": {
                    "kind": 6,
                    "retType": "WiFi_BLE.Command",
                    "extendsTypes": [
                        "WiFi_BLE.Command",
                        "Number"
                    ]
                },
                "WiFi_BLE.Command.Set_Variable": {
                    "retType": "WiFi_BLE.Command.Set_Variable",
                    "attributes": {
                        "block": "Set Variable",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set Variable",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "WiFi_BLE.Command.Set_Variable",
                        "Number"
                    ],
                    "pyQName": "WiFi_BLE.Command.SET_VARIABLE"
                },
                "WiFi_BLE.Command.Create_Variable": {
                    "retType": "WiFi_BLE.Command.Create_Variable",
                    "attributes": {
                        "block": "Create Variable",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Create Variable",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "WiFi_BLE.Command.Create_Variable",
                        "Number"
                    ],
                    "pyQName": "WiFi_BLE.Command.CREATE_VARIABLE"
                },
                "WiFi_BLE.Command.Delete_Variable": {
                    "retType": "WiFi_BLE.Command.Delete_Variable",
                    "attributes": {
                        "block": "Delete Variable",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Delete Variable",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "WiFi_BLE.Command.Delete_Variable",
                        "Number"
                    ],
                    "pyQName": "WiFi_BLE.Command.DELETE_VARIABLE"
                },
                "WiFi_BLE.Command.Add_Data_Point": {
                    "retType": "WiFi_BLE.Command.Add_Data_Point",
                    "attributes": {
                        "block": "Add_Data_Point",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Add",
                                    "style": []
                                },
                                {
                                    "kind": "label",
                                    "text": "Data",
                                    "style": [
                                        "italics"
                                    ]
                                },
                                {
                                    "kind": "label",
                                    "text": "Point",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "WiFi_BLE.Command.Add_Data_Point",
                        "Number"
                    ],
                    "pyQName": "WiFi_BLE.Command.ADD_DATA_POINT"
                },
                "WiFi_BLE.Command.Delete_Data_Point": {
                    "retType": "WiFi_BLE.Command.Delete_Data_Point",
                    "attributes": {
                        "block": "Delete Data_Point",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Delete Data_Point",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "WiFi_BLE.Command.Delete_Data_Point",
                        "Number"
                    ],
                    "pyQName": "WiFi_BLE.Command.DELETE_DATA_POINT"
                },
                "WiFi_BLE.Command.Create_Data_Point": {
                    "retType": "WiFi_BLE.Command.Create_Data_Point",
                    "attributes": {
                        "block": "Create_Data_Point",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Create",
                                    "style": []
                                },
                                {
                                    "kind": "label",
                                    "text": "Data",
                                    "style": [
                                        "italics"
                                    ]
                                },
                                {
                                    "kind": "label",
                                    "text": "Point",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "WiFi_BLE.Command.Create_Data_Point",
                        "Number"
                    ],
                    "pyQName": "WiFi_BLE.Command.CREATE_DATA_POINT"
                },
                "WiFi_BLE.publishBLMQTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "publishBLMQTT",
                        "block": "BL MQTT publish command %command|variable name %varName|data %data|API key %topic|on click%clickBoardNum",
                        "group": "Brilliant Labs Cloud",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "BL MQTT publish command ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "command",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "variable name ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "data ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "API key ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "topic",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "command",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "topic",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "command",
                            "type": "WiFi_BLE.Command",
                            "isEnum": true
                        },
                        {
                            "name": "varName",
                            "type": "string"
                        },
                        {
                            "name": "data"
                        },
                        {
                            "name": "topic",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.publish_blmqtt"
                },
                "WiFi_BLE.connectBLMQTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "connectBLMQTT",
                        "block": "Connect to BL MQTT broker on click%clickBoardNum",
                        "group": "Brilliant Labs Cloud",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Connect to BL MQTT broker on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.connect_blmqtt"
                },
                "WiFi_BLE.subscribeBLMQTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "subscribeBLMQTT",
                        "block": "Subscribe to BL MQTT with API Key %topic on click%clickBoardNum",
                        "group": "Brilliant Labs Cloud",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Subscribe to BL MQTT with API Key ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "topic",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "topic",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "topic",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.subscribe_blmqtt"
                },
                "WiFi_BLE.getBLMQTTMessage": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "getBLMQTTMessage",
                        "block": "Get BL MQTT Message with variable name %varName on click%clickBoardNum",
                        "group": "Brilliant Labs Cloud",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get BL MQTT Message with variable name ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "varName",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.get_blmqtt_message"
                },
                "WiFi_BLE.isBLMQTTMessage": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "blockId": "isBLMQTTMessage",
                        "block": "Is MQTT Message Available for variable %varName on click%clickBoardNum ?",
                        "group": "Brilliant Labs Cloud",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Is MQTT Message Available for variable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " ?",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "varName",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.is_blmqtt_message"
                },
                "WiFi_BLE.pingBLMQTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "pingBLMQTT",
                        "group": "Brilliant Labs Cloud",
                        "weight": 70,
                        "blockGap": "7",
                        "paramMin": {
                            "pingInterval": "1"
                        },
                        "paramMax": {
                            "pingInterval": "59"
                        },
                        "advanced": false
                    },
                    "parameters": [
                        {
                            "name": "pingInterval",
                            "options": {
                                "min": {
                                    "value": "1"
                                },
                                "max": {
                                    "value": "59"
                                }
                            }
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.ping_blmqtt"
                },
                "WiFi_BLE.WifiConnect": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "WiFi_BLE_WiFiConnect",
                        "block": "Connect to ssid %ssid| with password %pwd on click%clickBoardNum",
                        "weight": 100,
                        "group": "Connect",
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Connect to ssid ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ssid",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " with password ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pwd",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ssid",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "pwd",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ssid",
                            "type": "string"
                        },
                        {
                            "name": "pwd",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.wifi_connect"
                },
                "WiFi_BLE.dualAuth": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "WiFi_BLE_dualAuth",
                        "block": "PNB-Internet Captive Portal username %username and password %password on click%clickBoardNum",
                        "weight": 90,
                        "group": "Connect",
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "PNB-Internet Captive Portal username ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "username",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " and password ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "password",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "username",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "password",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.dual_auth"
                },
                "WiFi_BLE.sendThingspeak": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "BLTest_set_thingspeak",
                        "block": "Send ThingSpeak key %key| fieldNum %fieldNum| data %data on click%clickBoardNum",
                        "weight": 90,
                        "group": "Thingspeak",
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Send ThingSpeak key ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "key",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " fieldNum ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "fieldNum",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " data ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "key",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "fieldNum",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "fieldNum"
                        },
                        {
                            "name": "data",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.send_thingspeak"
                },
                "WiFi_BLE.HTTPSsendCommand": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "WiFi_BLE_HTTPSsendCommand",
                        "block": "BL HTTPS command %command|variable name %varName|data %data|API key %topic|on click%clickBoardNum",
                        "weight": 90,
                        "group": "Brilliant Labs Cloud",
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "BL HTTPS command ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "command",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "variable name ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "data ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "API key ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "topic",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "command",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "topic",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "command",
                            "type": "WiFi_BLE.Command",
                            "isEnum": true
                        },
                        {
                            "name": "varName",
                            "type": "string"
                        },
                        {
                            "name": "data"
                        },
                        {
                            "name": "topic",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.http_ssend_command"
                },
                "WiFi_BLE.BLgetVariable": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "WiFi_BLE_getVariable",
                        "block": "BL HTTPS get variable %varName with API key %key on click%clickBoardNum",
                        "weight": 90,
                        "group": "Brilliant Labs Cloud",
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "BL HTTPS get variable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " with API key ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "key",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "varName",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "key",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "varName",
                            "type": "string"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.blget_variable"
                },
                "WiFi_BLE.getThingspeak": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "blockId": "BLTest_get_thingspeak",
                        "block": "Get ThingSpeak ChannelID %ChannelID| fieldNum %fieldNum on click%clickBoardNum",
                        "weight": 90,
                        "group": "Thingspeak",
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get ThingSpeak ChannelID ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ChannelID",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " fieldNum ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "fieldNum",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ChannelID",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "fieldNum",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ChannelID"
                        },
                        {
                            "name": "fieldNum"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.get_thingspeak"
                },
                "WiFi_BLE.sendIFTTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "BL_set_ifttt",
                        "block": "Send IFTTT key %key|event_name %event|value1 %value1 on click%clickBoardNum",
                        "group": "IFTTT",
                        "weight": 90,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Send IFTTT key ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "key",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "event_name ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "event",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "value1 ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value1",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "key",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "event",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value1",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "eventname",
                            "type": "string"
                        },
                        {
                            "name": "value1"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.send_ifttt"
                },
                "WiFi_BLE.publishAdafruitMQTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "publishAdafruitMQTT",
                        "block": "Publish to Adafruit MQTT topic %string| data %data on click%clickBoardNum",
                        "group": "MQTT Adafruit",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Publish to Adafruit MQTT topic ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "string",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " data ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "string",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "topic",
                            "type": "string"
                        },
                        {
                            "name": "data"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.publish_adafruit_mqtt"
                },
                "WiFi_BLE.connectMQTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "connectMQTT",
                        "block": "Connect to Adafruit MQTT broker with username %userName| and AIO Key %password on click%clickBoardNum",
                        "group": "MQTT Adafruit",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Connect to Adafruit MQTT broker with username ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "userName",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " and AIO Key ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "password",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "userName",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "password",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "userName",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.connect_mqtt"
                },
                "WiFi_BLE.subscribeAdafruitMQTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "subscribeAdafruitMQTT",
                        "block": "Subscribe to Adafruit MQTT topic %string on click%clickBoardNum",
                        "group": "MQTT Adafruit",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Subscribe to Adafruit MQTT topic ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "string",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "string",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "topic",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.subscribe_adafruit_mqtt"
                },
                "WiFi_BLE.getMQTTMessage": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "blockId": "getMQTTMessage",
                        "block": "Get MQTT Message on click%clickBoardNum",
                        "group": "MQTT Adafruit",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get MQTT Message on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.get_mqtt_message"
                },
                "WiFi_BLE.CreateVariable": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "createVariable",
                        "block": "Create Variable -> Api Key:%Key Name %Name on click%clickBoardNum",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Create Variable -> Api Key:",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "Key",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " Name ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "Name",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "Key",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "Name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "Key",
                            "type": "string"
                        },
                        {
                            "name": "Name",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.create_variable"
                },
                "WiFi_BLE.isMQTTMessage": {
                    "kind": -3,
                    "retType": "boolean",
                    "attributes": {
                        "blockId": "isMQTTMessage",
                        "block": "Is MQTT Message Available on click%clickBoardNum ?",
                        "group": "MQTT Adafruit",
                        "weight": 70,
                        "blockGap": "7",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Is MQTT Message Available on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " ?",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.is_mqtt_message"
                },
                "WiFi_BLE.pingAdafruitMQTT": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "pingAdafruitMQTT",
                        "group": "MQTT Adafruit",
                        "weight": 70,
                        "blockGap": "7",
                        "paramMin": {
                            "pingInterval": "1"
                        },
                        "paramMax": {
                            "pingInterval": "59"
                        },
                        "advanced": false
                    },
                    "parameters": [
                        {
                            "name": "pingInterval",
                            "options": {
                                "min": {
                                    "value": "1"
                                },
                                "max": {
                                    "value": "59"
                                }
                            }
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "WiFi_BLE.ping_adafruit_mqtt"
                },
                "Weather_I2C_ADDRESS": {
                    "kind": 6,
                    "retType": "Weather_I2C_ADDRESS",
                    "attributes": {
                        "color": "#1E90FF",
                        "weight": 116,
                        "icon": "",
                        "jsDoc": "//* Provides access to basic micro:bit functionality.\n//"
                    },
                    "extendsTypes": [
                        "Weather_I2C_ADDRESS",
                        "Number"
                    ]
                },
                "Weather_I2C_ADDRESS.ADDR_0x76": {
                    "retType": "Weather_I2C_ADDRESS.ADDR_0x76",
                    "attributes": {
                        "block": "0x76",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "0x76",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Weather_I2C_ADDRESS.ADDR_0x76",
                        "Number"
                    ],
                    "pyQName": "Weather_I2C_ADDRESS.ADDR_0X76"
                },
                "Weather_I2C_ADDRESS.ADDR_0x77": {
                    "retType": "Weather_I2C_ADDRESS.ADDR_0x77",
                    "attributes": {
                        "block": "0x77",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "0x77",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Weather_I2C_ADDRESS.ADDR_0x77",
                        "Number"
                    ],
                    "pyQName": "Weather_I2C_ADDRESS.ADDR_0X77"
                },
                "Weather_T": {
                    "kind": 6,
                    "retType": "Weather_T",
                    "extendsTypes": [
                        "Weather_T",
                        "Number"
                    ]
                },
                "Weather_T.T_C": {
                    "retType": "Weather_T.T_C",
                    "attributes": {
                        "block": "C",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "C",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Weather_T.T_C",
                        "Number"
                    ]
                },
                "Weather_T.T_F": {
                    "retType": "Weather_T.T_F",
                    "attributes": {
                        "block": "F",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "F",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Weather_T.T_F",
                        "Number"
                    ]
                },
                "Weather_P": {
                    "kind": 6,
                    "retType": "Weather_P",
                    "extendsTypes": [
                        "Weather_P",
                        "Number"
                    ]
                },
                "Weather_P.Pa": {
                    "retType": "Weather_P.Pa",
                    "attributes": {
                        "block": "Pa",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Pa",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Weather_P.Pa",
                        "Number"
                    ],
                    "pyQName": "Weather_P.PA"
                },
                "Weather_P.hPa": {
                    "retType": "Weather_P.hPa",
                    "attributes": {
                        "block": "hPa",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "hPa",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Weather_P.hPa",
                        "Number"
                    ],
                    "pyQName": "Weather_P.H_PA"
                },
                "below_above": {
                    "kind": 6,
                    "retType": "below_above",
                    "extendsTypes": [
                        "below_above",
                        "Number"
                    ]
                },
                "below_above.below": {
                    "retType": "below_above.below",
                    "attributes": {
                        "block": "<=",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "<=",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "below_above.below",
                        "Number"
                    ],
                    "pyQName": "below_above.BELOW"
                },
                "below_above.above": {
                    "retType": "below_above.above",
                    "attributes": {
                        "block": ">=",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": ">=",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "below_above.above",
                        "Number"
                    ],
                    "pyQName": "below_above.ABOVE"
                },
                "Weather": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#70c0f0",
                        "icon": "",
                        "block": "Weather",
                        "advanced": true,
                        "jsDoc": "Weather",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Weather",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    }
                },
                "Weather.createWeather": {
                    "kind": -3,
                    "retType": "Weather.Weather",
                    "attributes": {
                        "block": "create Weather object",
                        "blockSetVariable": "WEATHER",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Weather object",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "Weather.create_weather"
                },
                "Weather.Weather": {
                    "kind": 8,
                    "retType": "Weather.Weather",
                    "extendsTypes": []
                },
                "Weather.Weather.Weather_I2C_ADDR": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_T1": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_T2": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_T3": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P1": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P2": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P3": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P4": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P5": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P6": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P7": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P8": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_P9": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_H1": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_H2": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_H3": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.a": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_H4": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_H5": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.dig_H6": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.T": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.P": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.H": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Weather.Weather.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "Weather.Weather.setreg": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "reg"
                        },
                        {
                            "name": "dat"
                        }
                    ],
                    "isInstance": true
                },
                "Weather.Weather.getreg": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "reg"
                        }
                    ],
                    "isInstance": true
                },
                "Weather.Weather.getInt8LE": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "reg"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.get_int8_le"
                },
                "Weather.Weather.getUInt16LE": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "reg"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.get_uint16_le"
                },
                "Weather.Weather.getInt16LE": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "reg"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.get_int16_le"
                },
                "Weather.Weather.get": {
                    "kind": -1,
                    "parameters": [],
                    "isInstance": true
                },
                "Weather.Weather.humidity": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "WEATHER"
                        },
                        "blockId": "Weather_GET_HUMIDITY",
                        "block": "$this humidity",
                        "weight": 80,
                        "blockGap": "8",
                        "group": "HUMIDITY",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "get humidity",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " humidity",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Weather.Weather.HumidityBelowAbove": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "dat": "30",
                            "this": "WEATHER"
                        },
                        "blockId": "Humidity_Below_Above",
                        "block": "$this Humidity below or above $u $dat",
                        "explicitDefaults": [
                            "dat",
                            "this"
                        ],
                        "weight": 80,
                        "blockGap": "8",
                        "group": "HUMIDITY",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "jsDoc": "humidity below or above Event",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Humidity below or above ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "dat",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "dat",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "u",
                            "type": "below_above",
                            "isEnum": true
                        },
                        {
                            "name": "dat",
                            "initializer": "30",
                            "default": "30"
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.humidity_below_above"
                },
                "Weather.Weather.pressure": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "WEATHER"
                        },
                        "blockId": "Weather_GET_PRESSURE",
                        "block": "$this pressure $u",
                        "weight": 80,
                        "blockGap": "8",
                        "group": "PRESSURE",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "get pressure",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " pressure ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "u",
                            "type": "Weather_P",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Weather.Weather.PressureBelowAbove": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "dat": "100000",
                            "this": "WEATHER"
                        },
                        "blockId": "Pressure_Below_Above",
                        "block": "$this Pressure below or above $u $dat",
                        "explicitDefaults": [
                            "dat",
                            "this"
                        ],
                        "weight": 80,
                        "blockGap": "8",
                        "group": "PRESSURE",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "jsDoc": "Pressure below or above Event",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Pressure below or above ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "dat",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "dat",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "u",
                            "type": "below_above",
                            "isEnum": true
                        },
                        {
                            "name": "dat",
                            "initializer": "100000",
                            "default": "100000"
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.pressure_below_above"
                },
                "Weather.Weather.temperature": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "WEATHER"
                        },
                        "blockId": "Weather_GET_TEMPERATURE",
                        "block": "$this temperature $u",
                        "weight": 80,
                        "blockGap": "8",
                        "group": "TEMPERATURE",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "get temperature",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " temperature ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "u",
                            "type": "Weather_T",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Weather.Weather.TemperatureBelowAbove": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "dat": "20",
                            "this": "WEATHER"
                        },
                        "blockId": "Temperature_Below_Above",
                        "block": "$this Temperature below or above $u $dat",
                        "explicitDefaults": [
                            "dat",
                            "this"
                        ],
                        "weight": 80,
                        "blockGap": "8",
                        "group": "TEMPERATURE",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "jsDoc": "temperature below or above Event",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Temperature below or above ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "dat",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "u",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "dat",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "u",
                            "type": "below_above",
                            "isEnum": true
                        },
                        {
                            "name": "dat",
                            "initializer": "20",
                            "default": "20"
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.temperature_below_above"
                },
                "Weather.Weather.Address": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "WEATHER"
                        },
                        "blockId": "Weather_SET_ADDRESS",
                        "block": "$this set address $addr",
                        "weight": 20,
                        "blockGap": "8",
                        "group": "Added Features",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "set I2C address",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " set address ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "addr",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "addr",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "addr",
                            "type": "Weather_I2C_ADDRESS",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.address"
                },
                "Weather.Weather.PowerOn": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "WEATHER"
                        },
                        "blockId": "Weather_POWER_ON",
                        "block": "$this Power On",
                        "weight": 22,
                        "blockGap": "8",
                        "group": "POWER",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "power on",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Power On",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.power_on"
                },
                "Weather.Weather.PowerOff": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "WEATHER"
                        },
                        "blockId": "Weather_POWER_OFF",
                        "block": "$this Power Off",
                        "weight": 21,
                        "blockGap": "8",
                        "group": "POWER",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "power off",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Power Off",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.power_off"
                },
                "Weather.Weather.Dewpoint": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "WEATHER"
                        },
                        "block": "$this Dewpoint",
                        "weight": 60,
                        "blockGap": "8",
                        "group": "Added Features",
                        "blockNamespace": "Weather",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Calculate Dewpoint",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Dewpoint",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Weather.Weather.dewpoint"
                },
                "lineNumber": {
                    "kind": 6,
                    "retType": "lineNumber",
                    "extendsTypes": [
                        "lineNumber",
                        "Number"
                    ]
                },
                "lineNumber.one": {
                    "retType": "lineNumber.one",
                    "attributes": {
                        "block": "1",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "lineNumber.one",
                        "Number"
                    ],
                    "pyQName": "lineNumber.ONE"
                },
                "lineNumber.two": {
                    "retType": "lineNumber.two",
                    "attributes": {
                        "block": "2",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "2",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "lineNumber.two",
                        "Number"
                    ],
                    "pyQName": "lineNumber.TWO"
                },
                "LCDSettings": {
                    "kind": 6,
                    "retType": "LCDSettings",
                    "extendsTypes": [
                        "LCDSettings",
                        "Number"
                    ]
                },
                "LCDSettings.one": {
                    "retType": "LCDSettings.one",
                    "attributes": {
                        "block": "1",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "1",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LCDSettings.one",
                        "Number"
                    ],
                    "pyQName": "LCDSettings.ONE"
                },
                "LCDSettings.two": {
                    "retType": "LCDSettings.two",
                    "attributes": {
                        "block": "2",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "2",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LCDSettings.two",
                        "Number"
                    ],
                    "pyQName": "LCDSettings.TWO"
                },
                "LCDSettings.three": {
                    "retType": "LCDSettings.three",
                    "attributes": {
                        "block": "3",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "3",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LCDSettings.three",
                        "Number"
                    ],
                    "pyQName": "LCDSettings.THREE"
                },
                "LCDSettings.four": {
                    "retType": "LCDSettings.four",
                    "attributes": {
                        "block": "4",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "4",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LCDSettings.four",
                        "Number"
                    ],
                    "pyQName": "LCDSettings.FOUR"
                },
                "LCDSettings.five": {
                    "retType": "LCDSettings.five",
                    "attributes": {
                        "block": "5",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "5",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LCDSettings.five",
                        "Number"
                    ],
                    "pyQName": "LCDSettings.FIVE"
                },
                "LCD_Mini": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#D400D4",
                        "icon": "",
                        "advanced": true
                    }
                },
                "LCD_Mini.createLCDSettings": {
                    "kind": -3,
                    "retType": "LCD_Mini.LCDSettings",
                    "attributes": {
                        "block": "create lcd settings on clickboard number $clickBoardNum",
                        "blockSetVariable": "LCDSettings",
                        "blockId": "LCDSettings",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "LCDSettings": "the LCDSettings"
                        },
                        "jsDoc": "Sets LCD object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create lcd settings on clickboard number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "LCD_Mini.create_lcd_settings"
                },
                "LCD_Mini.LCDSettings": {
                    "kind": 8,
                    "retType": "LCD_Mini.LCDSettings",
                    "extendsTypes": []
                },
                "LCD_Mini.LCDSettings.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.LOWval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "LCD_Mini.LCDSettings.lo_wval"
                },
                "LCD_Mini.LCDSettings.LOWval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "LCD_Mini.LCDSettings.lo_wval@set"
                },
                "LCD_Mini.LCDSettings.HIGHval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "LCD_Mini.LCDSettings.hig_hval"
                },
                "LCD_Mini.LCDSettings.HIGHval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "LCD_Mini.LCDSettings.hig_hval@set"
                },
                "LCD_Mini.LCDSettings.LCDInitializeval": {
                    "kind": -2,
                    "retType": "boolean",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "LCD_Mini.LCDSettings.lcd_initializeval"
                },
                "LCD_Mini.LCDSettings.LCDInitializeval@set": {
                    "kind": -2,
                    "retType": "boolean",
                    "isInstance": true,
                    "pyQName": "LCD_Mini.LCDSettings.lcd_initializeval@set"
                },
                "LCD_Mini.LCDSettings.CSval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "LCD_Mini.LCDSettings.csval"
                },
                "LCD_Mini.LCDSettings.CSval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "LCD_Mini.LCDSettings.csval@set"
                },
                "LCD_Mini.LCDSettings.CS2val": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "LCD_Mini.LCDSettings.cs_2val"
                },
                "LCD_Mini.LCDSettings.CS2val@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "LCD_Mini.LCDSettings.cs_2val@set"
                },
                "LCD_Mini.LCDSettings.RSTval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "LCD_Mini.LCDSettings.rs_tval"
                },
                "LCD_Mini.LCDSettings.RSTval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "LCD_Mini.LCDSettings.rs_tval@set"
                },
                "LCD_Mini.LCDSettings.IODIRBval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "LCD_Mini.LCDSettings.iodir_bval"
                },
                "LCD_Mini.LCDSettings.IODIRBval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "LCD_Mini.LCDSettings.iodir_bval@set"
                },
                "LCD_Mini.LCDSettings.OLATBval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "LCD_Mini.LCDSettings.olat_bval"
                },
                "LCD_Mini.LCDSettings.OLATBval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "LCD_Mini.LCDSettings.olat_bval@set"
                },
                "LCD_Mini.LCDSettings.WRITE_BYTEval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "LCD_Mini.LCDSettings.WRITE_BYTEval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.__delay_us": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "delayuS"
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_sendNibble": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "nibble"
                        },
                        {
                            "name": "RSbit"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_sendByte": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "byte"
                        },
                        {
                            "name": "RSbit"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_returnHome": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_setAddr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "row"
                        },
                        {
                            "name": "character"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_writeChar": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "character",
                            "type": "string"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_setContrast": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "contrast"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_setup": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.expander_sendByte": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "addr"
                        },
                        {
                            "name": "byte"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.expander_setup": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.expander_setOutput": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "output"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.digipot_setWiper": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "val"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_writeString": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "LCDSettings"
                        },
                        "block": "$this Write 2 a $LCDstring to line $lineNum",
                        "blockId": "LCDWriteString",
                        "blockNamespace": "LCD_Mini",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "weight": 90,
                        "blockGap": "12",
                        "color": "#9E4894",
                        "icon": "",
                        "paramHelp": {
                            "LCDstring": "the string",
                            "lineNum": "the lineNum",
                            "clickBoardNum": "the clickBoardNum"
                        },
                        "jsDoc": "Writes string value.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write 2 a ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "LCDstring",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to line ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "lineNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "LCDstring",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "lineNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "LCDstring",
                            "description": "the string",
                            "type": "string"
                        },
                        {
                            "name": "lineNum",
                            "description": "the lineNum",
                            "type": "lineNumber",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "LCD_Mini.LCDSettings.lcd_clearDisplay": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "LCDSettings"
                        },
                        "blockId": "LCD_Clear",
                        "block": "Clear $this LCD on click $clickBoardNum",
                        "weight": 80,
                        "blockGap": "7",
                        "blockNamespace": "LCD_Mini",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Clear ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " LCD on click ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Force_Click": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#1E90FF",
                        "weight": 116,
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "//* Provides access to basic micro:bit functionality.\n//"
                    }
                },
                "Force_Click.createForceSettings": {
                    "kind": -3,
                    "retType": "Force_Click.Force",
                    "attributes": {
                        "block": "create force settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Force",
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Force": "the Force Object"
                        },
                        "jsDoc": "Sets Force Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create force settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Force_Click.create_force_settings"
                },
                "Force_Click.Force": {
                    "kind": 8,
                    "retType": "Force_Click.Force",
                    "extendsTypes": []
                },
                "Force_Click.Force.A": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Force_Click.Force.sumA": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "Force_Click.Force.sum_a"
                },
                "Force_Click.Force.Force_voltage": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Force_Click.Force.Force_val": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Force_Click.Force.rangefactor": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Force_Click.Force.Vadc_3": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true
                },
                "Force_Click.Force.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Force_Click.Force.forceclickstring": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "paramDefl": {
                            "this": "Force"
                        },
                        "help": "Force_Click/Force/forceclickstring",
                        "block": "Get string value at $this of force",
                        "blockId": "forceS",
                        "blockNamespace": "Force_Click",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "weight": 90,
                        "blockGap": "12",
                        "color": "#9E4894",
                        "icon": "",
                        "jsDoc": "Measures force and returns string value.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get string value at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " of force",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Force_Click.Force.forceclick": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Force"
                        },
                        "help": "Force_Click/Force/forceclickstring",
                        "block": "Get value at $this of force",
                        "blockId": "force",
                        "blockNamespace": "Force_Click",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "weight": 90,
                        "blockGap": "12",
                        "color": "#9E4894",
                        "icon": "",
                        "jsDoc": "Measures force and returns value.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get value at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " of force",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Proximity_2": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "↦",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Proximity_2.createProximity2Settings": {
                    "kind": -3,
                    "retType": "Proximity_2.Proximity2",
                    "attributes": {
                        "block": "create Proximity2 settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Proximity2",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Proximity2": "the Proximity2 Object"
                        },
                        "jsDoc": "Sets Proximity2 Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Proximity2 settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Proximity_2.create_proximity2_settings"
                },
                "Proximity_2.Proximity2": {
                    "kind": 8,
                    "retType": "Proximity_2.Proximity2",
                    "extendsTypes": []
                },
                "Proximity_2.Proximity2.INTERRUPT_STATUS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.MAIN_CONFIGURATION": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.RECEIVE_CONFIGURATION": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.TRANSMIT_CONFIGURATION": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.ADC_HIGH_ALS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.ADC_LOW_ALS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.ADC_BYTE_PROX": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.ALS_UPPER_THRESHOLD_HIGH": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.ALS_UPPER_THRESHOLD_LOW": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.ALS_LOWER_THRESHOLD_HIGH": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.ALS_LOWER_THRESHOLD_LOW": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.THRESHOLD_PERSIST_TIMER": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.PROX_THRESHOLD_INDICATOR": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.PROX_THRESHOLD": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.DIGITAL_GAIN_TRIM_GREEN": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.DIGITAL_GAIN_TRIM_INFRARED": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.ADDRESS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Proximity_2.Proximity2.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Proximity_2.Proximity2.is_initialized"
                },
                "Proximity_2.Proximity2.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Proximity2_Read_Proximity": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "ProximitySettings"
                        },
                        "blockId": "Proximity2_ReadProximity",
                        "block": "Get $this proximity reading",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "Proximity_2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " proximity reading",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Proximity2_Read_Als": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "ProximitySettings"
                        },
                        "blockId": "Proximity2_ReadALS",
                        "block": "Get $this ambient light reading",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Proximity_2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ambient light reading",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Read_Proximity2_Register": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "reg"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Write_Proximity2_Register": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "reg"
                        },
                        {
                            "name": "byte"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Proximity2_Read_Interrupt": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Proximity2_Set_Threshold": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "thresh"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Proximity2_Initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Proximity2_Set_Als_Upper_Threshold": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "thresh"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Proximity_2.Proximity2.Proximity2_Set_Als_Lower_Threshold": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "thresh"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Servo": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#EF697B",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Servo.createLCDSettings": {
                    "kind": -3,
                    "retType": "Servo.Servo",
                    "attributes": {
                        "block": "create Servo settings",
                        "blockSetVariable": "Servo",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Servo": "the Servo Object"
                        },
                        "jsDoc": "Sets Servo Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Servo settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Servo.create_lcd_settings"
                },
                "Servo.Servo": {
                    "kind": 8,
                    "retType": "Servo.Servo",
                    "extendsTypes": []
                },
                "Servo.Servo.PCA9685_DEFAULT_I2C_ADDRESS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.LTC2497_DEFAULT_I2C_ADDRESS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.PCA9685_SUBADR1": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.PCA9685_SUBADR2": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.PCA9685_SUBADR3": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.PCA9685_MODE1": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.PCA9685_MODE2": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.PCA9685_PRESCALE": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.LED0_ON_L": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.LED0_ON_H": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.LED0_OFF_L": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.LED0_OFF_H": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.ALLLED_ON_L": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.ALLLED_ON_H": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.ALLLED_OFF_L": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.ALLLED_OFF_H": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "Servo.Servo.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Servo.Servo.is_initialized"
                },
                "Servo.Servo.deviceAddress": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Servo.Servo.device_address"
                },
                "Servo.Servo.servoPulseMin": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Servo.Servo.servo_pulse_min"
                },
                "Servo.Servo.servoPulseMax": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Servo.Servo.servo_pulse_max"
                },
                "Servo.Servo.servoAngleMin": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Servo.Servo.servo_angle_min"
                },
                "Servo.Servo.servoAngleMax": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Servo.Servo.servo_angle_max"
                },
                "Servo.Servo.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Servo.Servo.setServoPulse": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "servoNumber"
                        },
                        {
                            "name": "pulse"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_servo_pulse"
                },
                "Servo.Servo.getServoAngleMin": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.get_servo_angle_min"
                },
                "Servo.Servo.getServoAngleMax": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.get_servo_angle_max"
                },
                "Servo.Servo.getServoPulseMin": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.get_servo_pulse_min"
                },
                "Servo.Servo.getServoPulseMax": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.get_servo_pulse_max"
                },
                "Servo.Servo.reset": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Servo.Servo.sleep": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Servo.Servo.wakeup": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Servo.Servo.setExtClk": {
                    "kind": -1,
                    "attributes": {
                        "jsDoc": "**********************************************************************************************************************************************"
                    },
                    "parameters": [
                        {
                            "name": "prescale"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_ext_clk"
                },
                "Servo.Servo.setPWMFreq": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "freq"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_pwm_freq"
                },
                "Servo.Servo.setOutputMode": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "totempole",
                            "type": "boolean"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_output_mode"
                },
                "Servo.Servo.setPWM": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "servoNumber"
                        },
                        {
                            "name": "on"
                        },
                        {
                            "name": "off"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_pwm"
                },
                "Servo.Servo.setPin": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "servoNumber"
                        },
                        {
                            "name": "val"
                        },
                        {
                            "name": "invert",
                            "type": "boolean"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_pin"
                },
                "Servo.Servo.setPCA9685Addr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_pca9685_addr"
                },
                "Servo.Servo.getPCA9685Addr": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.get_pca9685_addr"
                },
                "Servo.Servo.initialize": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Servo"
                        },
                        "blockId": "Servo_initialize",
                        "block": "Initalize $this PCA9685 to i2c address $PCA9685Addr and LTC2497 to i2c address $LTC2497Addr",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "blockNamespace": "Servo",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "advanced": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Initalize ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " PCA9685 to i2c address ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "PCA9685Addr",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " and LTC2497 to i2c address ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "LTC2497Addr",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "PCA9685Addr",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "LTC2497Addr",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "PCA9685Addr"
                        },
                        {
                            "name": "LTC2497Addr"
                        }
                    ],
                    "isInstance": true
                },
                "Servo.Servo.setServoAngle": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Servo"
                        },
                        "blockId": "Servo_Angle",
                        "block": "Set $this servo $n to $angle",
                        "blockGap": "7",
                        "weight": 90,
                        "color": "#9E4894",
                        "icon": "",
                        "advanced": false,
                        "blockNamespace": "Servo",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " servo ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "n",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "angle",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "n",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "angle",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "servoNumber"
                        },
                        {
                            "name": "angle"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_servo_angle"
                },
                "Servo.Servo.setServoAngleAdjusted": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "servoNumber": "1",
                            "this": "Servo"
                        },
                        "blockId": "Servo_AngleAdjusted",
                        "block": "Set $this servo $n to $angle with pulse range min $pulseMin and max $pulseMax",
                        "blockGap": "7",
                        "advanced": true,
                        "paramMin": {
                            "servoNumber": "1"
                        },
                        "paramMax": {
                            "servoNumber": "16"
                        },
                        "explicitDefaults": [
                            "servoNumber",
                            "this"
                        ],
                        "blockNamespace": "Servo",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " servo ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "n",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "angle",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " with pulse range min ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pulseMin",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " and max ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "pulseMax",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "n",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "angle",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "pulseMin",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "pulseMax",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "servoNumber",
                            "initializer": "1",
                            "default": "1",
                            "options": {
                                "min": {
                                    "value": "1"
                                },
                                "max": {
                                    "value": "16"
                                }
                            }
                        },
                        {
                            "name": "angle"
                        },
                        {
                            "name": "pulseMin"
                        },
                        {
                            "name": "pulseMax"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.set_servo_angle_adjusted"
                },
                "Servo.Servo.userSetPWM": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "servoNumber": "1",
                            "this": "Servo"
                        },
                        "blockId": "Servo_setPWM",
                        "block": "Set $this servo $num to be on $on and off $off",
                        "blockGap": "7",
                        "advanced": true,
                        "paramMin": {
                            "servoNumber": "1"
                        },
                        "paramMax": {
                            "servoNumber": "16"
                        },
                        "explicitDefaults": [
                            "servoNumber",
                            "this"
                        ],
                        "blockNamespace": "Servo",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " servo ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "num",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to be on ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "on",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " and off ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "off",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "num",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "on",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "off",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "servoNumber",
                            "initializer": "1",
                            "default": "1",
                            "options": {
                                "min": {
                                    "value": "1"
                                },
                                "max": {
                                    "value": "16"
                                }
                            }
                        },
                        {
                            "name": "on"
                        },
                        {
                            "name": "off"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.user_set_pwm"
                },
                "Servo.Servo.writePCA9685Array": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Servo"
                        },
                        "blockId": "PCA9685_write",
                        "block": "$this Write array $values to PCA9685 register$register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Servo",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write array ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to PCA9685 register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "values",
                            "type": "number[]"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.write_pca9685_array"
                },
                "Servo.Servo.readPCA9685": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Servo"
                        },
                        "blockId": "PCA9685_read",
                        "block": "$this Read from register$register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Servo",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Read from register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Servo.Servo.read_pca9685"
                },
                "AirQuality2": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "",
                        "advanced": false,
                        "jsDoc": "Custom blocks"
                    }
                },
                "AirQuality2.createAirQuality": {
                    "kind": -3,
                    "retType": "AirQuality2.AirQuality",
                    "attributes": {
                        "block": "create AirQuality settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "AirQuality",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "AirQuality": "the LCDSettings"
                        },
                        "jsDoc": "Sets LCD object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create AirQuality settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "AirQuality2.create_air_quality"
                },
                "AirQuality2.humidity": {
                    "kind": 6,
                    "retType": "AirQuality2.humidity",
                    "extendsTypes": [
                        "AirQuality2.humidity",
                        "Number"
                    ]
                },
                "AirQuality2.humidity.five": {
                    "retType": "AirQuality2.humidity.five",
                    "attributes": {
                        "block": "5",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "5",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.five",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.FIVE"
                },
                "AirQuality2.humidity.ten": {
                    "retType": "AirQuality2.humidity.ten",
                    "attributes": {
                        "block": "10",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "10",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.ten",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.TEN"
                },
                "AirQuality2.humidity.fifteen": {
                    "retType": "AirQuality2.humidity.fifteen",
                    "attributes": {
                        "block": "15",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "15",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.fifteen",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.FIFTEEN"
                },
                "AirQuality2.humidity.twenty": {
                    "retType": "AirQuality2.humidity.twenty",
                    "attributes": {
                        "block": "20",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "20",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.twenty",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.TWENTY"
                },
                "AirQuality2.humidity.twentyfive": {
                    "retType": "AirQuality2.humidity.twentyfive",
                    "attributes": {
                        "block": "25",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "25",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.twentyfive",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.TWENTYFIVE"
                },
                "AirQuality2.humidity.thirty": {
                    "retType": "AirQuality2.humidity.thirty",
                    "attributes": {
                        "block": "30",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "30",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.thirty",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.THIRTY"
                },
                "AirQuality2.humidity.thirtyfive": {
                    "retType": "AirQuality2.humidity.thirtyfive",
                    "attributes": {
                        "block": "35",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "35",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.thirtyfive",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.THIRTYFIVE"
                },
                "AirQuality2.humidity.fourty": {
                    "retType": "AirQuality2.humidity.fourty",
                    "attributes": {
                        "block": "40",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "40",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.fourty",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.FOURTY"
                },
                "AirQuality2.humidity.fourtyfive": {
                    "retType": "AirQuality2.humidity.fourtyfive",
                    "attributes": {
                        "block": "45",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "45",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.fourtyfive",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.FOURTYFIVE"
                },
                "AirQuality2.humidity.fifty": {
                    "retType": "AirQuality2.humidity.fifty",
                    "attributes": {
                        "block": "50",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "50",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.fifty",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.FIFTY"
                },
                "AirQuality2.humidity.fiftyfive": {
                    "retType": "AirQuality2.humidity.fiftyfive",
                    "attributes": {
                        "block": "55",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "55",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.fiftyfive",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.FIFTYFIVE"
                },
                "AirQuality2.humidity.sixety": {
                    "retType": "AirQuality2.humidity.sixety",
                    "attributes": {
                        "block": "60",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "60",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.sixety",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.SIXETY"
                },
                "AirQuality2.humidity.sixtyfive": {
                    "retType": "AirQuality2.humidity.sixtyfive",
                    "attributes": {
                        "block": "65",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "65",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.sixtyfive",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.SIXTYFIVE"
                },
                "AirQuality2.humidity.seventy": {
                    "retType": "AirQuality2.humidity.seventy",
                    "attributes": {
                        "block": "70",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "70",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.seventy",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.SEVENTY"
                },
                "AirQuality2.humidity.seventyfive": {
                    "retType": "AirQuality2.humidity.seventyfive",
                    "attributes": {
                        "block": "75",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "75",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.seventyfive",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.SEVENTYFIVE"
                },
                "AirQuality2.humidity.eighty": {
                    "retType": "AirQuality2.humidity.eighty",
                    "attributes": {
                        "block": "80",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "80",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.eighty",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.EIGHTY"
                },
                "AirQuality2.humidity.eightyfive": {
                    "retType": "AirQuality2.humidity.eightyfive",
                    "attributes": {
                        "block": "85",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "85",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.eightyfive",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.EIGHTYFIVE"
                },
                "AirQuality2.humidity.ninety": {
                    "retType": "AirQuality2.humidity.ninety",
                    "attributes": {
                        "block": "90",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "90",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.ninety",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.NINETY"
                },
                "AirQuality2.humidity.ninetyfive": {
                    "retType": "AirQuality2.humidity.ninetyfive",
                    "attributes": {
                        "block": "95",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "95",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.ninetyfive",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.NINETYFIVE"
                },
                "AirQuality2.humidity.hundred": {
                    "retType": "AirQuality2.humidity.hundred",
                    "attributes": {
                        "block": "100",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "100",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "AirQuality2.humidity.hundred",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.humidity.HUNDRED"
                },
                "AirQuality2.airQualityValue": {
                    "kind": 6,
                    "retType": "AirQuality2.airQualityValue",
                    "extendsTypes": [
                        "AirQuality2.airQualityValue",
                        "Number"
                    ]
                },
                "AirQuality2.airQualityValue.eCO2": {
                    "retType": "AirQuality2.airQualityValue.eCO2",
                    "extendsTypes": [
                        "AirQuality2.airQualityValue.eCO2",
                        "Number"
                    ],
                    "pyQName": "AirQuality2.airQualityValue.E_CO2"
                },
                "AirQuality2.airQualityValue.TVOC": {
                    "retType": "AirQuality2.airQualityValue.TVOC",
                    "extendsTypes": [
                        "AirQuality2.airQualityValue.TVOC",
                        "Number"
                    ]
                },
                "AirQuality2.AirQuality": {
                    "kind": 8,
                    "retType": "AirQuality2.AirQuality",
                    "extendsTypes": []
                },
                "AirQuality2.AirQuality.STATUS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.MEAS_MODE": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.ALG_RESULT_DATA": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.RAW_DATA": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.ENV_DATA": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.THRESHOLDS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.BASELINE": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.HW_ID": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.HW": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.FW_Boot_Version": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.FW_App_Version": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.Internal_State": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.ERROR_ID": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.APP_ERASE": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.APP_DATA": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.APP_VERIFY": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.APP_START": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.SW_RESET": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.CCS811_DEVICE_ADDRESS": {
                    "kind": 2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "AirQuality2.AirQuality.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.is_initialized"
                },
                "AirQuality2.AirQuality.deviceAddress": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.device_address"
                },
                "AirQuality2.AirQuality.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "AirQuality2.AirQuality.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "AirQuality2.AirQuality.dataReady": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "AirQuality"
                        },
                        "blockNamespace": "AirQuality2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "blockId": "CCS811DataReady",
                        "block": "Is $this data ready",
                        "blockGap": "7",
                        "advanced": false,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Is ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " data ready",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.data_ready"
                },
                "AirQuality2.AirQuality.ccs811Init": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.ccs811_init"
                },
                "AirQuality2.AirQuality.CCS811AppStart": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.ccs811_app_start"
                },
                "AirQuality2.AirQuality.ccs811Shutdown": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.ccs811_shutdown"
                },
                "AirQuality2.AirQuality.ccs811Status": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.ccs811_status"
                },
                "AirQuality2.AirQuality.ccs811Reset": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.ccs811_reset"
                },
                "AirQuality2.AirQuality.ccs811SetCalibration": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "AirQuality"
                        },
                        "blockId": "CCS811Calibration",
                        "block": "Calibrate $this sensor to temperature $fTemp F and humidity $fHumid",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "AirQuality2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Calibrate ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " sensor to temperature ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "fTemp",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " F and humidity ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "fHumid",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "fTemp",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "fHumid",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "fTemp"
                        },
                        {
                            "name": "fHumid",
                            "type": "AirQuality2.humidity",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.ccs811_set_calibration"
                },
                "AirQuality2.AirQuality.ccs811AirQuality": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "AirQuality"
                        },
                        "blockId": "CCS811AirQuality",
                        "block": "Read $this $valueToRetrieve value",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "AirQuality2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Read ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "valueToRetrieve",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " value",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "valueToRetrieve",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "valueToRetrieve",
                            "type": "AirQuality2.airQualityValue",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.ccs811_air_quality"
                },
                "AirQuality2.AirQuality.writeCCS811": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "AirQuality"
                        },
                        "blockId": "CCS811_write",
                        "block": "Write $this array $values to CCS811 register$register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "AirQuality2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Write ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " array ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to CCS811 register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "values",
                            "type": "number[]"
                        },
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.write_ccs811"
                },
                "AirQuality2.AirQuality.readCCS811": {
                    "kind": -1,
                    "retType": "number[]",
                    "attributes": {
                        "paramDefl": {
                            "this": "AirQuality"
                        },
                        "blockId": "CCS811_read",
                        "block": "$this Read $numBytes bytes from register$register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "AirQuality2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Read ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "numBytes",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " bytes from register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "numBytes",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "numBytes"
                        },
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.read_ccs811"
                },
                "AirQuality2.AirQuality.setCCS811Addr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.set_ccs811_addr"
                },
                "AirQuality2.AirQuality.getCCS811Addr": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "AirQuality2.AirQuality.get_ccs811_addr"
                },
                "DC_Motor3": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#EF697B",
                        "icon": "",
                        "advanced": true
                    }
                },
                "DC_Motor3.createDC_MOTOR": {
                    "kind": -3,
                    "retType": "DC_Motor3.DC_MOTOR",
                    "attributes": {
                        "block": "create DC_MOTOR settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "DC_MOTOR",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create DC_MOTOR settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "DC_Motor3.MotorDirection": {
                    "kind": 6,
                    "retType": "DC_Motor3.MotorDirection",
                    "extendsTypes": [
                        "DC_Motor3.MotorDirection",
                        "Number"
                    ]
                },
                "DC_Motor3.MotorDirection.Forward": {
                    "retType": "DC_Motor3.MotorDirection.Forward",
                    "attributes": {
                        "block": "Forward",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Forward",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "DC_Motor3.MotorDirection.Forward",
                        "Number"
                    ],
                    "pyQName": "DC_Motor3.MotorDirection.FORWARD"
                },
                "DC_Motor3.MotorDirection.Reverse": {
                    "retType": "DC_Motor3.MotorDirection.Reverse",
                    "attributes": {
                        "block": "Reverse",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Reverse",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "DC_Motor3.MotorDirection.Reverse",
                        "Number"
                    ],
                    "pyQName": "DC_Motor3.MotorDirection.REVERSE"
                },
                "DC_Motor3.DC_MOTOR": {
                    "kind": 8,
                    "retType": "DC_Motor3.DC_MOTOR",
                    "extendsTypes": [
                        "DC_Motor3.DC_MOTOR",
                        "bBoard.PWMSettings"
                    ]
                },
                "DC_Motor3.DC_MOTOR.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.is_initialized"
                },
                "DC_Motor3.DC_MOTOR.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "DC_Motor3.DC_MOTOR.IN1val": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.in_1val"
                },
                "DC_Motor3.DC_MOTOR.IN1val@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.in_1val@set"
                },
                "DC_Motor3.DC_MOTOR.IN2val": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.in_2val"
                },
                "DC_Motor3.DC_MOTOR.IN2val@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.in_2val@set"
                },
                "DC_Motor3.DC_MOTOR.SLPval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.sl_pval"
                },
                "DC_Motor3.DC_MOTOR.SLPval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.sl_pval@set"
                },
                "DC_Motor3.DC_MOTOR.PWMval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.pw_mval"
                },
                "DC_Motor3.DC_MOTOR.PWMval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.pw_mval@set"
                },
                "DC_Motor3.DC_MOTOR.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "DC_Motor3.DC_MOTOR.motorSpeed": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "Speed"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.motor_speed"
                },
                "DC_Motor3.DC_MOTOR.motorSpeedDirection": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "DC_MOTOR"
                        },
                        "blockId": "Motor_speedDirection",
                        "block": "Set $this speed to %speed with direction%direction",
                        "paramMin": {
                            "Speed": "0",
                            "speed": "0"
                        },
                        "paramMax": {
                            "Speed": "100",
                            "speed": "100"
                        },
                        "advanced": false,
                        "blockNamespace": "DC_Motor3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " speed to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " with direction",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "speed",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        },
                        {
                            "name": "direction",
                            "type": "DC_Motor3.MotorDirection",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.motor_speed_direction"
                },
                "DC_Motor3.DC_MOTOR.motorRotation": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "direction",
                            "type": "DC_Motor3.MotorDirection",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "DC_Motor3.DC_MOTOR.motor_rotation"
                },
                "IR_Distance": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "↔",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "IR_Distance.createIR_Distance": {
                    "kind": -3,
                    "retType": "IR_Distance.IR_Distance1",
                    "attributes": {
                        "block": "create IR_Distance settings",
                        "blockSetVariable": "IR_Distance",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create IR_Distance settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "IR_Distance.IR_Distance1": {
                    "kind": 8,
                    "retType": "IR_Distance.IR_Distance1",
                    "extendsTypes": [
                        "IR_Distance.IR_Distance1",
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "IR_Distance.IR_Distance1.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "IR_Distance.IR_Distance1.is_initialized"
                },
                "IR_Distance.IR_Distance1.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "IR_Distance.IR_Distance1.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "IR_Distance.IR_Distance1.getDistance": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "IR_Distance"
                        },
                        "blockId": "IRDistance_getDistance",
                        "block": "$this Get distance on click$clickBoardNum",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "IR_Distance",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get distance on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IR_Distance.IR_Distance1.get_distance"
                },
                "IR_Distance.IR_Distance1.enable": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "IR_Distance"
                        },
                        "blockId": "IRDistance_enable",
                        "block": "$this Enable device on click$clickBoardNum",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "IR_Distance",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Enable device on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "IR_Distance.IR_Distance1.disable": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "IR_Distance"
                        },
                        "blockId": "IRDistance_disable",
                        "block": "$this Disable device on click$clickBoardNum",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "IR_Distance",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Disable device on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "IR_Sense_3": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "∿",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "IR_Sense_3.createIR_Sense": {
                    "kind": -3,
                    "retType": "IR_Sense_3.IR_Sense",
                    "attributes": {
                        "block": "create IR_Sense settings",
                        "blockSetVariable": "IR_Sense",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create IR_Sense settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "IR_Sense_3.IR_Sense": {
                    "kind": 8,
                    "retType": "IR_Sense_3.IR_Sense",
                    "extendsTypes": [
                        "IR_Sense_3.IR_Sense",
                        "bBoard.I2CSettings"
                    ]
                },
                "IR_Sense_3.IR_Sense.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "IR_Sense_3.IR_Sense.is_initialized"
                },
                "IR_Sense_3.IR_Sense.deviceAddress": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "IR_Sense_3.IR_Sense.device_address"
                },
                "IR_Sense_3.IR_Sense.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "IR_Sense_3.IR_Sense.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "IR_Sense_3.IR_Sense.writeAK9754": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "IR_Sense"
                        },
                        "blockId": "AK9754_write",
                        "block": "$this Write array $values to AK9754 register$register on click$clickBoardNum ?",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "IR_Sense_3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write array ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to AK9754 register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ?",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "values",
                            "type": "number[]"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IR_Sense_3.IR_Sense.write_ak9754"
                },
                "IR_Sense_3.IR_Sense.isHumanDetected": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "IR_Sense"
                        },
                        "blockId": "IR_Sense_3_isHumandDetected",
                        "block": "$this Has a human been detected on click$clickBoardNum ?",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "IR_Sense_3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Has a human been detected on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ?",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IR_Sense_3.IR_Sense.is_human_detected"
                },
                "IR_Sense_3.IR_Sense.readAK9754": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "IR_Sense"
                        },
                        "blockId": "AK9754_read",
                        "block": "$this Read from register$register on click$clickBoardNum ?",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "IR_Sense_3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Read from register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ?",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "register"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IR_Sense_3.IR_Sense.read_ak9754"
                },
                "IR_Sense_3.IR_Sense.setAK9754Addr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IR_Sense_3.IR_Sense.set_ak9754_addr"
                },
                "IR_Sense_3.IR_Sense.getAK9754Addr": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IR_Sense_3.IR_Sense.get_ak9754_addr"
                },
                "IrThermo_3": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "IrThermo_3.createIrThermo": {
                    "kind": -3,
                    "retType": "IrThermo_3.IrThermo",
                    "attributes": {
                        "block": "create IrThermo settings",
                        "blockSetVariable": "IrThermo",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create IrThermo settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "IrThermo_3.create_ir_thermo"
                },
                "IrThermo_3.IrThermo": {
                    "kind": 8,
                    "retType": "IrThermo_3.IrThermo",
                    "extendsTypes": [
                        "IrThermo_3.IrThermo",
                        "bBoard.I2CSettings"
                    ]
                },
                "IrThermo_3.IrThermo.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "IrThermo_3.IrThermo.P_Rval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "IrThermo_3.IrThermo.P_Gval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "IrThermo_3.IrThermo.P_Tval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "IrThermo_3.IrThermo.P_Oval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "IrThermo_3.IrThermo.Eaval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.eaval"
                },
                "IrThermo_3.IrThermo.Ebval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.ebval"
                },
                "IrThermo_3.IrThermo.Faval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.faval"
                },
                "IrThermo_3.IrThermo.Fbval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.fbval"
                },
                "IrThermo_3.IrThermo.Gaval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.gaval"
                },
                "IrThermo_3.IrThermo.Gbval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.gbval"
                },
                "IrThermo_3.IrThermo.Kaval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.kaval"
                },
                "IrThermo_3.IrThermo.Haval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.haval"
                },
                "IrThermo_3.IrThermo.Hbval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.hbval"
                },
                "IrThermo_3.IrThermo.TOdutval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.todutval"
                },
                "IrThermo_3.IrThermo.TO0val": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.to_0val"
                },
                "IrThermo_3.IrThermo.TA0val": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.ta_0val"
                },
                "IrThermo_3.IrThermo.sensorTempval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "IrThermo_3.IrThermo.sensor_tempval"
                },
                "IrThermo_3.IrThermo.MLX90632_DEFAULT_ADDRESSval": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "IrThermo_3.IrThermo.P_Rval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "IrThermo_3.IrThermo.P_Gval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "IrThermo_3.IrThermo.P_Tval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "IrThermo_3.IrThermo.P_Oval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "IrThermo_3.IrThermo.Eaval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.eaval@set"
                },
                "IrThermo_3.IrThermo.Ebval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.ebval@set"
                },
                "IrThermo_3.IrThermo.Faval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.faval@set"
                },
                "IrThermo_3.IrThermo.Fbval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.fbval@set"
                },
                "IrThermo_3.IrThermo.Gaval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.gaval@set"
                },
                "IrThermo_3.IrThermo.Gbval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.gbval@set"
                },
                "IrThermo_3.IrThermo.Kaval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.kaval@set"
                },
                "IrThermo_3.IrThermo.Haval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.haval@set"
                },
                "IrThermo_3.IrThermo.Hbval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.hbval@set"
                },
                "IrThermo_3.IrThermo.TOdutval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.todutval@set"
                },
                "IrThermo_3.IrThermo.TO0val@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.to_0val@set"
                },
                "IrThermo_3.IrThermo.TA0val@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.ta_0val@set"
                },
                "IrThermo_3.IrThermo.sensorTempval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.sensor_tempval@set"
                },
                "IrThermo_3.IrThermo.MLX90632_DEFAULT_ADDRESSval@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "IrThermo_3.IrThermo.begin": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "IrThermo_3.IrThermo.getObjectTemp": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "IrThermo"
                        },
                        "blockId": "IRThermo_getObjectTemp",
                        "block": "$this Get surface temperature in Celcius on click$clickBoardNum",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "IrThermo_3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get surface temperature in Celcius on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.get_object_temp"
                },
                "IrThermo_3.IrThermo.getObjectTempF": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "IrThermo"
                        },
                        "blockId": "IRThermo_getObjectTempF",
                        "block": "$this Get surface temperature in Fahrenheit on click$clickBoardNum",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "IrThermo_3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get surface temperature in Fahrenheit on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.get_object_temp_f"
                },
                "IrThermo_3.IrThermo.getSensorTemp": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.get_sensor_temp"
                },
                "IrThermo_3.IrThermo.gatherSensorTemp": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.gather_sensor_temp"
                },
                "IrThermo_3.IrThermo.deviceBusy": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.device_busy"
                },
                "IrThermo_3.IrThermo.eepromBusy": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.eeprom_busy"
                },
                "IrThermo_3.IrThermo.getCyclePosition": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.get_cycle_position"
                },
                "IrThermo_3.IrThermo.dataAvailable": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.data_available"
                },
                "IrThermo_3.IrThermo.setBrownOut": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.set_brown_out"
                },
                "IrThermo_3.IrThermo.clearNewData": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.clear_new_data"
                },
                "IrThermo_3.IrThermo.getStatus": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.get_status"
                },
                "IrThermo_3.IrThermo.sleepMode": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.sleep_mode"
                },
                "IrThermo_3.IrThermo.stepMode": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.step_mode"
                },
                "IrThermo_3.IrThermo.continuousMode": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.continuous_mode"
                },
                "IrThermo_3.IrThermo.setSOC": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.set_soc"
                },
                "IrThermo_3.IrThermo.setMode": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "mode"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.set_mode"
                },
                "IrThermo_3.IrThermo.getMode": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.get_mode"
                },
                "IrThermo_3.IrThermo.readRegister16": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "addr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.read_register16"
                },
                "IrThermo_3.IrThermo.readRegister32": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "addr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.read_register32"
                },
                "IrThermo_3.IrThermo.writeRegister16": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "addr"
                        },
                        {
                            "name": "val"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.write_register16"
                },
                "IrThermo_3.IrThermo.writeEEPROM": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "addr"
                        },
                        {
                            "name": "val"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "IrThermo_3.IrThermo.write_eeprom"
                },
                "Keylock": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#F4B820",
                        "icon": "",
                        "advanced": true
                    }
                },
                "Keylock.MotorDirection": {
                    "kind": 6,
                    "retType": "Keylock.MotorDirection",
                    "extendsTypes": [
                        "Keylock.MotorDirection",
                        "Number"
                    ]
                },
                "Keylock.MotorDirection.Forward": {
                    "retType": "Keylock.MotorDirection.Forward",
                    "attributes": {
                        "block": "Forward",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Forward",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Keylock.MotorDirection.Forward",
                        "Number"
                    ],
                    "pyQName": "Keylock.MotorDirection.FORWARD"
                },
                "Keylock.MotorDirection.Reverse": {
                    "retType": "Keylock.MotorDirection.Reverse",
                    "attributes": {
                        "block": "Reverse",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Reverse",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Keylock.MotorDirection.Reverse",
                        "Number"
                    ],
                    "pyQName": "Keylock.MotorDirection.REVERSE"
                },
                "Keylock.createkeylock": {
                    "kind": -3,
                    "retType": "Keylock.keylock",
                    "attributes": {
                        "block": "create keylock settings",
                        "blockSetVariable": "keylock",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create keylock settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": []
                },
                "Keylock.keylock": {
                    "kind": 8,
                    "retType": "Keylock.keylock",
                    "extendsTypes": [
                        "Keylock.keylock",
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "Keylock.keylock.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "Keylock.keylock.getLockPosition": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "keylock"
                        },
                        "blockId": "Keylock_getLockPosition",
                        "block": "$this Get lock position on click$clickBoardNum",
                        "weight": 60,
                        "color": "#0fbc11",
                        "blockNamespace": "Keylock",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get lock position on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Keylock.keylock.get_lock_position"
                },
                "Line_Follower": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "⇈",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Line_Follower.lineDetection": {
                    "kind": 6,
                    "retType": "Line_Follower.lineDetection",
                    "extendsTypes": [
                        "Line_Follower.lineDetection",
                        "Number"
                    ]
                },
                "Line_Follower.lineDetection.soft_right_turn": {
                    "retType": "Line_Follower.lineDetection.soft_right_turn",
                    "extendsTypes": [
                        "Line_Follower.lineDetection.soft_right_turn",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.lineDetection.SOFT_RIGHT_TURN"
                },
                "Line_Follower.lineDetection.medium_right_turn": {
                    "retType": "Line_Follower.lineDetection.medium_right_turn",
                    "extendsTypes": [
                        "Line_Follower.lineDetection.medium_right_turn",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.lineDetection.MEDIUM_RIGHT_TURN"
                },
                "Line_Follower.lineDetection.hard_right_turn": {
                    "retType": "Line_Follower.lineDetection.hard_right_turn",
                    "extendsTypes": [
                        "Line_Follower.lineDetection.hard_right_turn",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.lineDetection.HARD_RIGHT_TURN"
                },
                "Line_Follower.lineDetection.hard_left_turn": {
                    "retType": "Line_Follower.lineDetection.hard_left_turn",
                    "extendsTypes": [
                        "Line_Follower.lineDetection.hard_left_turn",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.lineDetection.HARD_LEFT_TURN"
                },
                "Line_Follower.lineDetection.medium_left_turn": {
                    "retType": "Line_Follower.lineDetection.medium_left_turn",
                    "extendsTypes": [
                        "Line_Follower.lineDetection.medium_left_turn",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.lineDetection.MEDIUM_LEFT_TURN"
                },
                "Line_Follower.lineDetection.soft_left_turn": {
                    "retType": "Line_Follower.lineDetection.soft_left_turn",
                    "extendsTypes": [
                        "Line_Follower.lineDetection.soft_left_turn",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.lineDetection.SOFT_LEFT_TURN"
                },
                "Line_Follower.lineDetection.no_correction": {
                    "retType": "Line_Follower.lineDetection.no_correction",
                    "extendsTypes": [
                        "Line_Follower.lineDetection.no_correction",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.lineDetection.NO_CORRECTION"
                },
                "Line_Follower.reflection": {
                    "kind": 6,
                    "retType": "Line_Follower.reflection",
                    "extendsTypes": [
                        "Line_Follower.reflection",
                        "Number"
                    ]
                },
                "Line_Follower.reflection.reflected": {
                    "retType": "Line_Follower.reflection.reflected",
                    "extendsTypes": [
                        "Line_Follower.reflection.reflected",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.reflection.REFLECTED"
                },
                "Line_Follower.reflection.not_reflected": {
                    "retType": "Line_Follower.reflection.not_reflected",
                    "extendsTypes": [
                        "Line_Follower.reflection.not_reflected",
                        "Number"
                    ],
                    "pyQName": "Line_Follower.reflection.NOT_REFLECTED"
                },
                "Line_Follower.IRsensor": {
                    "kind": 6,
                    "retType": "Line_Follower.IRsensor",
                    "extendsTypes": [
                        "Line_Follower.IRsensor",
                        "Number"
                    ]
                },
                "Line_Follower.IRsensor.U1": {
                    "retType": "Line_Follower.IRsensor.U1",
                    "extendsTypes": [
                        "Line_Follower.IRsensor.U1",
                        "Number"
                    ]
                },
                "Line_Follower.IRsensor.U2": {
                    "retType": "Line_Follower.IRsensor.U2",
                    "extendsTypes": [
                        "Line_Follower.IRsensor.U2",
                        "Number"
                    ]
                },
                "Line_Follower.IRsensor.U3": {
                    "retType": "Line_Follower.IRsensor.U3",
                    "extendsTypes": [
                        "Line_Follower.IRsensor.U3",
                        "Number"
                    ]
                },
                "Line_Follower.IRsensor.U4": {
                    "retType": "Line_Follower.IRsensor.U4",
                    "extendsTypes": [
                        "Line_Follower.IRsensor.U4",
                        "Number"
                    ]
                },
                "Line_Follower.IRsensor.U5": {
                    "retType": "Line_Follower.IRsensor.U5",
                    "extendsTypes": [
                        "Line_Follower.IRsensor.U5",
                        "Number"
                    ]
                },
                "Line_Follower.createLineFollower": {
                    "kind": -3,
                    "retType": "Line_Follower.LineFollower",
                    "attributes": {
                        "block": "create Line Follower settings",
                        "blockSetVariable": "LineFollower",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "LineFollower": "the LineFollower Object"
                        },
                        "jsDoc": "Sets LineFollower Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Line Follower settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Line_Follower.create_line_follower"
                },
                "Line_Follower.LineFollower": {
                    "kind": 8,
                    "retType": "Line_Follower.LineFollower",
                    "extendsTypes": [
                        "Line_Follower.LineFollower",
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "Line_Follower.LineFollower.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.is_initialized"
                },
                "Line_Follower.LineFollower.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Line_Follower.LineFollower.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Line_Follower.LineFollower.getDirectionEnum": {
                    "kind": -1,
                    "retType": "Line_Follower.lineDetection",
                    "attributes": {
                        "paramDefl": {
                            "this": "LineFollower"
                        },
                        "blockId": "Line_Follower_lineDetection",
                        "block": "$this $enumName",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Line_Follower",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "enumName",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "enumName",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "enumName",
                            "type": "Line_Follower.lineDetection",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.get_direction_enum"
                },
                "Line_Follower.LineFollower.getWhiteDirection": {
                    "kind": -1,
                    "retType": "Line_Follower.lineDetection",
                    "attributes": {
                        "paramDefl": {
                            "this": "LineFollower"
                        },
                        "blockId": "Line_Follower_getWhiteDirection",
                        "block": "$this Correction required to follow white line",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Line_Follower",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Correction required to follow white line",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.get_white_direction"
                },
                "Line_Follower.LineFollower.getBlackDirection": {
                    "kind": -1,
                    "retType": "Line_Follower.lineDetection",
                    "attributes": {
                        "paramDefl": {
                            "this": "LineFollower"
                        },
                        "blockId": "Line_Follower_getBlackDirection",
                        "block": "$this Correction required to follow black line",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Line_Follower",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Correction required to follow black line",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.get_black_direction"
                },
                "Line_Follower.LineFollower.getU1": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.get_u1"
                },
                "Line_Follower.LineFollower.getU2": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.get_u2"
                },
                "Line_Follower.LineFollower.getU3": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.get_u3"
                },
                "Line_Follower.LineFollower.getU4": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.get_u4"
                },
                "Line_Follower.LineFollower.getU5": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.get_u5"
                },
                "Line_Follower.LineFollower.isReflected": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "LineFollower"
                        },
                        "blockId": "Line_Follower_isReflected",
                        "block": "$this Has light been reflected on $sensorNum",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Line_Follower",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Has light been reflected on ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "sensorNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "sensorNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "sensorNum",
                            "type": "Line_Follower.IRsensor",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Line_Follower.LineFollower.is_reflected"
                },
                "Motion": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "➠",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Motion.Motion": {
                    "kind": 8,
                    "retType": "Motion.Motion",
                    "extendsTypes": []
                },
                "Motion.Motion.isDetected": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "blockId": "Motion_isDetected",
                        "block": "Has motion been detected on click%clickBoardNum ?",
                        "blockGap": "7",
                        "advanced": false,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Has motion been detected on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " ?",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Motion.Motion.is_detected"
                },
                "NFC_Tag_2": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#FF2F92",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "NFC_Tag_2.URICode": {
                    "kind": 6,
                    "retType": "NFC_Tag_2.URICode",
                    "extendsTypes": [
                        "NFC_Tag_2.URICode",
                        "Number"
                    ]
                },
                "NFC_Tag_2.URICode.zero": {
                    "retType": "NFC_Tag_2.URICode.zero",
                    "attributes": {
                        "block": "Full URL",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Full URL",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "NFC_Tag_2.URICode.zero",
                        "Number"
                    ],
                    "pyQName": "NFC_Tag_2.URICode.ZERO"
                },
                "NFC_Tag_2.URICode.one": {
                    "retType": "NFC_Tag_2.URICode.one",
                    "attributes": {
                        "block": "http://www.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "http://www.",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "NFC_Tag_2.URICode.one",
                        "Number"
                    ],
                    "pyQName": "NFC_Tag_2.URICode.ONE"
                },
                "NFC_Tag_2.URICode.two": {
                    "retType": "NFC_Tag_2.URICode.two",
                    "attributes": {
                        "block": "https://www.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "https://www.",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "NFC_Tag_2.URICode.two",
                        "Number"
                    ],
                    "pyQName": "NFC_Tag_2.URICode.TWO"
                },
                "NFC_Tag_2.URICode.three": {
                    "retType": "NFC_Tag_2.URICode.three",
                    "attributes": {
                        "block": "http://",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "http://",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "NFC_Tag_2.URICode.three",
                        "Number"
                    ],
                    "pyQName": "NFC_Tag_2.URICode.THREE"
                },
                "NFC_Tag_2.URICode.four": {
                    "retType": "NFC_Tag_2.URICode.four",
                    "attributes": {
                        "block": "https://",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "https://",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "NFC_Tag_2.URICode.four",
                        "Number"
                    ],
                    "pyQName": "NFC_Tag_2.URICode.FOUR"
                },
                "NFC_Tag_2.createNFC_Tag": {
                    "kind": -3,
                    "retType": "NFC_Tag_2.NFC_Tag",
                    "attributes": {
                        "block": "create NFC_Tag settings",
                        "blockSetVariable": "NFC_Tag",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "NFC_Tag": "the NFC_Tag Object"
                        },
                        "jsDoc": "Sets NFC_Tag Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create NFC_Tag settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "NFC_Tag_2.NFC_Tag": {
                    "kind": 8,
                    "retType": "NFC_Tag_2.NFC_Tag",
                    "extendsTypes": [
                        "NFC_Tag_2.NFC_Tag",
                        "bBoard.I2CSettings"
                    ]
                },
                "NFC_Tag_2.NFC_Tag.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "NFC_Tag_2.NFC_Tag.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "NFC_Tag_2.NFC_Tag.readCoveringPage": {
                    "kind": -1,
                    "retType": "number[]",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.read_covering_page"
                },
                "NFC_Tag_2.NFC_Tag.setURI": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "NFC_Tag"
                        },
                        "blockId": "NT3H2111_setURI",
                        "block": "Write URL %URL to NFC device",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "NFC_Tag_2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Write URL ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "URL",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " to NFC device",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "URL",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "URL",
                            "type": "string"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.set_uri"
                },
                "NFC_Tag_2.NFC_Tag.readUID": {
                    "kind": -1,
                    "retType": "number[]",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.read_uid"
                },
                "NFC_Tag_2.NFC_Tag.writeBlock": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "NFC_Tag"
                        },
                        "blockId": "NT3H2111_writeBlock",
                        "block": "Write array %values to block %blockAddr",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "NFC_Tag_2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Write array ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " to block ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "blockAddr",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "blockAddr",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "values",
                            "type": "number[]"
                        },
                        {
                            "name": "blockAddr"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.write_block"
                },
                "NFC_Tag_2.NFC_Tag.writeNT3H2111": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "NFC_Tag"
                        },
                        "blockId": "NT3H2111_write",
                        "block": "Write array %values to NT3H2111 register%register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "NFC_Tag_2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Write array ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " to NT3H2111 register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "values",
                            "type": "number[]"
                        },
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.write_nt3h2111"
                },
                "NFC_Tag_2.NFC_Tag.findI2C": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.find_i2c"
                },
                "NFC_Tag_2.NFC_Tag.readNT3H2111": {
                    "kind": -1,
                    "retType": "number[]",
                    "attributes": {
                        "paramDefl": {
                            "this": "NFC_Tag"
                        },
                        "blockId": "NT3H2111_read",
                        "block": "Read %numBytes bytes from register%register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "NFC_Tag_2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Read ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "numBytes",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " bytes from register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "numBytes",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "numBytes"
                        },
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.read_nt3h2111"
                },
                "NFC_Tag_2.NFC_Tag.setNT3H2111Addr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.set_nt3h2111_addr"
                },
                "NFC_Tag_2.NFC_Tag.getNT3H2111Addr": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "NFC_Tag_2.NFC_Tag.get_nt3h2111_addr"
                },
                "Noise": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#F20D0D",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Noise.createNoise": {
                    "kind": -3,
                    "retType": "Noise.Noise",
                    "attributes": {
                        "block": "create Noise settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Noise",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Noise": "the Noise Object"
                        },
                        "jsDoc": "Sets Noise Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Noise settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Noise.create_noise"
                },
                "Noise.Noise": {
                    "kind": 8,
                    "retType": "Noise.Noise",
                    "extendsTypes": [
                        "Noise.Noise",
                        "bBoard.SPIsetting"
                    ]
                },
                "Noise.Noise.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Noise.Noise.is_initialized"
                },
                "Noise.Noise.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Noise.Noise.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Noise.Noise.getNoiseLevel": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Noise"
                        },
                        "blockId": "Noise_getNoiseLevel",
                        "block": "$this Get raw noise level",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Noise",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get raw noise level",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Noise.Noise.get_noise_level"
                },
                "Noise.Noise.isThresholdTriggered": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "Noise"
                        },
                        "blockId": "Noise_isThresholdTriggered",
                        "block": "$this Has noise threshold been triggered",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Noise",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Has noise threshold been triggered",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Noise.Noise.is_threshold_triggered"
                },
                "Noise.Noise.setThreshold": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Noise"
                        },
                        "blockId": "Noise_setThreshold",
                        "block": "$this Set noise threshold to $threshold",
                        "blockGap": "7",
                        "advanced": false,
                        "paramMin": {
                            "threshold": "0"
                        },
                        "paramMax": {
                            "threshold": "100"
                        },
                        "blockNamespace": "Noise",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Set noise threshold to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "threshold",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "threshold",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "threshold",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Noise.Noise.set_threshold"
                },
                "Noise.Noise.write": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Noise"
                        },
                        "blockId": "Noise_write",
                        "block": "$this Write $value",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Noise",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true
                },
                "Reed": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Reed.createReed": {
                    "kind": -3,
                    "retType": "Reed.Reed",
                    "attributes": {
                        "block": "create Reed settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Reed",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Reed": "the Reed Object"
                        },
                        "jsDoc": "Sets Reed Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Reed settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Reed.create_reed"
                },
                "Reed.Reed": {
                    "kind": 8,
                    "retType": "Reed.Reed",
                    "extendsTypes": [
                        "Reed.Reed",
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "Reed.Reed.isInitialized": {
                    "kind": 2,
                    "retType": "number[]",
                    "isInstance": true,
                    "pyQName": "Reed.Reed.is_initialized"
                },
                "Reed.Reed.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Reed.Reed.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Reed.Reed.isActivated": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "Reed"
                        },
                        "blockId": "Reed_isActivated",
                        "block": "For $this Has reed been activated",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Reed",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "For ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Has reed been activated",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Reed.Reed.is_activated"
                },
                "Relay": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#66791B",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Relay.relay": {
                    "kind": 6,
                    "retType": "Relay.relay",
                    "extendsTypes": [
                        "Relay.relay",
                        "Number"
                    ]
                },
                "Relay.relay.Relay1": {
                    "retType": "Relay.relay.Relay1",
                    "extendsTypes": [
                        "Relay.relay.Relay1",
                        "Number"
                    ],
                    "pyQName": "Relay.relay.RELAY1"
                },
                "Relay.relay.Relay2": {
                    "retType": "Relay.relay.Relay2",
                    "extendsTypes": [
                        "Relay.relay.Relay2",
                        "Number"
                    ],
                    "pyQName": "Relay.relay.RELAY2"
                },
                "Relay.onOff": {
                    "kind": 6,
                    "retType": "Relay.onOff",
                    "extendsTypes": [
                        "Relay.onOff",
                        "Number"
                    ]
                },
                "Relay.onOff.On": {
                    "retType": "Relay.onOff.On",
                    "extendsTypes": [
                        "Relay.onOff.On",
                        "Number"
                    ],
                    "pyQName": "Relay.onOff.ON"
                },
                "Relay.onOff.Off": {
                    "retType": "Relay.onOff.Off",
                    "extendsTypes": [
                        "Relay.onOff.Off",
                        "Number"
                    ],
                    "pyQName": "Relay.onOff.OFF"
                },
                "Relay.createkeylock": {
                    "kind": -3,
                    "retType": "Relay.Relay",
                    "attributes": {
                        "block": "create Relay settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Relay",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Relay": "the Relay Object"
                        },
                        "jsDoc": "Sets Relay Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Relay settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "Relay.Relay": {
                    "kind": 8,
                    "retType": "Relay.Relay",
                    "extendsTypes": [
                        "Relay.Relay",
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "Relay.Relay.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Relay.Relay.relayOn": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Relay"
                        },
                        "blockId": "Relay_relayOn",
                        "block": "$this Turn on relay $relayNum",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Relay",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Turn on relay ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "relayNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "relayNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "relayNum",
                            "type": "Relay.relay",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Relay.Relay.relay_on"
                },
                "Relay.Relay.relayOff": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Relay"
                        },
                        "blockId": "Relay_relayOff",
                        "block": "$this Turn off relay $relayNum",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Relay",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Turn off relay ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "relayNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "relayNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "relayNum",
                            "type": "Relay.relay",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Relay.Relay.relay_off"
                },
                "Relay.Relay.relayOnOff": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Relay"
                        },
                        "blockId": "Relay_relayOnOff",
                        "block": "$this Turn $onOff relay $relayNum",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Relay",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Turn ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "onOff",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " relay ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "relayNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "onOff",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "relayNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "onOff",
                            "type": "Relay.onOff",
                            "isEnum": true
                        },
                        {
                            "name": "relayNum",
                            "type": "Relay.relay",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Relay.Relay.relay_on_off"
                },
                "Stepper_5": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#EF697B",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Stepper_5.Rotation": {
                    "kind": 6,
                    "retType": "Stepper_5.Rotation",
                    "extendsTypes": [
                        "Stepper_5.Rotation",
                        "Number"
                    ]
                },
                "Stepper_5.Rotation.Forward": {
                    "retType": "Stepper_5.Rotation.Forward",
                    "attributes": {
                        "block": "Forward",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Forward",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Stepper_5.Rotation.Forward",
                        "Number"
                    ],
                    "pyQName": "Stepper_5.Rotation.FORWARD"
                },
                "Stepper_5.Rotation.Backwards": {
                    "retType": "Stepper_5.Rotation.Backwards",
                    "attributes": {
                        "block": "Backwards",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Backwards",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Stepper_5.Rotation.Backwards",
                        "Number"
                    ],
                    "pyQName": "Stepper_5.Rotation.BACKWARDS"
                },
                "Stepper_5.createStepper": {
                    "kind": -3,
                    "retType": "Stepper_5.Stepper",
                    "attributes": {
                        "block": "create Stepper settings",
                        "blockSetVariable": "Stepper",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Stepper settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "Stepper_5.create_stepper"
                },
                "Stepper_5.Stepper": {
                    "kind": 8,
                    "retType": "Stepper_5.Stepper",
                    "extendsTypes": [
                        "Stepper_5.Stepper",
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "Stepper_5.Stepper.step": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Stepper"
                        },
                        "blockId": "step",
                        "block": "$this Single step motor $direction on click$clickBoardNum",
                        "weight": 100,
                        "blockGap": "7",
                        "blockNamespace": "Stepper_5",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Single step motor ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "direction",
                            "type": "Stepper_5.Rotation",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Stepper_5.Stepper.stepNumber": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Stepper"
                        },
                        "blockId": "stepNum",
                        "block": "$this Step motor $numSteps times $direction on click$clickBoardNum",
                        "weight": 100,
                        "blockGap": "7",
                        "blockNamespace": "Stepper_5",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Step motor ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "numSteps",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " times ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "numSteps",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "direction",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "numSteps"
                        },
                        {
                            "name": "direction",
                            "type": "Stepper_5.Rotation",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Stepper_5.Stepper.step_number"
                },
                "Temp_Log_2": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Temp_Log_2.createTemp_Log": {
                    "kind": -3,
                    "retType": "Temp_Log_2.Temp_Log",
                    "attributes": {
                        "block": "create Temp_Log settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Temp_Log",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Temp_Log": "the Temp_Log Object"
                        },
                        "jsDoc": "Sets Temp_Log Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Temp_Log settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "Temp_Log_2.Temp_Log": {
                    "kind": 8,
                    "retType": "Temp_Log_2.Temp_Log",
                    "extendsTypes": [
                        "Temp_Log_2.Temp_Log",
                        "bBoard.I2CSettings"
                    ]
                },
                "Temp_Log_2.Temp_Log.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Temp_Log_2.Temp_Log.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Temp_Log_2.Temp_Log.setTMP116Addr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.set_tmp116_addr"
                },
                "Temp_Log_2.Temp_Log.getTMP116Addr": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.get_tmp116_addr"
                },
                "Temp_Log_2.Temp_Log.readTMP116Reg": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "register"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.read_tmp116_reg"
                },
                "Temp_Log_2.Temp_Log.readT": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.read_t"
                },
                "Temp_Log_2.Temp_Log.writeTMP116": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "register"
                        },
                        {
                            "name": "value"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.write_tmp116"
                },
                "Temp_Log_2.Temp_Log.readTMP116": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "register"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.read_tmp116"
                },
                "Temp_Log_2.Temp_Log.readTemperatureC": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Temp_Log"
                        },
                        "blockId": "Temp_Log_readTemperatureC",
                        "block": "$this Get temperature in Celcius",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Temp_Log_2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get temperature in Celcius",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.read_temperature_c"
                },
                "Temp_Log_2.Temp_Log.readTemperatureF": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Temp_Log"
                        },
                        "blockId": "Temp_Log_readTemperatureF",
                        "block": "$this Get temperature in Fahrenheit",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Temp_Log_2",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get temperature in Fahrenheit",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.read_temperature_f"
                },
                "Temp_Log_2.Temp_Log.readHighLimit": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.read_high_limit"
                },
                "Temp_Log_2.Temp_Log.readLowLimit": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.read_low_limit"
                },
                "Temp_Log_2.Temp_Log.writeHighLimit": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "limit"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.write_high_limit"
                },
                "Temp_Log_2.Temp_Log.writeLowLimit": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "limit"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.write_low_limit"
                },
                "Temp_Log_2.Temp_Log.readDeviceId": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Temp_Log_2.Temp_Log.read_device_id"
                },
                "Thermo_6": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Thermo_6.createThermo": {
                    "kind": -3,
                    "retType": "Thermo_6.Thermo",
                    "attributes": {
                        "block": "create Thermo settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Thermo",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Thermo": "the Thermo Object"
                        },
                        "jsDoc": "Sets Thermo Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Thermo settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Thermo_6.create_thermo"
                },
                "Thermo_6.Thermo": {
                    "kind": 8,
                    "retType": "Thermo_6.Thermo",
                    "extendsTypes": [
                        "Thermo_6.Thermo",
                        "bBoard.I2CSettings"
                    ]
                },
                "Thermo_6.Thermo.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Thermo_6.Thermo.getTempC": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Thermo"
                        },
                        "blockId": "Thermo6_getTempC",
                        "block": "$this Get the temperature in Celcius",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Thermo_6",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get the temperature in Celcius",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Thermo_6.Thermo.get_temp_c"
                },
                "Thermo_6.Thermo.getTempF": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Thermo"
                        },
                        "blockId": "Thermo6_getTempF",
                        "block": "$this Get the temperature in Fahrenheit",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Thermo_6",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get the temperature in Fahrenheit",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Thermo_6.Thermo.get_temp_f"
                },
                "Thermo_6.Thermo.initialize": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Thermo"
                        },
                        "blockId": "Thermo6_initialize",
                        "block": "$this Initalize with i2c address $deviceAddr",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Thermo_6",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Initalize with i2c address ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "deviceAddr",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "deviceAddr",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        }
                    ],
                    "isInstance": true
                },
                "Thermo_6.Thermo.writeMAX31875": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Thermo"
                        },
                        "blockId": "MAX31875_write",
                        "block": "$this Write $value to register$register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Thermo_6",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Thermo_6.Thermo.write_max31875"
                },
                "Thermo_6.Thermo.readMAX31875": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Thermo"
                        },
                        "blockId": "MAX31875_read",
                        "block": "$this Read from register$register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Thermo_6",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Read from register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Thermo_6.Thermo.read_max31875"
                },
                "Thermo_6.Thermo.setMAX31875Addr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Thermo_6.Thermo.set_max31875_addr"
                },
                "Thermo_6.Thermo.getMAX31875Addr": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Thermo_6.Thermo.get_max31875_addr"
                },
                "Touchpad": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#F4B820",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Touchpad.createTouchpad": {
                    "kind": -3,
                    "retType": "Touchpad.Touchpad",
                    "attributes": {
                        "block": "create Touchpad settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Touchpad",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Touchpad": "the Touchpad Object"
                        },
                        "jsDoc": "Sets Touchpad Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Touchpad settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Touchpad.create_touchpad"
                },
                "Touchpad.Touchpad": {
                    "kind": 8,
                    "retType": "Touchpad.Touchpad",
                    "extendsTypes": [
                        "Touchpad.Touchpad",
                        "bBoard.I2CSettings"
                    ]
                },
                "Touchpad.Touchpad.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Touchpad.Touchpad.initialize": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_initialize",
                        "block": "$this Initalize touchpad with i2c address $deviceAddr",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Initalize touchpad with i2c address ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "deviceAddr",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "deviceAddr",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        }
                    ],
                    "isInstance": true
                },
                "Touchpad.Touchpad.getX": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_getX",
                        "block": "$this Get X position",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get X position",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.get_x"
                },
                "Touchpad.Touchpad.getY": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_getY",
                        "block": "$this Get Y position",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get Y position",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.get_y"
                },
                "Touchpad.Touchpad.isTouched": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_isTouched",
                        "block": "$this Has touch occured",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Has touch occured",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.is_touched"
                },
                "Touchpad.Touchpad.isGesture": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_isGesture",
                        "block": "$this Has gesture occured",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Has gesture occured",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.is_gesture"
                },
                "Touchpad.Touchpad.getGestureName": {
                    "kind": -1,
                    "retType": "string",
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_getGestureName",
                        "block": "$this Convert gesture ID $gestureID to a friendly name",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Convert gesture ID ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "gestureID",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to a friendly name",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "gestureID",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "gestureID"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.get_gesture_name"
                },
                "Touchpad.Touchpad.getTouchState": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_getTouchState",
                        "block": "$this Get touch status",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get touch status",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.get_touch_state"
                },
                "Touchpad.Touchpad.getGesture": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_getGesture",
                        "block": "$this Get gesture",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get gesture",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.get_gesture"
                },
                "Touchpad.Touchpad.writeMTCH6102": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_write",
                        "block": "$this Write $value to register$register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.write_mtch6102"
                },
                "Touchpad.Touchpad.readMTCH6102": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Touchpad"
                        },
                        "blockId": "Touchpad_read",
                        "block": "$this Read from register$register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "Touchpad",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Read from register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "register"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.read_mtch6102"
                },
                "Touchpad.Touchpad.setMTCH6102Addr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.set_mtch6102_addr"
                },
                "Touchpad.Touchpad.getMTCH6102Addr": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Touchpad.Touchpad.get_mtch6102_addr"
                },
                "UV3": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "UV3.createUV3": {
                    "kind": -3,
                    "retType": "UV3.UV3",
                    "attributes": {
                        "block": "create UV3 settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "UV3",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "UV3": "the UV3 Object"
                        },
                        "jsDoc": "Sets UV3 Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create UV3 settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "UV3.create_uv3"
                },
                "UV3.UV3": {
                    "kind": 8,
                    "retType": "UV3.UV3",
                    "extendsTypes": [
                        "UV3.UV3",
                        "bBoard.I2CSettings"
                    ]
                },
                "UV3.UV3.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "UV3.UV3.initialize": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "UV3.UV3.writeVEML6070": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "UV3"
                        },
                        "blockId": "VEML6070_write",
                        "block": "$this Write $value to VEML6070 control register",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "UV3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Write ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " to VEML6070 control register",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "UV3.UV3.write_veml6070"
                },
                "UV3.UV3.UVSteps": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "UV3"
                        },
                        "blockId": "VEML6070_UVSteps",
                        "block": "$this Get UV value",
                        "blockGap": "7",
                        "advanced": false,
                        "blockNamespace": "UV3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Get UV value",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "UV3.UV3.uv_steps"
                },
                "UV3.UV3.enableShutdown": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "UV3"
                        },
                        "blockId": "VEML6070_enable",
                        "block": "$this Turn off device",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "UV3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Turn off device",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "UV3.UV3.enable_shutdown"
                },
                "UV3.UV3.disableShutdown": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "UV3"
                        },
                        "blockId": "VEML6070_disable",
                        "block": "$this Turn on device",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "UV3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Turn on device",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "UV3.UV3.disable_shutdown"
                },
                "UV3.UV3.readVEML6070": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "UV3"
                        },
                        "blockId": "VEML6070_read",
                        "block": "$this Read from slave address$slaveAddress",
                        "blockGap": "7",
                        "advanced": true,
                        "blockNamespace": "UV3",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Read from slave address",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "slaveAddress",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "slaveAddress",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "slaveAddress"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "UV3.UV3.read_veml6070"
                },
                "UV3.UV3.setVEML6070Addr": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "deviceAddr"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "UV3.UV3.set_veml6070_addr"
                },
                "UV3.UV3.getVEML6070Addr": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "UV3.UV3.get_veml6070_addr"
                },
                "Water_Detect": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Water_Detect.createStepper": {
                    "kind": -3,
                    "retType": "Water_Detect.Water_Detect",
                    "attributes": {
                        "block": "create Water_Detect settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Water_Detect",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Water_Detect": "the Water_Detect Object"
                        },
                        "jsDoc": "Sets Water_Detect Click object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Water_Detect settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Water_Detect.create_stepper"
                },
                "Water_Detect.Water_Detect": {
                    "kind": 8,
                    "retType": "Water_Detect.Water_Detect",
                    "extendsTypes": [
                        "Water_Detect.Water_Detect",
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "Water_Detect.Water_Detect.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Water_Detect.Water_Detect.isWater": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Water_Detect"
                        },
                        "blockId": "Water_Detect_isWater",
                        "block": "$this Is water detected",
                        "weight": 100,
                        "blockGap": "7",
                        "blockNamespace": "Water_Detect",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Is water detected",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Water_Detect.Water_Detect.is_water"
                },
                "Button_G": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#F4B820",
                        "icon": "",
                        "advanced": true
                    }
                },
                "Button_G.Light": {
                    "kind": 6,
                    "retType": "Button_G.Light",
                    "extendsTypes": [
                        "Button_G.Light",
                        "Number"
                    ]
                },
                "Button_G.Light.Off": {
                    "retType": "Button_G.Light.Off",
                    "extendsTypes": [
                        "Button_G.Light.Off",
                        "Number"
                    ],
                    "pyQName": "Button_G.Light.OFF"
                },
                "Button_G.Light.On": {
                    "retType": "Button_G.Light.On",
                    "extendsTypes": [
                        "Button_G.Light.On",
                        "Number"
                    ],
                    "pyQName": "Button_G.Light.ON"
                },
                "Button_G.createButton_G": {
                    "kind": -3,
                    "retType": "Button_G.Button_G",
                    "attributes": {
                        "block": "create Button_G settings on clickBoard $clickBoardNum",
                        "blockSetVariable": "Button_G",
                        "weight": 110,
                        "paramHelp": {
                            "clickBoardNum": "the clickBoardNum",
                            "Button_G": "the Button_G Object"
                        },
                        "jsDoc": "Sets Button G object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Button_G settings on clickBoard ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "Button_G.Button_G": {
                    "kind": 8,
                    "retType": "Button_G.Button_G",
                    "extendsTypes": [
                        "Button_G.Button_G",
                        "bBoard.PinSettings",
                        "bBoard.IOSettings"
                    ]
                },
                "Button_G.Button_G.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Button_G.Button_G.setLight": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Button_G"
                        },
                        "blockId": "ButtonG_SetLight",
                        "block": "$this Turn button light $onOff",
                        "blockNamespace": "Button_G",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Turn button light ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "onOff",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "onOff",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "onOff",
                            "type": "Button_G.Light",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Button_G.Button_G.set_light"
                },
                "Button_G.Button_G.setLightPWM": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Button_G"
                        },
                        "blockId": "ButtonG_SetLight_PWM",
                        "block": "$this Set button light to $PWMValue brightness",
                        "paramMin": {
                            "PWMValue": "0"
                        },
                        "paramMax": {
                            "PWMValue": "100"
                        },
                        "blockNamespace": "Button_G",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Set button light to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMValue",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " brightness",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "PWMValue",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "PWMValue",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Button_G.Button_G.set_light_pwm"
                },
                "Button_G.Button_G.getSwitch": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "Button_G"
                        },
                        "blockId": "ButtonG_getSwitch",
                        "block": "$this Read button state",
                        "blockNamespace": "Button_G",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Read button state",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "Button_G.Button_G.get_switch"
                },
                "Heart_Rate": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 100,
                        "color": "#33BEBB",
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "Custom blocks"
                    }
                },
                "Heart_Rate.initialize": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "heartrate_initialize",
                        "block": "Initialize device on click%clickBoardNum",
                        "blockGap": "7",
                        "advanced": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Initialize device on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "Heart_Rate.MAX30100_getIRdata": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "Heart_Rate.MAX30100_getREDdata": {
                    "kind": -3,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "Heart_Rate.writeMAX30100": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "MAX30100_write",
                        "block": "Write array %values to MAX30100 register%register on click%clickBoardNum ?",
                        "blockGap": "7",
                        "advanced": true,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Write array ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " to MAX30100 register",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " ?",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "values",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "register",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "values",
                            "type": "number[]"
                        },
                        {
                            "name": "register"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Heart_Rate.write_max30100"
                },
                "Heart_Rate.MAX30100_readBlock": {
                    "kind": -3,
                    "retType": "number[]",
                    "parameters": [
                        {
                            "name": "reg_addr"
                        },
                        {
                            "name": "numBytes"
                        },
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "Heart_Rate.BPMRate": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "Heart_Rate_getBPMRate",
                        "block": "Get beats per minute on click%clickBoardNum",
                        "blockGap": "7",
                        "advanced": false,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get beats per minute on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Heart_Rate.bpm_rate"
                },
                "Heart_Rate.pulse": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockId": "Heart_Rate_getHRSignal",
                        "block": "Get raw HR signal on click%clickBoardNum",
                        "blockGap": "7",
                        "advanced": false,
                        "paramHelp": {
                            "clickBoardNum": "the location of the click board being used"
                        },
                        "jsDoc": "The current value of IR reflection normalized between 0 and 100 (Great for neopixels)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Get raw HR signal on click",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNum",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNum",
                            "description": "the location of the click board being used",
                            "type": "clickBoardID",
                            "isEnum": true
                        }
                    ]
                },
                "IRSensor": {
                    "kind": 6,
                    "retType": "IRSensor",
                    "extendsTypes": [
                        "IRSensor",
                        "Number"
                    ]
                },
                "IRSensor.LEFT": {
                    "retType": "IRSensor.LEFT",
                    "attributes": {
                        "block": "left",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "left",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IRSensor.LEFT",
                        "Number"
                    ]
                },
                "IRSensor.MIDDLE": {
                    "retType": "IRSensor.MIDDLE",
                    "attributes": {
                        "block": "middle",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "middle",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IRSensor.MIDDLE",
                        "Number"
                    ]
                },
                "IRSensor.RIGHT": {
                    "retType": "IRSensor.RIGHT",
                    "attributes": {
                        "block": "right",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "right",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IRSensor.RIGHT",
                        "Number"
                    ]
                },
                "IRColour": {
                    "kind": 6,
                    "retType": "IRColour",
                    "extendsTypes": [
                        "IRColour",
                        "Number"
                    ]
                },
                "IRColour.BLACK": {
                    "retType": "IRColour.BLACK",
                    "attributes": {
                        "block": "black",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "black",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IRColour.BLACK",
                        "Number"
                    ]
                },
                "IRColour.WHITE": {
                    "retType": "IRColour.WHITE",
                    "attributes": {
                        "block": "white",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "white",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "IRColour.WHITE",
                        "Number"
                    ]
                },
                "Motor": {
                    "kind": 6,
                    "retType": "Motor",
                    "extendsTypes": [
                        "Motor",
                        "Number"
                    ]
                },
                "Motor.LEFT": {
                    "retType": "Motor.LEFT",
                    "attributes": {
                        "block": "left",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "left",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Motor.LEFT",
                        "Number"
                    ]
                },
                "Motor.RIGHT": {
                    "retType": "Motor.RIGHT",
                    "attributes": {
                        "block": "right",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "right",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Motor.RIGHT",
                        "Number"
                    ]
                },
                "MotorDirection": {
                    "kind": 6,
                    "retType": "MotorDirection",
                    "extendsTypes": [
                        "MotorDirection",
                        "Number"
                    ]
                },
                "MotorDirection.FORWARD": {
                    "retType": "MotorDirection.FORWARD",
                    "attributes": {
                        "block": "forward",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "forward",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MotorDirection.FORWARD",
                        "Number"
                    ]
                },
                "MotorDirection.REVERSE": {
                    "retType": "MotorDirection.REVERSE",
                    "attributes": {
                        "block": "reverse",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "reverse",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MotorDirection.REVERSE",
                        "Number"
                    ]
                },
                "MotorPower": {
                    "kind": 6,
                    "retType": "MotorPower",
                    "extendsTypes": [
                        "MotorPower",
                        "Number"
                    ]
                },
                "MotorPower.ON": {
                    "retType": "MotorPower.ON",
                    "attributes": {
                        "block": "on",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MotorPower.ON",
                        "Number"
                    ]
                },
                "MotorPower.OFF": {
                    "retType": "MotorPower.OFF",
                    "attributes": {
                        "block": "off",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "off",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MotorPower.OFF",
                        "Number"
                    ]
                },
                "Comparison": {
                    "kind": 6,
                    "retType": "Comparison",
                    "extendsTypes": [
                        "Comparison",
                        "Number"
                    ]
                },
                "Comparison.CLOSER": {
                    "retType": "Comparison.CLOSER",
                    "attributes": {
                        "block": "closer",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "closer",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Comparison.CLOSER",
                        "Number"
                    ]
                },
                "Comparison.FURTHER": {
                    "retType": "Comparison.FURTHER",
                    "attributes": {
                        "block": "further",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "further",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "Comparison.FURTHER",
                        "Number"
                    ]
                },
                "k8": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "weight": 0,
                        "color": "#421C52",
                        "icon": "",
                        "advanced": true
                    }
                },
                "k8.IR_SENSOR_LEFT": {
                    "kind": 4,
                    "retType": "AnalogPin"
                },
                "k8.IR_SENSOR_MIDDLE": {
                    "kind": 4,
                    "retType": "AnalogPin"
                },
                "k8.SPEAKER": {
                    "kind": 4,
                    "retType": "AnalogPin"
                },
                "k8.IR_SENSOR_RIGHT": {
                    "kind": 4,
                    "retType": "AnalogPin"
                },
                "k8.SERVO_2": {
                    "kind": 4,
                    "retType": "AnalogPin"
                },
                "k8.SONAR": {
                    "kind": 4,
                    "retType": "DigitalPin"
                },
                "k8.SERVO_1": {
                    "kind": 4,
                    "retType": "AnalogPin"
                },
                "k8.M2_PWR": {
                    "kind": 4,
                    "retType": "number"
                },
                "k8.M2_DIR": {
                    "kind": 4,
                    "retType": "number"
                },
                "k8.M1_PWR": {
                    "kind": 4,
                    "retType": "number"
                },
                "k8.M1_DIR": {
                    "kind": 4,
                    "retType": "number"
                },
                "k8.createK8": {
                    "kind": -3,
                    "retType": "k8.K8",
                    "attributes": {
                        "block": "create K8 settings",
                        "blockSetVariable": "K8",
                        "weight": 110,
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create K8 settings",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "k8.create_k8"
                },
                "k8.K8": {
                    "kind": 8,
                    "retType": "k8.K8",
                    "extendsTypes": []
                },
                "k8.K8.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "k8.K8.checkSensor": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this $sensor| sensor is $colour|",
                        "blockId": "line_check_sensor",
                        "weight": 60,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "paramHelp": {
                            "sensor": "which of the three sensors",
                            "colour": "whether the sensor looks for black or white"
                        },
                        "jsDoc": "Check if a chosen sensor is reading black or white",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "sensor",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " sensor is ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "colour",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "sensor",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "colour",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "sensor",
                            "description": "which of the three sensors",
                            "type": "IRSensor",
                            "isEnum": true
                        },
                        {
                            "name": "colour",
                            "description": "whether the sensor looks for black or white",
                            "type": "IRColour",
                            "initializer": "IRColour.WHITE",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.check_sensor"
                },
                "k8.K8.displaySensors": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "blockId": "Line_Sensor",
                        "block": "$this Display Current Status",
                        "group": "Line Sensor",
                        "weight": 50,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Displays current status of all line sensors",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " Display Current Status",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "k8.K8.display_sensors"
                },
                "k8.K8.plotBar": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "x"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.plot_bar"
                },
                "k8.K8.unplotBar": {
                    "kind": -1,
                    "parameters": [
                        {
                            "name": "x"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.unplot_bar"
                },
                "k8.K8.checkSonar": {
                    "kind": -1,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "true",
                        "group": "Sonar",
                        "weight": 50,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Returns the distance the robot is from an object (in centimetres)\r\nMax range 150cm",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "true",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "k8.K8.check_sonar"
                },
                "k8.K8.isSonar": {
                    "kind": -1,
                    "retType": "boolean",
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this sonar is $comparison| than $threshold cm",
                        "group": "Sonar",
                        "blockId": "sonar_is",
                        "weight": 60,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Test that sonar is closer or further than the threshold in cm.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " sonar is ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "comparison",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": " than ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "threshold",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " cm",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "comparison",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "threshold",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "comparison",
                            "type": "Comparison",
                            "initializer": "Comparison.FURTHER",
                            "isEnum": true
                        },
                        {
                            "name": "threshold"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.is_sonar"
                },
                "k8.K8.displaySonar": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "true",
                        "group": "Sonar",
                        "weight": 40,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Display the current sonar reading to leds.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "true",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "k8.K8.display_sonar"
                },
                "k8.K8.ping": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [],
                    "isInstance": true
                },
                "k8.K8.driveStraight": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this drive straight |speed: $speed",
                        "group": "Motion",
                        "blockId": "motion_drive_straight",
                        "paramMin": {
                            "speed": "-100"
                        },
                        "paramMax": {
                            "speed": "100"
                        },
                        "weight": 70,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Drives the robot straight at a specified speed",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " drive straight ",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "speed: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "speed",
                            "options": {
                                "min": {
                                    "value": "-100"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.drive_straight"
                },
                "k8.K8.turnLeft": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this turn left |speed: $speed",
                        "group": "Motion",
                        "blockId": "motion_turn_left",
                        "paramMin": {
                            "speed": "0"
                        },
                        "paramMax": {
                            "speed": "100"
                        },
                        "weight": 60,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Turns the robot to the left at a specified speed",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " turn left ",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "speed: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "speed",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.turn_left"
                },
                "k8.K8.turnRight": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this turn right |speed: $speed",
                        "group": "Motion",
                        "blockId": "motion_turn_right",
                        "paramMin": {
                            "speed": "0"
                        },
                        "paramMax": {
                            "speed": "100"
                        },
                        "weight": 50,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Turns the robot to the right at a specified speed",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " turn right ",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "speed: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "speed",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.turn_right"
                },
                "k8.K8.stop": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this stop motors",
                        "group": "Motion",
                        "blockId": "motion_stop",
                        "weight": 45,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Stop the motors",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " stop motors",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "k8.K8.drive": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this drive |left: $leftWheelSpeed|right: $rightWheelSpeed",
                        "group": "Motion",
                        "blockId": "motion_drive",
                        "paramMin": {
                            "leftWheelSpeed": "-100",
                            "rightWheelSpeed": "-100"
                        },
                        "paramMax": {
                            "leftWheelSpeed": "100",
                            "rightWheelSpeed": "100"
                        },
                        "weight": 40,
                        "advanced": false,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Control both wheels in one function.\r\nSpeeds range from -100 to 100.\r\nNegative speeds go backwards, positive go forwards.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " drive ",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "left: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "leftWheelSpeed",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "right: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "rightWheelSpeed",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "leftWheelSpeed",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "rightWheelSpeed",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "leftWheelSpeed",
                            "options": {
                                "min": {
                                    "value": "-100"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        },
                        {
                            "name": "rightWheelSpeed",
                            "options": {
                                "min": {
                                    "value": "-100"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        }
                    ],
                    "isInstance": true
                },
                "k8.K8.driveWheel": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this drive |wheel: $wheel|speed: $speed",
                        "group": "Motion",
                        "blockId": "motion_single",
                        "paramMin": {
                            "speed": "0"
                        },
                        "paramMax": {
                            "speed": "100"
                        },
                        "weight": 30,
                        "advanced": false,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Control the speed and direction of a single wheel",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " drive ",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "wheel: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "wheel",
                                    "ref": true
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "speed: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "wheel",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "wheel",
                            "type": "Motor",
                            "isEnum": true
                        },
                        {
                            "name": "speed",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "100"
                                }
                            }
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.drive_wheel"
                },
                "k8.K8.setPowers": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "K8"
                        },
                        "block": "$this turn motors |power: $power",
                        "group": "Motion",
                        "blockId": "motion_power",
                        "weight": 20,
                        "advanced": false,
                        "blockNamespace": "k8",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "jsDoc": "Turn the motors on/off - default on",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " turn motors ",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "power: ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "power",
                            "type": "MotorPower",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.set_powers"
                },
                "k8.K8.motorControl": {
                    "kind": -1,
                    "attributes": {
                        "jsDoc": "Advanced control of an individual motor. PWM is set to constant value."
                    },
                    "parameters": [
                        {
                            "name": "whichMotor",
                            "type": "Motor",
                            "isEnum": true
                        },
                        {
                            "name": "speed"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.motor_control"
                },
                "k8.K8.remapSpeed": {
                    "kind": -1,
                    "retType": "number",
                    "parameters": [
                        {
                            "name": "s"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "k8.K8.remap_speed"
                },
                "Test_Module": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#1E90FF",
                        "weight": 116,
                        "icon": "",
                        "advanced": true,
                        "jsDoc": "//* Testing of click modules.\n//"
                    }
                },
                "Test_Module.createTestSettings": {
                    "kind": -3,
                    "retType": "Test_Module.Test",
                    "attributes": {
                        "block": "create Test object on clickBoardNumLCD $clickBoardNumLCD , clickBoardNumForce $clickBoardNumForce, clickBoardNumRelay $clickBoardNumRelay",
                        "blockSetVariable": "Test",
                        "paramHelp": {
                            "clickBoardNumForce": "the clickBoardNum",
                            "Test": "the Test Object"
                        },
                        "jsDoc": "Sets Test object.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "create Test object on clickBoardNumLCD ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNumLCD",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " , clickBoardNumForce ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNumForce",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": ", clickBoardNumRelay ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNumRelay",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "clickBoardNumLCD",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNumForce",
                                    "ref": true
                                },
                                {
                                    "kind": "param",
                                    "name": "clickBoardNumRelay",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "clickBoardNumLCD",
                            "type": "clickBoardID",
                            "initializer": "clickBoardID.one",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNumForce",
                            "description": "the clickBoardNum",
                            "type": "clickBoardID",
                            "initializer": "clickBoardID.two",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNumRelay",
                            "type": "clickBoardID",
                            "initializer": "clickBoardID.three",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "Test_Module.create_test_settings"
                },
                "Test_Module.Test": {
                    "kind": 8,
                    "retType": "Test_Module.Test",
                    "extendsTypes": []
                },
                "Test_Module.Test.TestOkForce": {
                    "kind": 2,
                    "retType": "boolean",
                    "isInstance": true,
                    "pyQName": "Test_Module.Test.test_ok_force"
                },
                "Test_Module.Test.TestOkRelay": {
                    "kind": 2,
                    "retType": "boolean",
                    "isInstance": true,
                    "pyQName": "Test_Module.Test.test_ok_relay"
                },
                "Test_Module.Test.TestCheckForce": {
                    "kind": 2,
                    "retType": "string",
                    "isInstance": true,
                    "pyQName": "Test_Module.Test.test_check_force"
                },
                "Test_Module.Test.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "clickBoardNumLCD",
                            "type": "clickBoardID",
                            "initializer": "clickBoardID.one",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNumForce",
                            "type": "clickBoardID",
                            "initializer": "clickBoardID.two",
                            "isEnum": true
                        },
                        {
                            "name": "clickBoardNumRelay",
                            "type": "clickBoardID",
                            "initializer": "clickBoardID.three",
                            "isEnum": true
                        }
                    ],
                    "isInstance": true
                },
                "Test_Module.Test.TestForce": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "this": "Test"
                        },
                        "help": "Force_Click/Force/forceclickstring",
                        "block": "Display a string value at $this of force",
                        "blockId": "forceTest",
                        "blockNamespace": "Test_Module",
                        "_shadowOverrides": {
                            "this": "variables_get"
                        },
                        "explicitDefaults": [
                            "this"
                        ],
                        "weight": 90,
                        "blockGap": "12",
                        "color": "#9E4894",
                        "icon": "",
                        "jsDoc": "Tests force and displays string value on LCD.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "Display a string value at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " of force",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "this",
                                    "shadowBlockId": "variables_get",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "Test_Module.Test.test_force"
                },
                "i": {
                    "kind": 4,
                    "retType": "number"
                },
                "f": {
                    "kind": 4,
                    "retType": "number"
                },
                "plus": {
                    "kind": 4,
                    "retType": "number"
                },
                "minus": {
                    "kind": 4,
                    "retType": "number"
                },
                "r": {
                    "kind": 4,
                    "retType": "number"
                },
                "ri": {
                    "kind": 4,
                    "retType": "number"
                },
                "check": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "cond",
                            "type": "boolean"
                        }
                    ]
                }
            }
        },
        "sha": "f6e3ea260c7248332a50bb092b69668f8859b5f3055952db782e8684b9b2186c"
    },
    "libs/radio": {
        "apis": {
            "byQName": {
                "radio": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#E3008C",
                        "weight": 96,
                        "icon": "",
                        "jsDoc": "Communicate data using radio packets"
                    }
                },
                "radio.raiseEvent": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "radioRaiseEvent",
                        "block": "radio raise event|from source %src=control_event_source_id|with value %value=control_event_value_id",
                        "blockExternalInputs": "1",
                        "advanced": true,
                        "weight": 1,
                        "help": "radio/raise-event",
                        "inlineInputMode": "external",
                        "jsDoc": "Sends an event over radio to neigboring devices",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio raise event",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from source ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "src"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "radio.raise_event"
                },
                "radio.readRawPacket": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "Internal use only. Takes the next packet from the radio queue and returns its contents + RSSI in a Buffer"
                    },
                    "parameters": [],
                    "pyQName": "radio.read_raw_packet"
                },
                "radio.sendRawPacket": {
                    "kind": -3,
                    "attributes": {
                        "callingConvention": 1,
                        "async": "true",
                        "jsDoc": "Internal use only. Sends a raw packet through the radio (assumes RSSI appened to packet)"
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.send_raw_packet"
                },
                "radio.onDataReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-data-received",
                        "weight": 0,
                        "blockId": "radio_datagram_received_event",
                        "block": "radio on data received",
                        "blockGap": "8",
                        "deprecated": "true",
                        "blockHidden": true,
                        "jsDoc": "Used internally by the library.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio on data received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "radio.on_data_received"
                },
                "radio.setGroup": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "id": "1"
                        },
                        "help": "radio/set-group",
                        "weight": 100,
                        "blockId": "radio_set_group",
                        "block": "radio set group %ID",
                        "paramMin": {
                            "id": "0"
                        },
                        "paramMax": {
                            "id": "255"
                        },
                        "paramHelp": {
                            "id": "the group id between ``0`` and ``255``, eg: 1"
                        },
                        "jsDoc": "Sets the group id for radio communications. A micro:bit can only listen to one group ID at any time.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set group ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ID",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ID",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "id",
                            "description": "the group id between ``0`` and ``255``, eg: 1",
                            "default": "1",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_group"
                },
                "radio.setTransmitPower": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "help": "radio/set-transmit-power",
                        "weight": 9,
                        "blockGap": "8",
                        "blockId": "radio_set_transmit_power",
                        "block": "radio set transmit power %power",
                        "paramMin": {
                            "power": "0"
                        },
                        "paramMax": {
                            "power": "7"
                        },
                        "advanced": true,
                        "paramHelp": {
                            "power": "a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7"
                        },
                        "jsDoc": "Change the output power level of the transmitter to the given value.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set transmit power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "power",
                            "description": "a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7",
                            "default": "7",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "7"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_transmit_power"
                },
                "radio.setFrequencyBand": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/set-frequency-band",
                        "weight": 8,
                        "blockGap": "8",
                        "blockId": "radio_set_frequency_band",
                        "block": "radio set frequency band %band",
                        "paramMin": {
                            "band": "0"
                        },
                        "paramMax": {
                            "band": "83"
                        },
                        "advanced": true,
                        "paramHelp": {
                            "band": "a frequency band in the range 0 - 83. Each step is 1MHz wide, based at 2400MHz."
                        },
                        "jsDoc": "Change the transmission and reception band of the radio to the given channel",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set frequency band ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "band",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "band",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "band",
                            "description": "a frequency band in the range 0 - 83. Each step is 1MHz wide, based at 2400MHz.",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "83"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_frequency_band"
                },
                "RadioPacketProperty": {
                    "kind": 6,
                    "retType": "RadioPacketProperty",
                    "extendsTypes": [
                        "RadioPacketProperty",
                        "Number"
                    ]
                },
                "RadioPacketProperty.SignalStrength": {
                    "retType": "RadioPacketProperty.SignalStrength",
                    "attributes": {
                        "blockIdentity": "radio._packetProperty",
                        "block": "signal strength",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.SignalStrength",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.SIGNAL_STRENGTH"
                },
                "RadioPacketProperty.Time": {
                    "retType": "RadioPacketProperty.Time",
                    "attributes": {
                        "blockIdentity": "radio._packetProperty",
                        "block": "time",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "time",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.Time",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.TIME"
                },
                "RadioPacketProperty.SerialNumber": {
                    "retType": "RadioPacketProperty.SerialNumber",
                    "attributes": {
                        "block": "serial number",
                        "blockIdentity": "radio._packetProperty",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.SerialNumber",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.SERIAL_NUMBER"
                },
                "radio.PACKET_TYPE_NUMBER": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_VALUE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_STRING": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_BUFFER": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_DOUBLE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_DOUBLE_VALUE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.lastPacket": {
                    "kind": 4,
                    "retType": "radio.RadioPacket",
                    "pyQName": "radio.last_packet"
                },
                "radio.onReceivedNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-number",
                        "blockId": "radio_on_number_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedNumber: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedNumber",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_number"
                },
                "radio.onReceivedValue": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-value",
                        "blockId": "radio_on_value_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a key value pair.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(name: string, value: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_value"
                },
                "radio.onReceivedString": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-string",
                        "blockId": "radio_on_string_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedString: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedString",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_string"
                },
                "radio.onReceivedBuffer": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-buffer",
                        "blockHidden": true,
                        "blockId": "radio_on_buffer_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a buffer.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedBuffer: Buffer) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedBuffer",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_buffer"
                },
                "radio.receivedPacket": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-packet",
                        "weight": 11,
                        "blockGap": "16",
                        "blockId": "radio_received_packet",
                        "block": "received packet %type=radio_packet_property",
                        "paramHelp": {
                            "type": "the type of property to retrieve from the last packet"
                        },
                        "jsDoc": "Returns properties of the last radio packet received.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "received packet ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "shadowBlockId": "radio_packet_property",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "shadowBlockId": "radio_packet_property",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "type",
                            "description": "the type of property to retrieve from the last packet"
                        }
                    ],
                    "pyQName": "radio.received_packet"
                },
                "radio._packetProperty": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "type": "PacketProperty.time"
                        },
                        "blockId": "radio_packet_property",
                        "block": "%note",
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "paramHelp": {
                            "type": "the packet property type, eg: PacketProperty.time"
                        },
                        "jsDoc": "Gets a packet property.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "type",
                            "description": "the packet property type, eg: PacketProperty.time",
                            "type": "RadioPacketProperty",
                            "default": "PacketProperty.time",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "radio._packet_property"
                },
                "radio.RadioPacket": {
                    "kind": 8,
                    "retType": "radio.RadioPacket",
                    "extendsTypes": []
                },
                "radio.RadioPacket.getPacket": {
                    "kind": -1,
                    "retType": "radio.RadioPacket",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.RadioPacket.get_packet"
                },
                "radio.RadioPacket.mkPacket": {
                    "kind": -1,
                    "retType": "radio.RadioPacket",
                    "parameters": [
                        {
                            "name": "packetType"
                        }
                    ],
                    "pyQName": "radio.RadioPacket.mk_packet"
                },
                "radio.RadioPacket.signal": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.packetType": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.packet_type"
                },
                "radio.RadioPacket.time": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.time@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "radio.RadioPacket.serial": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.serial@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "radio.RadioPacket.stringPayload": {
                    "kind": -2,
                    "retType": "string",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.string_payload"
                },
                "radio.RadioPacket.stringPayload@set": {
                    "kind": -2,
                    "retType": "string",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.string_payload@set"
                },
                "radio.RadioPacket.numberPayload": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.number_payload"
                },
                "radio.RadioPacket.numberPayload@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.number_payload@set"
                },
                "radio.RadioPacket.bufferPayload": {
                    "kind": -2,
                    "retType": "Buffer",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.buffer_payload"
                },
                "radio.RadioPacket.bufferPayload@set": {
                    "kind": -2,
                    "retType": "Buffer",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.buffer_payload@set"
                },
                "radio.RadioPacket.hasString": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.has_string"
                },
                "radio.RadioPacket.hasNumber": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.has_number"
                },
                "radio.sendNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-number",
                        "weight": 60,
                        "blockId": "radio_datagram_send",
                        "block": "radio send number %value",
                        "blockGap": "8",
                        "jsDoc": "Broadcasts a number over radio to any connected micro:bit in the group.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "radio.send_number"
                },
                "radio.sendValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "name"
                        },
                        "help": "radio/send-value",
                        "weight": 59,
                        "blockId": "radio_datagram_send_value",
                        "block": "radio send|value %name|= %value",
                        "blockGap": "8",
                        "paramHelp": {
                            "name": "the field name (max 8 characters), eg: \"name\"",
                            "value": "the numeric value"
                        },
                        "jsDoc": "Broadcasts a name / value pair along with the device serial number\nand running time to any connected micro:bit in the group. The name can\ninclude no more than 8 characters.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "= ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "the field name (max 8 characters), eg: \"name\"",
                            "type": "string",
                            "default": "name"
                        },
                        {
                            "name": "value",
                            "description": "the numeric value"
                        }
                    ],
                    "pyQName": "radio.send_value"
                },
                "radio.sendString": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-string",
                        "weight": 58,
                        "blockId": "radio_datagram_send_string",
                        "block": "radio send string %msg",
                        "paramShadowOptions": {
                            "msg": {
                                "toString": "true"
                            }
                        },
                        "jsDoc": "Broadcasts a string along with the device serial number\nand running time to any connected micro:bit in the group.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "string",
                            "options": {
                                "fieldEditorOptions": {
                                    "value": {
                                        "toString": "true"
                                    }
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.send_string"
                },
                "radio.sendBuffer": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-buffer",
                        "weight": 57,
                        "advanced": true,
                        "jsDoc": "Broadcasts a buffer (up to 19 bytes long) along with the device serial number\nand running time to any connected micro:bit in the group."
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.send_buffer"
                },
                "radio.setTransmitSerialNumber": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "transmit": "true"
                        },
                        "help": "radio/set-transmit-serial-number",
                        "weight": 8,
                        "blockGap": "8",
                        "blockId": "radio_set_transmit_serial_number",
                        "block": "radio set transmit serial number %transmit",
                        "advanced": true,
                        "paramHelp": {
                            "transmit": "value indicating if the serial number is transmitted, eg: true"
                        },
                        "jsDoc": "Set the radio to transmit the serial number in each message.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set transmit serial number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "transmit",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "transmit",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "transmit",
                            "description": "value indicating if the serial number is transmitted, eg: true",
                            "type": "boolean",
                            "default": "true"
                        }
                    ],
                    "pyQName": "radio.set_transmit_serial_number"
                },
                "radio.Packet": {
                    "kind": 8,
                    "retType": "radio.Packet",
                    "extendsTypes": []
                },
                "radio.Packet.receivedNumber": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The number payload if a number was sent in this packet (via ``sendNumber()`` or ``sendValue()``)\nor 0 if this packet did not contain a number."
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_number"
                },
                "radio.Packet.receivedString": {
                    "kind": 2,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "The string payload if a string was sent in this packet (via ``sendString()`` or ``sendValue()``)\nor the empty string if this packet did not contain a string."
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_string"
                },
                "radio.Packet.receivedBuffer": {
                    "kind": 2,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "The buffer payload if a buffer was sent in this packet\nor the empty buffer"
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_buffer"
                },
                "radio.Packet.time": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The system time of the sender of the packet at the time the packet was sent."
                    },
                    "isInstance": true
                },
                "radio.Packet.serial": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The serial number of the sender of the packet or 0 if the sender did not sent their serial number."
                    },
                    "isInstance": true
                },
                "radio.Packet.signal": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The received signal strength indicator (RSSI) of the packet."
                    },
                    "isInstance": true
                },
                "radio.onDataPacketReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-data-packet-received",
                        "blockHandlerKey": "radioreceived",
                        "deprecated": "true",
                        "mutate": "objectdestructuring",
                        "mutateText": "Packet",
                        "mutateDefaults": "receivedNumber;receivedString:name,receivedNumber:value;receivedString",
                        "blockId": "radio_on_packet",
                        "block": "on radio received",
                        "blockGap": "8",
                        "jsDoc": "Deprecated. Use onDataReceived() instead\nRegisters code to run when the radio receives a packet. Also takes the\nreceived packet from the radio queue.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(packet: radio.Packet) => void"
                        }
                    ],
                    "pyQName": "radio.on_data_packet_received"
                },
                "radio.onReceivedNumberDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-number",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_number",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a number. Deprecated, use\nonReceivedNumber instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedNumber: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedNumber",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_number_deprecated"
                },
                "radio.onReceivedValueDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-value",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_value",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a key value pair. Deprecated, use\nonReceivedValue instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(name: string, value: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_value_deprecated"
                },
                "radio.onReceivedStringDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-string",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_string",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a string. Deprecated, use\nonReceivedString instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedString: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedString",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_string_deprecated"
                },
                "radio.onReceivedBufferDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-buffer",
                        "blockHandlerKey": "radioreceived",
                        "blockHidden": true,
                        "blockId": "radio_on_buffer",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a buffer. Deprecated, use\nonReceivedBuffer instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedBuffer: Buffer) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedBuffer",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_buffer_deprecated"
                },
                "radio.receivedNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-number",
                        "deprecated": "1",
                        "jsDoc": "Returns the number payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or 0 if that packet did not\ncontain a number."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_number"
                },
                "radio.receivedSerial": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-serial",
                        "deprecated": "1",
                        "jsDoc": "Returns the serial number of the sender micro:bit from the last packet taken\nfrom the radio queue (via ``receiveNumber``, ``receiveString``, etc) or 0 if\nthat packet did not send a serial number."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_serial"
                },
                "radio.receivedString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "radio/received-string",
                        "deprecated": "1",
                        "jsDoc": "Returns the string payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or the empty string if that\npacket did not contain a string."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_string"
                },
                "radio.receivedBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "help": "radio/received-buffer",
                        "deprecated": "1",
                        "jsDoc": "Returns the buffer payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or the empty string if that\npacket did not contain a string."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_buffer"
                },
                "radio.receivedTime": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-time",
                        "deprecated": "1",
                        "jsDoc": "Returns the system time of the sender micro:bit at the moment when it sent the\nlast packet taken from the radio queue (via ``receiveNumber``,\n``receiveString``, etc)."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_time"
                },
                "radio.receiveNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/receive-number",
                        "weight": 46,
                        "blockId": "radio_datagram_receive",
                        "block": "radio receive number",
                        "blockGap": "8",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and returns the packet's number\npayload or 0 if the packet did not contain a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio receive number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.receive_number"
                },
                "radio.receiveString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "blockId": "radio_datagram_receive_string",
                        "block": "radio receive string",
                        "blockGap": "8",
                        "weight": 44,
                        "help": "radio/receive-string",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and returns the packet's string\npayload or the empty string if the packet did not contain a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio receive string",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.receive_string"
                },
                "radio.receivedSignalStrength": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-signal-strength",
                        "weight": 40,
                        "blockId": "radio_datagram_rssi",
                        "block": "radio received signal strength",
                        "deprecated": "true",
                        "blockHidden": true,
                        "jsDoc": "Gets the received signal strength indicator (RSSI) from the last packet taken\nfrom the radio queue (via ``receiveNumber``, ``receiveString``, etc). Not supported in simulator.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio received signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.received_signal_strength"
                },
                "radio.writeValueToSerial": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/write-value-to-serial",
                        "weight": 3,
                        "blockId": "radio_write_value_serial",
                        "block": "radio write value to serial",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and and writes it to serial\nas JSON.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio write value to serial",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.write_value_to_serial"
                },
                "radio.writeReceivedPacketToSerial": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/write-received-packet-to-serial",
                        "weight": 3,
                        "blockId": "radio_write_packet_serial",
                        "block": "radio write received packet to serial",
                        "advanced": true,
                        "deprecated": "true",
                        "jsDoc": "Writes the last received packet to serial as JSON. This should be called\nwithin an ``onDataPacketReceived`` callback.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio write received packet to serial",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.write_received_packet_to_serial"
                }
            }
        },
        "sha": "755e556ac2cc9110a608e275031442e34865a13c124541d6da2ed88511c95c42"
    },
    "libs/devices": {
        "apis": {
            "byQName": {
                "bluetooth": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#007EF4",
                        "weight": 96,
                        "icon": "",
                        "jsDoc": "Support for additional Bluetooth services.\n\nSupport for additional Bluetooth services."
                    }
                },
                "bluetooth.startAccelerometerService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-accelerometer-service",
                        "blockId": "bluetooth_start_accelerometer_service",
                        "block": "bluetooth accelerometer service",
                        "parts": "bluetooth",
                        "weight": 90,
                        "blockGap": "8",
                        "jsDoc": "Starts the Bluetooth accelerometer service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth accelerometer service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_accelerometer_service"
                },
                "bluetooth.startButtonService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-button-service",
                        "blockId": "bluetooth_start_button_service",
                        "block": "bluetooth button service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 89,
                        "jsDoc": "Starts the Bluetooth button service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth button service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_button_service"
                },
                "bluetooth.startIOPinService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-io-pin-service",
                        "blockId": "bluetooth_start_io_pin_service",
                        "block": "bluetooth io pin service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 88,
                        "jsDoc": "Starts the Bluetooth IO pin service.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth io pin service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_io_pin_service"
                },
                "bluetooth.startLEDService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-led-service",
                        "blockId": "bluetooth_start_led_service",
                        "block": "bluetooth led service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 87,
                        "jsDoc": "Starts the Bluetooth LED service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth led service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_led_service"
                },
                "bluetooth.startTemperatureService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-temperature-service",
                        "blockId": "bluetooth_start_temperature_service",
                        "block": "bluetooth temperature service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 86,
                        "jsDoc": "Starts the Bluetooth temperature service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth temperature service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_temperature_service"
                },
                "bluetooth.startMagnetometerService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-magnetometer-service",
                        "blockId": "bluetooth_start_magnetometer_service",
                        "block": "bluetooth magnetometer service",
                        "parts": "bluetooth",
                        "weight": 85,
                        "jsDoc": "Starts the Bluetooth magnetometer service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth magnetometer service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_magnetometer_service"
                },
                "bluetooth.startUartService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-uart-service",
                        "blockId": "bluetooth_start_uart_service",
                        "block": "bluetooth uart service",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Starts the Bluetooth UART service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_uart_service"
                },
                "bluetooth.uartWriteBuffer": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Sends a buffer of data via Bluetooth UART"
                    },
                    "parameters": [
                        {
                            "name": "buffer",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_buffer"
                },
                "bluetooth.uartReadBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "Reads buffered UART data into a buffer"
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.uart_read_buffer"
                },
                "bluetooth.onUartDataReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-uart-data-received",
                        "weight": 18,
                        "blockId": "bluetooth_on_data_received",
                        "block": "bluetooth|on data received %delimiters=serial_delimiter_conv",
                        "paramHelp": {
                            "delimiters": "the characters to match received characters against."
                        },
                        "jsDoc": "Registers an event to be fired when one of the delimiter is matched.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "on data received ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "delimiters",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "delimiters",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "delimiters",
                            "description": "the characters to match received characters against.",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_uart_data_received"
                },
                "bluetooth.onBluetoothConnected": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-bluetooth-connected",
                        "weight": 20,
                        "blockId": "bluetooth_on_connected",
                        "block": "on bluetooth connected",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "paramHelp": {
                            "body": "Code to run when a Bluetooth connection is established"
                        },
                        "jsDoc": "Register code to run when the micro:bit is connected to over Bluetooth",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on bluetooth connected",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "Code to run when a Bluetooth connection is established",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_bluetooth_connected"
                },
                "bluetooth.onBluetoothDisconnected": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-bluetooth-disconnected",
                        "weight": 19,
                        "blockId": "bluetooth_on_disconnected",
                        "block": "on bluetooth disconnected",
                        "parts": "bluetooth",
                        "paramHelp": {
                            "body": "Code to run when a Bluetooth connection is lost"
                        },
                        "jsDoc": "Register code to run when a bluetooth connection to the micro:bit is lost",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on bluetooth disconnected",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "Code to run when a Bluetooth connection is lost",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_bluetooth_disconnected"
                },
                "bluetooth.advertiseUrl": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "url": "https://makecode.com",
                            "power": "7"
                        },
                        "blockId": "eddystone_advertise_url",
                        "block": "bluetooth advertise url %url|with power %power|connectable %connectable",
                        "parts": "bluetooth",
                        "weight": 11,
                        "blockGap": "8",
                        "help": "bluetooth/advertise-url",
                        "blockExternalInputs": "1",
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "url": "the url to transmit. Must be no longer than the supported eddystone url length, eg: \"https://makecode.com\"",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone URL",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth advertise url ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "url",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "connectable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "url",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "url",
                            "description": "the url to transmit. Must be no longer than the supported eddystone url length, eg: \"https://makecode.com\"",
                            "type": "string",
                            "default": "https://makecode.com"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_url"
                },
                "bluetooth.advertiseUidBuffer": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "parts": "bluetooth",
                        "weight": 12,
                        "advanced": true,
                        "paramHelp": {
                            "nsAndInstance": "16 bytes buffer of namespace (bytes 0-9) and instance (bytes 10-15)",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone UID"
                    },
                    "parameters": [
                        {
                            "name": "nsAndInstance",
                            "description": "16 bytes buffer of namespace (bytes 0-9) and instance (bytes 10-15)",
                            "type": "Buffer"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_uid_buffer"
                },
                "bluetooth.setTransmitPower": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7."
                        },
                        "parts": "bluetooth",
                        "weight": 5,
                        "help": "bluetooth/set-transmit-power",
                        "advanced": true,
                        "blockId": "bluetooth_settransmitpower",
                        "block": "bluetooth set transmit power %power",
                        "paramHelp": {
                            "power": "power level between 0 (minimal) and 7 (maximum), eg: 7."
                        },
                        "jsDoc": "Sets the bluetooth transmit power between 0 (minimal) and 7 (maximum).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth set transmit power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "power",
                            "description": "power level between 0 (minimal) and 7 (maximum), eg: 7.",
                            "default": "7."
                        }
                    ],
                    "pyQName": "bluetooth.set_transmit_power"
                },
                "bluetooth.stopAdvertising": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "eddystone_stop_advertising",
                        "block": "bluetooth stop advertising",
                        "parts": "bluetooth",
                        "weight": 10,
                        "help": "bluetooth/stop-advertising",
                        "advanced": true,
                        "jsDoc": "Stops advertising Eddystone end points",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth stop advertising",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.stop_advertising"
                },
                "bluetooth.NEW_LINE": {
                    "kind": 4,
                    "retType": "string"
                },
                "bluetooth.__log": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Internal use"
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "string"
                        }
                    ]
                },
                "bluetooth.uartWriteString": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-string",
                        "weight": 80,
                        "blockId": "bluetooth_uart_write",
                        "block": "bluetooth uart|write string %data",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_string"
                },
                "bluetooth.uartWriteLine": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-line",
                        "weight": 79,
                        "blockId": "bluetooth_uart_line",
                        "block": "bluetooth uart|write line %data",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write line ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_line"
                },
                "bluetooth.uartWriteNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-number",
                        "weight": 89,
                        "blockGap": "8",
                        "advanced": true,
                        "blockId": "bluetooth_uart_writenumber",
                        "block": "bluetooth uart|write number %value",
                        "jsDoc": "Prints a numeric value to the serial",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_number"
                },
                "bluetooth.uartWriteValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "x"
                        },
                        "weight": 78,
                        "help": "bluetooth/uart-write-value",
                        "advanced": true,
                        "blockId": "bluetooth_uart_writevalue",
                        "block": "bluetooth uart|write value %name|= %value",
                        "paramHelp": {
                            "name": "name of the value stream, eg: x",
                            "value": "to write"
                        },
                        "jsDoc": "Writes a ``name: value`` pair line to the serial.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "= ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "name of the value stream, eg: x",
                            "type": "string",
                            "default": "x"
                        },
                        {
                            "name": "value",
                            "description": "to write"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_value"
                },
                "bluetooth.uartReadUntil": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "bluetooth/uart-read-until",
                        "weight": 75,
                        "blockId": "bluetooth_uart_read",
                        "block": "bluetooth uart|read until %del=serial_delimiter_conv",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Reads from the Bluetooth UART service buffer, returning its contents when the specified delimiter character is encountered.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "read until ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "del",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "del",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "del",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_read_until"
                },
                "bluetooth.advertiseUid": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "blockId": "eddystone_advertise_uid",
                        "block": "bluetooth advertise UID|namespace (bytes 6-9)%ns|instance (bytes 2-6)%instance|with power %power|connectable %connectable",
                        "parts": "bluetooth",
                        "weight": 12,
                        "blockGap": "8",
                        "help": "bluetooth/advertise-uid",
                        "blockExternalInputs": "1",
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "ns": "4 last bytes of the namespace uid",
                            "instance": "4 last bytes of the instance uid",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone UID",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth advertise UID",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "namespace (bytes 6-9)",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ns",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "instance (bytes 2-6)",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "instance",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "connectable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ns",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "instance",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ns",
                            "description": "4 last bytes of the namespace uid"
                        },
                        {
                            "name": "instance",
                            "description": "4 last bytes of the instance uid"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_uid"
                },
                "MesCameraEvent": {
                    "kind": 6,
                    "retType": "MesCameraEvent",
                    "extendsTypes": [
                        "MesCameraEvent",
                        "Number"
                    ]
                },
                "MesCameraEvent.TakePhoto": {
                    "retType": "MesCameraEvent.TakePhoto",
                    "attributes": {
                        "block": "take photo",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "take photo",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesCameraEvent.TakePhoto",
                        "Number"
                    ],
                    "pyQName": "MesCameraEvent.TAKE_PHOTO"
                },
                "MesCameraEvent.StartVideoCapture": {
                    "retType": "MesCameraEvent.StartVideoCapture",
                    "attributes": {
                        "block": "start video capture",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "start video capture",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesCameraEvent.StartVideoCapture",
                        "Number"
                    ],
                    "pyQName": "MesCameraEvent.START_VIDEO_CAPTURE"
                },
                "MesCameraEvent.StopVideoCapture": {
                    "retType": "MesCameraEvent.StopVideoCapture",
                    "attributes": {
                        "block": "stop video capture",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "stop video capture",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesCameraEvent.StopVideoCapture",
                        "Number"
                    ],
                    "pyQName": "MesCameraEvent.STOP_VIDEO_CAPTURE"
                },
                "MesCameraEvent.ToggleFrontRear": {
                    "retType": "MesCameraEvent.ToggleFrontRear",
                    "attributes": {
                        "block": "toggle front-rear",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "toggle front-rear",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesCameraEvent.ToggleFrontRear",
                        "Number"
                    ],
                    "pyQName": "MesCameraEvent.TOGGLE_FRONT_REAR"
                },
                "MesCameraEvent.LaunchPhotoMode": {
                    "retType": "MesCameraEvent.LaunchPhotoMode",
                    "attributes": {
                        "block": "launch photo mode",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "launch photo mode",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesCameraEvent.LaunchPhotoMode",
                        "Number"
                    ],
                    "pyQName": "MesCameraEvent.LAUNCH_PHOTO_MODE"
                },
                "MesCameraEvent.LaunchVideoMode": {
                    "retType": "MesCameraEvent.LaunchVideoMode",
                    "attributes": {
                        "block": "launch video mode",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "launch video mode",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesCameraEvent.LaunchVideoMode",
                        "Number"
                    ],
                    "pyQName": "MesCameraEvent.LAUNCH_VIDEO_MODE"
                },
                "MesCameraEvent.StopPhotoMode": {
                    "retType": "MesCameraEvent.StopPhotoMode",
                    "attributes": {
                        "block": "stop photo mode",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "stop photo mode",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesCameraEvent.StopPhotoMode",
                        "Number"
                    ],
                    "pyQName": "MesCameraEvent.STOP_PHOTO_MODE"
                },
                "MesCameraEvent.StopVideoMode": {
                    "retType": "MesCameraEvent.StopVideoMode",
                    "attributes": {
                        "block": "stop video mode",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "stop video mode",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesCameraEvent.StopVideoMode",
                        "Number"
                    ],
                    "pyQName": "MesCameraEvent.STOP_VIDEO_MODE"
                },
                "MesAlertEvent": {
                    "kind": 6,
                    "retType": "MesAlertEvent",
                    "extendsTypes": [
                        "MesAlertEvent",
                        "Number"
                    ]
                },
                "MesAlertEvent.DisplayToast": {
                    "retType": "MesAlertEvent.DisplayToast",
                    "attributes": {
                        "block": "display toast",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "display toast",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.DisplayToast",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.DISPLAY_TOAST"
                },
                "MesAlertEvent.Vibrate": {
                    "retType": "MesAlertEvent.Vibrate",
                    "attributes": {
                        "block": "vibrate",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "vibrate",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.Vibrate",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.VIBRATE"
                },
                "MesAlertEvent.PlaySound": {
                    "retType": "MesAlertEvent.PlaySound",
                    "attributes": {
                        "block": "play sound",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "play sound",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.PlaySound",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.PLAY_SOUND"
                },
                "MesAlertEvent.PlayRingtone": {
                    "retType": "MesAlertEvent.PlayRingtone",
                    "attributes": {
                        "block": "play ring tone",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "play ring tone",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.PlayRingtone",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.PLAY_RINGTONE"
                },
                "MesAlertEvent.FindMyPhone": {
                    "retType": "MesAlertEvent.FindMyPhone",
                    "attributes": {
                        "block": "find my phone",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "find my phone",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.FindMyPhone",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.FIND_MY_PHONE"
                },
                "MesAlertEvent.RingAlarm": {
                    "retType": "MesAlertEvent.RingAlarm",
                    "attributes": {
                        "block": "ring alarm",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ring alarm",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.RingAlarm",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.RING_ALARM"
                },
                "MesAlertEvent.RingAlarm2": {
                    "retType": "MesAlertEvent.RingAlarm2",
                    "attributes": {
                        "block": "ring alarm 2",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ring alarm 2",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.RingAlarm2",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.RING_ALARM2"
                },
                "MesAlertEvent.RingAlarm3": {
                    "retType": "MesAlertEvent.RingAlarm3",
                    "attributes": {
                        "block": "ring alarm 3",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ring alarm 3",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.RingAlarm3",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.RING_ALARM3"
                },
                "MesAlertEvent.RingAlarm4": {
                    "retType": "MesAlertEvent.RingAlarm4",
                    "attributes": {
                        "block": "ring alarm 4",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ring alarm 4",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.RingAlarm4",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.RING_ALARM4"
                },
                "MesAlertEvent.RingAlarm5": {
                    "retType": "MesAlertEvent.RingAlarm5",
                    "attributes": {
                        "block": "ring alarm 5",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ring alarm 5",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.RingAlarm5",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.RING_ALARM5"
                },
                "MesAlertEvent.RingAlarm6": {
                    "retType": "MesAlertEvent.RingAlarm6",
                    "attributes": {
                        "block": "ring alarm 6",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "ring alarm 6",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesAlertEvent.RingAlarm6",
                        "Number"
                    ],
                    "pyQName": "MesAlertEvent.RING_ALARM6"
                },
                "MesDeviceInfo": {
                    "kind": 6,
                    "retType": "MesDeviceInfo",
                    "extendsTypes": [
                        "MesDeviceInfo",
                        "Number"
                    ]
                },
                "MesDeviceInfo.IncomingCall": {
                    "retType": "MesDeviceInfo.IncomingCall",
                    "attributes": {
                        "block": "incoming call",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "incoming call",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDeviceInfo.IncomingCall",
                        "Number"
                    ],
                    "pyQName": "MesDeviceInfo.INCOMING_CALL"
                },
                "MesDeviceInfo.IncomingMessage": {
                    "retType": "MesDeviceInfo.IncomingMessage",
                    "attributes": {
                        "block": "incoming message",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "incoming message",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDeviceInfo.IncomingMessage",
                        "Number"
                    ],
                    "pyQName": "MesDeviceInfo.INCOMING_MESSAGE"
                },
                "MesDeviceInfo.OrientationLandscape": {
                    "retType": "MesDeviceInfo.OrientationLandscape",
                    "attributes": {
                        "block": "orientation landscape",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "orientation landscape",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDeviceInfo.OrientationLandscape",
                        "Number"
                    ],
                    "pyQName": "MesDeviceInfo.ORIENTATION_LANDSCAPE"
                },
                "MesDeviceInfo.OrientationPortrait": {
                    "retType": "MesDeviceInfo.OrientationPortrait",
                    "attributes": {
                        "block": "orientation portrait",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "orientation portrait",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDeviceInfo.OrientationPortrait",
                        "Number"
                    ],
                    "pyQName": "MesDeviceInfo.ORIENTATION_PORTRAIT"
                },
                "MesDeviceInfo.Shaken": {
                    "retType": "MesDeviceInfo.Shaken",
                    "attributes": {
                        "block": "shaken",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "shaken",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDeviceInfo.Shaken",
                        "Number"
                    ],
                    "pyQName": "MesDeviceInfo.SHAKEN"
                },
                "MesDeviceInfo.DisplayOff": {
                    "retType": "MesDeviceInfo.DisplayOff",
                    "attributes": {
                        "block": "display off",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "display off",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDeviceInfo.DisplayOff",
                        "Number"
                    ],
                    "pyQName": "MesDeviceInfo.DISPLAY_OFF"
                },
                "MesDeviceInfo.DisplayOn": {
                    "retType": "MesDeviceInfo.DisplayOn",
                    "attributes": {
                        "block": "display on",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "display on",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesDeviceInfo.DisplayOn",
                        "Number"
                    ],
                    "pyQName": "MesDeviceInfo.DISPLAY_ON"
                },
                "MesRemoteControlEvent": {
                    "kind": 6,
                    "retType": "MesRemoteControlEvent",
                    "extendsTypes": [
                        "MesRemoteControlEvent",
                        "Number"
                    ]
                },
                "MesRemoteControlEvent.play": {
                    "retType": "MesRemoteControlEvent.play",
                    "attributes": {
                        "block": "play",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "play",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.play",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.PLAY"
                },
                "MesRemoteControlEvent.pause": {
                    "retType": "MesRemoteControlEvent.pause",
                    "attributes": {
                        "block": "pause",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "pause",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.pause",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.PAUSE"
                },
                "MesRemoteControlEvent.stop": {
                    "retType": "MesRemoteControlEvent.stop",
                    "attributes": {
                        "block": "stop",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "stop",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.stop",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.STOP"
                },
                "MesRemoteControlEvent.nextTrack": {
                    "retType": "MesRemoteControlEvent.nextTrack",
                    "attributes": {
                        "block": "next track",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "next track",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.nextTrack",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.NEXT_TRACK"
                },
                "MesRemoteControlEvent.previousTrack": {
                    "retType": "MesRemoteControlEvent.previousTrack",
                    "attributes": {
                        "block": "previous track",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "previous track",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.previousTrack",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.PREVIOUS_TRACK"
                },
                "MesRemoteControlEvent.forward": {
                    "retType": "MesRemoteControlEvent.forward",
                    "attributes": {
                        "block": "forward",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "forward",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.forward",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.FORWARD"
                },
                "MesRemoteControlEvent.rewind": {
                    "retType": "MesRemoteControlEvent.rewind",
                    "attributes": {
                        "block": "rewind",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "rewind",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.rewind",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.REWIND"
                },
                "MesRemoteControlEvent.volumeUp": {
                    "retType": "MesRemoteControlEvent.volumeUp",
                    "attributes": {
                        "block": "volume up",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "volume up",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.volumeUp",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.VOLUME_UP"
                },
                "MesRemoteControlEvent.volumeDown": {
                    "retType": "MesRemoteControlEvent.volumeDown",
                    "attributes": {
                        "block": "volume down",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "volume down",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "MesRemoteControlEvent.volumeDown",
                        "Number"
                    ],
                    "pyQName": "MesRemoteControlEvent.VOLUME_DOWN"
                },
                "devices": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#008272",
                        "weight": 80,
                        "icon": "",
                        "jsDoc": "Control a phone with the BBC micro:bit via Bluetooth."
                    }
                },
                "devices.signalStrength": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "devices/signal-strength",
                        "weight": 24,
                        "blockId": "devices_signal_strength",
                        "block": "signal strength",
                        "blockGap": "14",
                        "icon": "",
                        "jsDoc": "Returns the last signal strength reported by the paired device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "devices.signal_strength"
                },
                "devices.onSignalStrengthChanged": {
                    "kind": -3,
                    "attributes": {
                        "weight": 23,
                        "help": "devices/on-signal-strength-changed",
                        "blockId": "devices_signal_strength_changed_event",
                        "block": "on signal strength changed",
                        "icon": "",
                        "paramHelp": {
                            "body": "Code run when the signal strength changes."
                        },
                        "jsDoc": "Registers code to run when the device notifies about a change of signal strength.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on signal strength changed",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "Code run when the signal strength changes.",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "devices.on_signal_strength_changed"
                },
                "devices.tellCameraTo": {
                    "kind": -3,
                    "attributes": {
                        "weight": 30,
                        "help": "devices/tell-camera-to",
                        "blockId": "devices_camera",
                        "icon": "",
                        "block": "tell camera to|%property",
                        "blockGap": "8",
                        "paramHelp": {
                            "event": "event description"
                        },
                        "jsDoc": "Sends a ``camera`` command to the parent device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "tell camera to",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "event",
                            "description": "event description",
                            "type": "MesCameraEvent",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "devices.tell_camera_to"
                },
                "devices.tellRemoteControlTo": {
                    "kind": -3,
                    "attributes": {
                        "weight": 29,
                        "help": "devices/tell-remote-control-to",
                        "blockId": "devices_remote_control",
                        "block": "tell remote control to|%property",
                        "blockGap": "14",
                        "icon": "",
                        "paramHelp": {
                            "event": "event description"
                        },
                        "jsDoc": "Sends a ``remote control`` command to the parent device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "tell remote control to",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "event",
                            "description": "event description",
                            "type": "MesRemoteControlEvent",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "devices.tell_remote_control_to"
                },
                "devices.raiseAlertTo": {
                    "kind": -3,
                    "attributes": {
                        "weight": 27,
                        "help": "devices/raise-alert-to",
                        "blockId": "devices_alert",
                        "block": "raise alert to|%property",
                        "icon": "",
                        "paramHelp": {
                            "event": "event description"
                        },
                        "jsDoc": "Sends an ``alert`` command to the parent device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "raise alert to",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "property",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "event",
                            "description": "event description",
                            "type": "MesAlertEvent",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "devices.raise_alert_to"
                },
                "devices.onNotified": {
                    "kind": -3,
                    "attributes": {
                        "help": "devices/on-notified",
                        "weight": 26,
                        "blockId": "devices_device_info_event",
                        "block": "on notified|%event",
                        "icon": "",
                        "paramHelp": {
                            "event": "event description",
                            "body": "code handler when event is triggered"
                        },
                        "jsDoc": "Registers code to run when the device notifies about a particular event.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on notified",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "event",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "event",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "event",
                            "description": "event description",
                            "type": "MesDeviceInfo",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "description": "code handler when event is triggered",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "devices.on_notified"
                },
                "devices.onGamepadButton": {
                    "kind": -3,
                    "attributes": {
                        "help": "devices/on-gamepad-button",
                        "weight": 25,
                        "blockId": "devices_gamepad_event",
                        "block": "on gamepad button|%NAME",
                        "icon": "",
                        "paramHelp": {
                            "name": "button name",
                            "body": "code to run when button is pressed"
                        },
                        "jsDoc": "Register code to run when the micro:bit receives a command from the paired gamepad.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on gamepad button",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "NAME",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "button name",
                            "type": "MesDpadButtonInfo",
                            "isEnum": true
                        },
                        {
                            "name": "body",
                            "description": "code to run when button is pressed",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "devices.on_gamepad_button"
                }
            }
        },
        "sha": "86c7b314d0a38ee34fb164282a2aac84de47647d4b887b8f1c473110f4d18b84"
    },
    "libs/bluetooth": {
        "apis": {
            "byQName": {
                "bluetooth": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#007EF4",
                        "weight": 96,
                        "icon": "",
                        "jsDoc": "Support for additional Bluetooth services.\n\nSupport for additional Bluetooth services."
                    }
                },
                "bluetooth.startAccelerometerService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-accelerometer-service",
                        "blockId": "bluetooth_start_accelerometer_service",
                        "block": "bluetooth accelerometer service",
                        "parts": "bluetooth",
                        "weight": 90,
                        "blockGap": "8",
                        "jsDoc": "Starts the Bluetooth accelerometer service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth accelerometer service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_accelerometer_service"
                },
                "bluetooth.startButtonService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-button-service",
                        "blockId": "bluetooth_start_button_service",
                        "block": "bluetooth button service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 89,
                        "jsDoc": "Starts the Bluetooth button service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth button service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_button_service"
                },
                "bluetooth.startIOPinService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-io-pin-service",
                        "blockId": "bluetooth_start_io_pin_service",
                        "block": "bluetooth io pin service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 88,
                        "jsDoc": "Starts the Bluetooth IO pin service.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth io pin service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_io_pin_service"
                },
                "bluetooth.startLEDService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-led-service",
                        "blockId": "bluetooth_start_led_service",
                        "block": "bluetooth led service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 87,
                        "jsDoc": "Starts the Bluetooth LED service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth led service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_led_service"
                },
                "bluetooth.startTemperatureService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-temperature-service",
                        "blockId": "bluetooth_start_temperature_service",
                        "block": "bluetooth temperature service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 86,
                        "jsDoc": "Starts the Bluetooth temperature service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth temperature service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_temperature_service"
                },
                "bluetooth.startMagnetometerService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-magnetometer-service",
                        "blockId": "bluetooth_start_magnetometer_service",
                        "block": "bluetooth magnetometer service",
                        "parts": "bluetooth",
                        "weight": 85,
                        "jsDoc": "Starts the Bluetooth magnetometer service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth magnetometer service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_magnetometer_service"
                },
                "bluetooth.startUartService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-uart-service",
                        "blockId": "bluetooth_start_uart_service",
                        "block": "bluetooth uart service",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Starts the Bluetooth UART service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_uart_service"
                },
                "bluetooth.uartWriteBuffer": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Sends a buffer of data via Bluetooth UART"
                    },
                    "parameters": [
                        {
                            "name": "buffer",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_buffer"
                },
                "bluetooth.uartReadBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "Reads buffered UART data into a buffer"
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.uart_read_buffer"
                },
                "bluetooth.onUartDataReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-uart-data-received",
                        "weight": 18,
                        "blockId": "bluetooth_on_data_received",
                        "block": "bluetooth|on data received %delimiters=serial_delimiter_conv",
                        "paramHelp": {
                            "delimiters": "the characters to match received characters against."
                        },
                        "jsDoc": "Registers an event to be fired when one of the delimiter is matched.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "on data received ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "delimiters",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "delimiters",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "delimiters",
                            "description": "the characters to match received characters against.",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_uart_data_received"
                },
                "bluetooth.onBluetoothConnected": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-bluetooth-connected",
                        "weight": 20,
                        "blockId": "bluetooth_on_connected",
                        "block": "on bluetooth connected",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "paramHelp": {
                            "body": "Code to run when a Bluetooth connection is established"
                        },
                        "jsDoc": "Register code to run when the micro:bit is connected to over Bluetooth",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on bluetooth connected",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "Code to run when a Bluetooth connection is established",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_bluetooth_connected"
                },
                "bluetooth.onBluetoothDisconnected": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-bluetooth-disconnected",
                        "weight": 19,
                        "blockId": "bluetooth_on_disconnected",
                        "block": "on bluetooth disconnected",
                        "parts": "bluetooth",
                        "paramHelp": {
                            "body": "Code to run when a Bluetooth connection is lost"
                        },
                        "jsDoc": "Register code to run when a bluetooth connection to the micro:bit is lost",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on bluetooth disconnected",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "Code to run when a Bluetooth connection is lost",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_bluetooth_disconnected"
                },
                "bluetooth.advertiseUrl": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "url": "https://makecode.com",
                            "power": "7"
                        },
                        "blockId": "eddystone_advertise_url",
                        "block": "bluetooth advertise url %url|with power %power|connectable %connectable",
                        "parts": "bluetooth",
                        "weight": 11,
                        "blockGap": "8",
                        "help": "bluetooth/advertise-url",
                        "blockExternalInputs": "1",
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "url": "the url to transmit. Must be no longer than the supported eddystone url length, eg: \"https://makecode.com\"",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone URL",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth advertise url ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "url",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "connectable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "url",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "url",
                            "description": "the url to transmit. Must be no longer than the supported eddystone url length, eg: \"https://makecode.com\"",
                            "type": "string",
                            "default": "https://makecode.com"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_url"
                },
                "bluetooth.advertiseUidBuffer": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "parts": "bluetooth",
                        "weight": 12,
                        "advanced": true,
                        "paramHelp": {
                            "nsAndInstance": "16 bytes buffer of namespace (bytes 0-9) and instance (bytes 10-15)",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone UID"
                    },
                    "parameters": [
                        {
                            "name": "nsAndInstance",
                            "description": "16 bytes buffer of namespace (bytes 0-9) and instance (bytes 10-15)",
                            "type": "Buffer"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_uid_buffer"
                },
                "bluetooth.setTransmitPower": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7."
                        },
                        "parts": "bluetooth",
                        "weight": 5,
                        "help": "bluetooth/set-transmit-power",
                        "advanced": true,
                        "blockId": "bluetooth_settransmitpower",
                        "block": "bluetooth set transmit power %power",
                        "paramHelp": {
                            "power": "power level between 0 (minimal) and 7 (maximum), eg: 7."
                        },
                        "jsDoc": "Sets the bluetooth transmit power between 0 (minimal) and 7 (maximum).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth set transmit power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "power",
                            "description": "power level between 0 (minimal) and 7 (maximum), eg: 7.",
                            "default": "7."
                        }
                    ],
                    "pyQName": "bluetooth.set_transmit_power"
                },
                "bluetooth.stopAdvertising": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "eddystone_stop_advertising",
                        "block": "bluetooth stop advertising",
                        "parts": "bluetooth",
                        "weight": 10,
                        "help": "bluetooth/stop-advertising",
                        "advanced": true,
                        "jsDoc": "Stops advertising Eddystone end points",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth stop advertising",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.stop_advertising"
                },
                "bluetooth.NEW_LINE": {
                    "kind": 4,
                    "retType": "string"
                },
                "bluetooth.__log": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Internal use"
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "string"
                        }
                    ]
                },
                "bluetooth.uartWriteString": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-string",
                        "weight": 80,
                        "blockId": "bluetooth_uart_write",
                        "block": "bluetooth uart|write string %data",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_string"
                },
                "bluetooth.uartWriteLine": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-line",
                        "weight": 79,
                        "blockId": "bluetooth_uart_line",
                        "block": "bluetooth uart|write line %data",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write line ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_line"
                },
                "bluetooth.uartWriteNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-number",
                        "weight": 89,
                        "blockGap": "8",
                        "advanced": true,
                        "blockId": "bluetooth_uart_writenumber",
                        "block": "bluetooth uart|write number %value",
                        "jsDoc": "Prints a numeric value to the serial",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_number"
                },
                "bluetooth.uartWriteValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "x"
                        },
                        "weight": 78,
                        "help": "bluetooth/uart-write-value",
                        "advanced": true,
                        "blockId": "bluetooth_uart_writevalue",
                        "block": "bluetooth uart|write value %name|= %value",
                        "paramHelp": {
                            "name": "name of the value stream, eg: x",
                            "value": "to write"
                        },
                        "jsDoc": "Writes a ``name: value`` pair line to the serial.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "= ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "name of the value stream, eg: x",
                            "type": "string",
                            "default": "x"
                        },
                        {
                            "name": "value",
                            "description": "to write"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_value"
                },
                "bluetooth.uartReadUntil": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "bluetooth/uart-read-until",
                        "weight": 75,
                        "blockId": "bluetooth_uart_read",
                        "block": "bluetooth uart|read until %del=serial_delimiter_conv",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Reads from the Bluetooth UART service buffer, returning its contents when the specified delimiter character is encountered.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "read until ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "del",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "del",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "del",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_read_until"
                },
                "bluetooth.advertiseUid": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "blockId": "eddystone_advertise_uid",
                        "block": "bluetooth advertise UID|namespace (bytes 6-9)%ns|instance (bytes 2-6)%instance|with power %power|connectable %connectable",
                        "parts": "bluetooth",
                        "weight": 12,
                        "blockGap": "8",
                        "help": "bluetooth/advertise-uid",
                        "blockExternalInputs": "1",
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "ns": "4 last bytes of the namespace uid",
                            "instance": "4 last bytes of the instance uid",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone UID",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth advertise UID",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "namespace (bytes 6-9)",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ns",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "instance (bytes 2-6)",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "instance",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "connectable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ns",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "instance",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ns",
                            "description": "4 last bytes of the namespace uid"
                        },
                        {
                            "name": "instance",
                            "description": "4 last bytes of the instance uid"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_uid"
                }
            }
        },
        "sha": "4ab2cf08a4079e44d4d1bd160ad6ee9437e15a0eed204b0d030b4e8f38aa0ae8"
    },
    "libs/servo": {
        "apis": {
            "byQName": {
                "servos": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#03AA74",
                        "weight": 88,
                        "icon": "",
                        "blockGap": "8",
                        "groups": [
                            "Positional",
                            "Continuous",
                            "Configuration"
                        ],
                        "jsDoc": "Control micro servos\n\nControl micro servos"
                    }
                },
                "servos.Servo": {
                    "kind": 8,
                    "retType": "servos.Servo",
                    "attributes": {
                        "fixedInstances": "true"
                    },
                    "extendsTypes": [
                        "servos.Servo"
                    ]
                },
                "servos.Servo.__constructor": {
                    "kind": -3,
                    "parameters": [],
                    "isInstance": true
                },
                "servos.Servo.setAngle": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "degrees": "90"
                        },
                        "weight": 100,
                        "help": "servos/set-angle",
                        "blockId": "servoservosetangle",
                        "block": "set %servo angle to %degrees=protractorPicker °",
                        "explicitDefaults": [
                            "degrees"
                        ],
                        "paramFieldEditor": {
                            "servo": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "servo": {
                                "width": "220",
                                "columns": "2"
                            }
                        },
                        "blockGap": "8",
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ],
                        "group": "Positional",
                        "jsDoc": "Set the servo angle",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " angle to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "degrees",
                                    "shadowBlockId": "protractorPicker",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " °",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "degrees",
                                    "shadowBlockId": "protractorPicker",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "degrees",
                            "initializer": "90",
                            "default": "90"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "servos.Servo.set_angle"
                },
                "servos.Servo.angle": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "servos.Servo.run": {
                    "kind": -1,
                    "attributes": {
                        "weight": 99,
                        "help": "servos/run",
                        "blockId": "servoservorun",
                        "block": "continuous %servo run at %speed=speedPicker \\%",
                        "paramFieldEditor": {
                            "servo": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "servo": {
                                "width": "220",
                                "columns": "2"
                            }
                        },
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ],
                        "group": "Continuous",
                        "blockGap": "8",
                        "paramHelp": {
                            "speed": "the throttle of the motor from -100% to 100%"
                        },
                        "jsDoc": "Set the throttle on a continuous servo",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "continuous ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " run at ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "shadowBlockId": "speedPicker",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " %",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "speed",
                                    "shadowBlockId": "speedPicker",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "speed",
                            "description": "the throttle of the motor from -100% to 100%"
                        }
                    ],
                    "isInstance": true
                },
                "servos.Servo.setPulse": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "micros": "1500"
                        },
                        "weight": 10,
                        "help": "servos/set-pulse",
                        "blockId": "servoservosetpulse",
                        "block": "set %servo pulse to %micros μs",
                        "paramMin": {
                            "micros": "500"
                        },
                        "paramMax": {
                            "micros": "2500"
                        },
                        "explicitDefaults": [
                            "micros"
                        ],
                        "paramFieldEditor": {
                            "servo": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "servo": {
                                "width": "220",
                                "columns": "2"
                            }
                        },
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ],
                        "group": "Configuration",
                        "blockGap": "8",
                        "paramHelp": {
                            "micros": "the width of the pulse in microseconds"
                        },
                        "jsDoc": "Set the pulse width to the servo in microseconds",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " pulse to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "micros",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " μs",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "micros",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "micros",
                            "description": "the width of the pulse in microseconds",
                            "initializer": "1500",
                            "default": "1500",
                            "options": {
                                "min": {
                                    "value": "500"
                                },
                                "max": {
                                    "value": "2500"
                                }
                            }
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "servos.Servo.set_pulse"
                },
                "servos.Servo.stop": {
                    "kind": -1,
                    "attributes": {
                        "weight": 10,
                        "help": "servos/stop",
                        "blockId": "servoservostop",
                        "block": "stop %servo",
                        "paramFieldEditor": {
                            "servo": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "servo": {
                                "width": "220",
                                "columns": "2"
                            }
                        },
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ],
                        "group": "Continuous",
                        "blockGap": "8",
                        "jsDoc": "Stop sending commands to the servo so that its rotation will stop at the current position.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "stop ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [],
                    "isInstance": true
                },
                "servos.Servo.minAngle": {
                    "kind": -2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Gets the minimum angle for the servo"
                    },
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "servos.Servo.min_angle"
                },
                "servos.Servo.maxAngle": {
                    "kind": -2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "Gets the maximum angle for the servo"
                    },
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "servos.Servo.max_angle"
                },
                "servos.Servo.setRange": {
                    "kind": -1,
                    "attributes": {
                        "paramDefl": {
                            "maxAngle": "180"
                        },
                        "help": "servos/set-range",
                        "blockId": "servosetrange",
                        "block": "set %servo range from %minAngle to %maxAngle",
                        "paramMin": {
                            "minAngle": "0",
                            "maxAngle": "90"
                        },
                        "paramMax": {
                            "minAngle": "90",
                            "maxAngle": "180"
                        },
                        "explicitDefaults": [
                            "maxAngle"
                        ],
                        "paramFieldEditor": {
                            "servo": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "servo": {
                                "width": "220",
                                "columns": "2"
                            }
                        },
                        "parts": "microservo",
                        "trackArgs": [
                            0
                        ],
                        "group": "Configuration",
                        "blockGap": "8",
                        "paramHelp": {
                            "minAngle": "the minimum angle from 0 to 90",
                            "maxAngle": "the maximum angle from 90 to 180"
                        },
                        "jsDoc": "Set the possible rotation range angles for the servo between 0 and 180",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " range from ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "minAngle",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " to ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "maxAngle",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "minAngle",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "maxAngle",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "minAngle",
                            "description": "the minimum angle from 0 to 90",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "90"
                                }
                            }
                        },
                        {
                            "name": "maxAngle",
                            "description": "the maximum angle from 90 to 180",
                            "initializer": "180",
                            "default": "180",
                            "options": {
                                "min": {
                                    "value": "90"
                                },
                                "max": {
                                    "value": "180"
                                }
                            }
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "servos.Servo.set_range"
                },
                "servos.Servo.setStopOnNeutral": {
                    "kind": -1,
                    "attributes": {
                        "help": "servos/set-stop-on-neutral",
                        "blockId": "servostoponneutral",
                        "block": "set %servo stop on neutral %enabled",
                        "_shadowOverrides": {
                            "enabled": "toggleOnOff"
                        },
                        "group": "Configuration",
                        "blockGap": "8",
                        "paramFieldEditor": {
                            "servo": "gridpicker"
                        },
                        "paramFieldEditorOptions": {
                            "servo": {
                                "width": "220",
                                "columns": "2"
                            }
                        },
                        "paramHelp": {
                            "on": "true to enable this mode"
                        },
                        "jsDoc": "Set a servo stop mode so it will stop when the rotation angle is in the neutral position, 90 degrees.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "label",
                                    "text": " stop on neutral ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "enabled",
                                    "shadowBlockId": "toggleOnOff",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "servo",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "enabled",
                                    "shadowBlockId": "toggleOnOff",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "enabled",
                            "type": "boolean"
                        }
                    ],
                    "isInstance": true,
                    "pyQName": "servos.Servo.set_stop_on_neutral"
                },
                "servos.PinServo": {
                    "kind": 8,
                    "retType": "servos.PinServo",
                    "extendsTypes": [
                        "servos.PinServo",
                        "servos.Servo"
                    ]
                },
                "servos.PinServo.__constructor": {
                    "kind": -3,
                    "parameters": [
                        {
                            "name": "pin",
                            "type": "PwmOnlyPin"
                        }
                    ],
                    "isInstance": true
                },
                "servos.P0": {
                    "kind": 4,
                    "retType": "servos.PinServo",
                    "attributes": {
                        "block": "servo P0",
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "servo P0",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    }
                },
                "servos.P1": {
                    "kind": 4,
                    "retType": "servos.PinServo",
                    "attributes": {
                        "block": "servo P1",
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "servo P1",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    }
                },
                "servos.P2": {
                    "kind": 4,
                    "retType": "servos.PinServo",
                    "attributes": {
                        "block": "servo P2",
                        "fixedInstance": "true",
                        "whenUsed": "true",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "servo P2",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    }
                }
            }
        },
        "sha": "f565695c86726c0bae584723c14aee11e1c3aa935a1c5c4f98f5b8a44a47b35d"
    },
    "libs/radio-broadcast": {
        "apis": {
            "byQName": {
                "radio": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#E3008C",
                        "weight": 96,
                        "icon": "",
                        "jsDoc": "Communicate data using radio packets"
                    }
                },
                "radio.raiseEvent": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "radioRaiseEvent",
                        "block": "radio raise event|from source %src=control_event_source_id|with value %value=control_event_value_id",
                        "blockExternalInputs": "1",
                        "advanced": true,
                        "weight": 1,
                        "help": "radio/raise-event",
                        "inlineInputMode": "external",
                        "jsDoc": "Sends an event over radio to neigboring devices",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio raise event",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from source ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "src"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "radio.raise_event"
                },
                "radio.readRawPacket": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "Internal use only. Takes the next packet from the radio queue and returns its contents + RSSI in a Buffer"
                    },
                    "parameters": [],
                    "pyQName": "radio.read_raw_packet"
                },
                "radio.sendRawPacket": {
                    "kind": -3,
                    "attributes": {
                        "callingConvention": 1,
                        "async": "true",
                        "jsDoc": "Internal use only. Sends a raw packet through the radio (assumes RSSI appened to packet)"
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.send_raw_packet"
                },
                "radio.onDataReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-data-received",
                        "weight": 0,
                        "blockId": "radio_datagram_received_event",
                        "block": "radio on data received",
                        "blockGap": "8",
                        "deprecated": "true",
                        "blockHidden": true,
                        "jsDoc": "Used internally by the library.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio on data received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "radio.on_data_received"
                },
                "radio.setGroup": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "id": "1"
                        },
                        "help": "radio/set-group",
                        "weight": 100,
                        "blockId": "radio_set_group",
                        "block": "radio set group %ID",
                        "paramMin": {
                            "id": "0"
                        },
                        "paramMax": {
                            "id": "255"
                        },
                        "paramHelp": {
                            "id": "the group id between ``0`` and ``255``, eg: 1"
                        },
                        "jsDoc": "Sets the group id for radio communications. A micro:bit can only listen to one group ID at any time.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set group ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ID",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ID",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "id",
                            "description": "the group id between ``0`` and ``255``, eg: 1",
                            "default": "1",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_group"
                },
                "radio.setTransmitPower": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "help": "radio/set-transmit-power",
                        "weight": 9,
                        "blockGap": "8",
                        "blockId": "radio_set_transmit_power",
                        "block": "radio set transmit power %power",
                        "paramMin": {
                            "power": "0"
                        },
                        "paramMax": {
                            "power": "7"
                        },
                        "advanced": true,
                        "paramHelp": {
                            "power": "a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7"
                        },
                        "jsDoc": "Change the output power level of the transmitter to the given value.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set transmit power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "power",
                            "description": "a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7",
                            "default": "7",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "7"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_transmit_power"
                },
                "radio.setFrequencyBand": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/set-frequency-band",
                        "weight": 8,
                        "blockGap": "8",
                        "blockId": "radio_set_frequency_band",
                        "block": "radio set frequency band %band",
                        "paramMin": {
                            "band": "0"
                        },
                        "paramMax": {
                            "band": "83"
                        },
                        "advanced": true,
                        "paramHelp": {
                            "band": "a frequency band in the range 0 - 83. Each step is 1MHz wide, based at 2400MHz."
                        },
                        "jsDoc": "Change the transmission and reception band of the radio to the given channel",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set frequency band ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "band",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "band",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "band",
                            "description": "a frequency band in the range 0 - 83. Each step is 1MHz wide, based at 2400MHz.",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "83"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_frequency_band"
                },
                "RadioPacketProperty": {
                    "kind": 6,
                    "retType": "RadioPacketProperty",
                    "extendsTypes": [
                        "RadioPacketProperty",
                        "Number"
                    ]
                },
                "RadioPacketProperty.SignalStrength": {
                    "retType": "RadioPacketProperty.SignalStrength",
                    "attributes": {
                        "blockIdentity": "radio._packetProperty",
                        "block": "signal strength",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.SignalStrength",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.SIGNAL_STRENGTH"
                },
                "RadioPacketProperty.Time": {
                    "retType": "RadioPacketProperty.Time",
                    "attributes": {
                        "blockIdentity": "radio._packetProperty",
                        "block": "time",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "time",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.Time",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.TIME"
                },
                "RadioPacketProperty.SerialNumber": {
                    "retType": "RadioPacketProperty.SerialNumber",
                    "attributes": {
                        "block": "serial number",
                        "blockIdentity": "radio._packetProperty",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.SerialNumber",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.SERIAL_NUMBER"
                },
                "radio.PACKET_TYPE_NUMBER": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_VALUE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_STRING": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_BUFFER": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_DOUBLE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_DOUBLE_VALUE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.lastPacket": {
                    "kind": 4,
                    "retType": "radio.RadioPacket",
                    "pyQName": "radio.last_packet"
                },
                "radio.onReceivedNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-number",
                        "blockId": "radio_on_number_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedNumber: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedNumber",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_number"
                },
                "radio.onReceivedValue": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-value",
                        "blockId": "radio_on_value_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a key value pair.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(name: string, value: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_value"
                },
                "radio.onReceivedString": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-string",
                        "blockId": "radio_on_string_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedString: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedString",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_string"
                },
                "radio.onReceivedBuffer": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-buffer",
                        "blockHidden": true,
                        "blockId": "radio_on_buffer_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a buffer.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedBuffer: Buffer) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedBuffer",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_buffer"
                },
                "radio.receivedPacket": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-packet",
                        "weight": 11,
                        "blockGap": "16",
                        "blockId": "radio_received_packet",
                        "block": "received packet %type=radio_packet_property",
                        "paramHelp": {
                            "type": "the type of property to retrieve from the last packet"
                        },
                        "jsDoc": "Returns properties of the last radio packet received.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "received packet ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "shadowBlockId": "radio_packet_property",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "shadowBlockId": "radio_packet_property",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "type",
                            "description": "the type of property to retrieve from the last packet"
                        }
                    ],
                    "pyQName": "radio.received_packet"
                },
                "radio._packetProperty": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "type": "PacketProperty.time"
                        },
                        "blockId": "radio_packet_property",
                        "block": "%note",
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "paramHelp": {
                            "type": "the packet property type, eg: PacketProperty.time"
                        },
                        "jsDoc": "Gets a packet property.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "type",
                            "description": "the packet property type, eg: PacketProperty.time",
                            "type": "RadioPacketProperty",
                            "default": "PacketProperty.time",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "radio._packet_property"
                },
                "radio.RadioPacket": {
                    "kind": 8,
                    "retType": "radio.RadioPacket",
                    "extendsTypes": []
                },
                "radio.RadioPacket.getPacket": {
                    "kind": -1,
                    "retType": "radio.RadioPacket",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.RadioPacket.get_packet"
                },
                "radio.RadioPacket.mkPacket": {
                    "kind": -1,
                    "retType": "radio.RadioPacket",
                    "parameters": [
                        {
                            "name": "packetType"
                        }
                    ],
                    "pyQName": "radio.RadioPacket.mk_packet"
                },
                "radio.RadioPacket.signal": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.packetType": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.packet_type"
                },
                "radio.RadioPacket.time": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.time@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "radio.RadioPacket.serial": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.serial@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "radio.RadioPacket.stringPayload": {
                    "kind": -2,
                    "retType": "string",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.string_payload"
                },
                "radio.RadioPacket.stringPayload@set": {
                    "kind": -2,
                    "retType": "string",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.string_payload@set"
                },
                "radio.RadioPacket.numberPayload": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.number_payload"
                },
                "radio.RadioPacket.numberPayload@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.number_payload@set"
                },
                "radio.RadioPacket.bufferPayload": {
                    "kind": -2,
                    "retType": "Buffer",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.buffer_payload"
                },
                "radio.RadioPacket.bufferPayload@set": {
                    "kind": -2,
                    "retType": "Buffer",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.buffer_payload@set"
                },
                "radio.RadioPacket.hasString": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.has_string"
                },
                "radio.RadioPacket.hasNumber": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.has_number"
                },
                "radio.sendNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-number",
                        "weight": 60,
                        "blockId": "radio_datagram_send",
                        "block": "radio send number %value",
                        "blockGap": "8",
                        "jsDoc": "Broadcasts a number over radio to any connected micro:bit in the group.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "radio.send_number"
                },
                "radio.sendValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "name"
                        },
                        "help": "radio/send-value",
                        "weight": 59,
                        "blockId": "radio_datagram_send_value",
                        "block": "radio send|value %name|= %value",
                        "blockGap": "8",
                        "paramHelp": {
                            "name": "the field name (max 8 characters), eg: \"name\"",
                            "value": "the numeric value"
                        },
                        "jsDoc": "Broadcasts a name / value pair along with the device serial number\nand running time to any connected micro:bit in the group. The name can\ninclude no more than 8 characters.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "= ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "the field name (max 8 characters), eg: \"name\"",
                            "type": "string",
                            "default": "name"
                        },
                        {
                            "name": "value",
                            "description": "the numeric value"
                        }
                    ],
                    "pyQName": "radio.send_value"
                },
                "radio.sendString": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-string",
                        "weight": 58,
                        "blockId": "radio_datagram_send_string",
                        "block": "radio send string %msg",
                        "paramShadowOptions": {
                            "msg": {
                                "toString": "true"
                            }
                        },
                        "jsDoc": "Broadcasts a string along with the device serial number\nand running time to any connected micro:bit in the group.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "string",
                            "options": {
                                "fieldEditorOptions": {
                                    "value": {
                                        "toString": "true"
                                    }
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.send_string"
                },
                "radio.sendBuffer": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-buffer",
                        "weight": 57,
                        "advanced": true,
                        "jsDoc": "Broadcasts a buffer (up to 19 bytes long) along with the device serial number\nand running time to any connected micro:bit in the group."
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.send_buffer"
                },
                "radio.setTransmitSerialNumber": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "transmit": "true"
                        },
                        "help": "radio/set-transmit-serial-number",
                        "weight": 8,
                        "blockGap": "8",
                        "blockId": "radio_set_transmit_serial_number",
                        "block": "radio set transmit serial number %transmit",
                        "advanced": true,
                        "paramHelp": {
                            "transmit": "value indicating if the serial number is transmitted, eg: true"
                        },
                        "jsDoc": "Set the radio to transmit the serial number in each message.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set transmit serial number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "transmit",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "transmit",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "transmit",
                            "description": "value indicating if the serial number is transmitted, eg: true",
                            "type": "boolean",
                            "default": "true"
                        }
                    ],
                    "pyQName": "radio.set_transmit_serial_number"
                },
                "radio.Packet": {
                    "kind": 8,
                    "retType": "radio.Packet",
                    "extendsTypes": []
                },
                "radio.Packet.receivedNumber": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The number payload if a number was sent in this packet (via ``sendNumber()`` or ``sendValue()``)\nor 0 if this packet did not contain a number."
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_number"
                },
                "radio.Packet.receivedString": {
                    "kind": 2,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "The string payload if a string was sent in this packet (via ``sendString()`` or ``sendValue()``)\nor the empty string if this packet did not contain a string."
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_string"
                },
                "radio.Packet.receivedBuffer": {
                    "kind": 2,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "The buffer payload if a buffer was sent in this packet\nor the empty buffer"
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_buffer"
                },
                "radio.Packet.time": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The system time of the sender of the packet at the time the packet was sent."
                    },
                    "isInstance": true
                },
                "radio.Packet.serial": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The serial number of the sender of the packet or 0 if the sender did not sent their serial number."
                    },
                    "isInstance": true
                },
                "radio.Packet.signal": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The received signal strength indicator (RSSI) of the packet."
                    },
                    "isInstance": true
                },
                "radio.onDataPacketReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-data-packet-received",
                        "blockHandlerKey": "radioreceived",
                        "deprecated": "true",
                        "mutate": "objectdestructuring",
                        "mutateText": "Packet",
                        "mutateDefaults": "receivedNumber;receivedString:name,receivedNumber:value;receivedString",
                        "blockId": "radio_on_packet",
                        "block": "on radio received",
                        "blockGap": "8",
                        "jsDoc": "Deprecated. Use onDataReceived() instead\nRegisters code to run when the radio receives a packet. Also takes the\nreceived packet from the radio queue.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(packet: radio.Packet) => void"
                        }
                    ],
                    "pyQName": "radio.on_data_packet_received"
                },
                "radio.onReceivedNumberDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-number",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_number",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a number. Deprecated, use\nonReceivedNumber instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedNumber: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedNumber",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_number_deprecated"
                },
                "radio.onReceivedValueDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-value",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_value",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a key value pair. Deprecated, use\nonReceivedValue instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(name: string, value: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_value_deprecated"
                },
                "radio.onReceivedStringDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-string",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_string",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a string. Deprecated, use\nonReceivedString instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedString: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedString",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_string_deprecated"
                },
                "radio.onReceivedBufferDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-buffer",
                        "blockHandlerKey": "radioreceived",
                        "blockHidden": true,
                        "blockId": "radio_on_buffer",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a buffer. Deprecated, use\nonReceivedBuffer instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedBuffer: Buffer) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedBuffer",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_buffer_deprecated"
                },
                "radio.receivedNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-number",
                        "deprecated": "1",
                        "jsDoc": "Returns the number payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or 0 if that packet did not\ncontain a number."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_number"
                },
                "radio.receivedSerial": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-serial",
                        "deprecated": "1",
                        "jsDoc": "Returns the serial number of the sender micro:bit from the last packet taken\nfrom the radio queue (via ``receiveNumber``, ``receiveString``, etc) or 0 if\nthat packet did not send a serial number."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_serial"
                },
                "radio.receivedString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "radio/received-string",
                        "deprecated": "1",
                        "jsDoc": "Returns the string payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or the empty string if that\npacket did not contain a string."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_string"
                },
                "radio.receivedBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "help": "radio/received-buffer",
                        "deprecated": "1",
                        "jsDoc": "Returns the buffer payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or the empty string if that\npacket did not contain a string."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_buffer"
                },
                "radio.receivedTime": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-time",
                        "deprecated": "1",
                        "jsDoc": "Returns the system time of the sender micro:bit at the moment when it sent the\nlast packet taken from the radio queue (via ``receiveNumber``,\n``receiveString``, etc)."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_time"
                },
                "radio.receiveNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/receive-number",
                        "weight": 46,
                        "blockId": "radio_datagram_receive",
                        "block": "radio receive number",
                        "blockGap": "8",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and returns the packet's number\npayload or 0 if the packet did not contain a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio receive number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.receive_number"
                },
                "radio.receiveString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "blockId": "radio_datagram_receive_string",
                        "block": "radio receive string",
                        "blockGap": "8",
                        "weight": 44,
                        "help": "radio/receive-string",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and returns the packet's string\npayload or the empty string if the packet did not contain a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio receive string",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.receive_string"
                },
                "radio.receivedSignalStrength": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-signal-strength",
                        "weight": 40,
                        "blockId": "radio_datagram_rssi",
                        "block": "radio received signal strength",
                        "deprecated": "true",
                        "blockHidden": true,
                        "jsDoc": "Gets the received signal strength indicator (RSSI) from the last packet taken\nfrom the radio queue (via ``receiveNumber``, ``receiveString``, etc). Not supported in simulator.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio received signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.received_signal_strength"
                },
                "radio.writeValueToSerial": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/write-value-to-serial",
                        "weight": 3,
                        "blockId": "radio_write_value_serial",
                        "block": "radio write value to serial",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and and writes it to serial\nas JSON.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio write value to serial",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.write_value_to_serial"
                },
                "radio.writeReceivedPacketToSerial": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/write-received-packet-to-serial",
                        "weight": 3,
                        "blockId": "radio_write_packet_serial",
                        "block": "radio write received packet to serial",
                        "advanced": true,
                        "deprecated": "true",
                        "jsDoc": "Writes the last received packet to serial as JSON. This should be called\nwithin an ``onDataPacketReceived`` callback.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio write received packet to serial",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.write_received_packet_to_serial"
                },
                "radio.__message": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "blockHidden": true,
                        "shim": "ENUM_GET",
                        "blockId": "radioMessageCode",
                        "block": "$msg",
                        "enumInitialMembers": [
                            "message1"
                        ],
                        "enumName": "RadioMessage",
                        "enumMemberName": "msg",
                        "enumPromptHint": "e.g. Start, Stop, Jump...",
                        "enumIsHash": true,
                        "jsDoc": "Gets the message code",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "msg"
                        }
                    ]
                },
                "radio.sendMessage": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "radioBroadcastMessage",
                        "block": "radio send $msg",
                        "_shadowOverrides": {
                            "msg": "radioMessageCode"
                        },
                        "draggableParameters": "true",
                        "weight": 200,
                        "blockGap": "8",
                        "help": "radio/send-message",
                        "paramHelp": {
                            "msg": ""
                        },
                        "jsDoc": "Broadcasts a message over radio",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "shadowBlockId": "radioMessageCode",
                                    "ref": true
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "shadowBlockId": "radioMessageCode",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "msg"
                        }
                    ],
                    "pyQName": "radio.send_message"
                },
                "radio.onReceivedMessage": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "radioOnMessageReceived",
                        "block": "on radio $msg received",
                        "_shadowOverrides": {
                            "msg": "radioMessageCode"
                        },
                        "draggableParameters": "true",
                        "weight": 199,
                        "help": "radio/on-received-message",
                        "paramHelp": {
                            "msg": "@param handler "
                        },
                        "jsDoc": "Registers code to run for a particular message",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "shadowBlockId": "radioMessageCode",
                                    "ref": true
                                },
                                {
                                    "kind": "label",
                                    "text": " received",
                                    "style": []
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "shadowBlockId": "radioMessageCode",
                                    "ref": true
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "description": "@param handler "
                        },
                        {
                            "name": "handler",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "radio.on_received_message"
                }
            }
        },
        "sha": "a248d434a9145254d087c26b24b7539c2e2904385b0a1ef185e0a8a8a6b37e24"
    },
    "libs/microphone": {
        "apis": {
            "byQName": {
                "LoudnessCondition": {
                    "kind": 6,
                    "retType": "LoudnessCondition",
                    "extendsTypes": [
                        "LoudnessCondition",
                        "Number"
                    ]
                },
                "LoudnessCondition.Quiet": {
                    "retType": "LoudnessCondition.Quiet",
                    "attributes": {
                        "block": "quiet",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "quiet",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LoudnessCondition.Quiet",
                        "Number"
                    ],
                    "pyQName": "LoudnessCondition.QUIET"
                },
                "LoudnessCondition.Loud": {
                    "retType": "LoudnessCondition.Loud",
                    "attributes": {
                        "block": "loud",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "loud",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "LoudnessCondition.Loud",
                        "Number"
                    ],
                    "pyQName": "LoudnessCondition.LOUD"
                },
                "input.onLoudSound": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/on-loud-sound",
                        "blockId": "input_on_loud_sound",
                        "block": "on loud sound",
                        "parts": "microphone",
                        "weight": 88,
                        "blockGap": "12",
                        "jsDoc": "Registers an event that runs when a loud sound is detected",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on loud sound",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "handler",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "input.on_loud_sound"
                },
                "input.soundLevel": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "input/sound-level",
                        "blockId": "device_get_sound_level",
                        "block": "sound level",
                        "parts": "microphone",
                        "weight": 34,
                        "blockGap": "8",
                        "jsDoc": "Reads the loudness through the microphone from 0 (silent) to 255 (loud)",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "sound level",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "input.sound_level"
                },
                "input.setLoudSoundThreshold": {
                    "kind": -3,
                    "attributes": {
                        "help": "input/set-loud-sound-threshold",
                        "blockId": "input_set_loud_sound_threshold",
                        "block": "set loud sound threshold %value",
                        "parts": "microphone",
                        "paramMin": {
                            "value": "1"
                        },
                        "paramMax": {
                            "value": "255"
                        },
                        "group": "More",
                        "weight": 14,
                        "blockGap": "8",
                        "jsDoc": "Sets the minimum threshold for a loud sound",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "set loud sound threshold ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "options": {
                                "min": {
                                    "value": "1"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "input.set_loud_sound_threshold"
                }
            }
        },
        "sha": "3459f04dd69c449eae8321a738f328346021f4bd6a8df0eba35c49e0ff7f2cd4"
    },
    "libs\\blocksprj": {
        "apis": {
            "byQName": {
                "radio": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#E3008C",
                        "weight": 96,
                        "icon": "",
                        "jsDoc": "Communicate data using radio packets"
                    }
                },
                "radio.raiseEvent": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "radioRaiseEvent",
                        "block": "radio raise event|from source %src=control_event_source_id|with value %value=control_event_value_id",
                        "blockExternalInputs": "1",
                        "advanced": true,
                        "weight": 1,
                        "help": "radio/raise-event",
                        "inlineInputMode": "external",
                        "jsDoc": "Sends an event over radio to neigboring devices",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio raise event",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from source ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "src"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "radio.raise_event"
                },
                "radio.readRawPacket": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "Internal use only. Takes the next packet from the radio queue and returns its contents + RSSI in a Buffer"
                    },
                    "parameters": [],
                    "pyQName": "radio.read_raw_packet"
                },
                "radio.sendRawPacket": {
                    "kind": -3,
                    "attributes": {
                        "callingConvention": 1,
                        "async": "true",
                        "jsDoc": "Internal use only. Sends a raw packet through the radio (assumes RSSI appened to packet)"
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.send_raw_packet"
                },
                "radio.onDataReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-data-received",
                        "weight": 0,
                        "blockId": "radio_datagram_received_event",
                        "block": "radio on data received",
                        "blockGap": "8",
                        "deprecated": "true",
                        "blockHidden": true,
                        "jsDoc": "Used internally by the library.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio on data received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "radio.on_data_received"
                },
                "radio.setGroup": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "id": "1"
                        },
                        "help": "radio/set-group",
                        "weight": 100,
                        "blockId": "radio_set_group",
                        "block": "radio set group %ID",
                        "paramMin": {
                            "id": "0"
                        },
                        "paramMax": {
                            "id": "255"
                        },
                        "paramHelp": {
                            "id": "the group id between ``0`` and ``255``, eg: 1"
                        },
                        "jsDoc": "Sets the group id for radio communications. A micro:bit can only listen to one group ID at any time.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set group ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ID",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ID",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "id",
                            "description": "the group id between ``0`` and ``255``, eg: 1",
                            "default": "1",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_group"
                },
                "radio.setTransmitPower": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "help": "radio/set-transmit-power",
                        "weight": 9,
                        "blockGap": "8",
                        "blockId": "radio_set_transmit_power",
                        "block": "radio set transmit power %power",
                        "paramMin": {
                            "power": "0"
                        },
                        "paramMax": {
                            "power": "7"
                        },
                        "advanced": true,
                        "paramHelp": {
                            "power": "a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7"
                        },
                        "jsDoc": "Change the output power level of the transmitter to the given value.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set transmit power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "power",
                            "description": "a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7",
                            "default": "7",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "7"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_transmit_power"
                },
                "radio.setFrequencyBand": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/set-frequency-band",
                        "weight": 8,
                        "blockGap": "8",
                        "blockId": "radio_set_frequency_band",
                        "block": "radio set frequency band %band",
                        "paramMin": {
                            "band": "0"
                        },
                        "paramMax": {
                            "band": "83"
                        },
                        "advanced": true,
                        "paramHelp": {
                            "band": "a frequency band in the range 0 - 83. Each step is 1MHz wide, based at 2400MHz."
                        },
                        "jsDoc": "Change the transmission and reception band of the radio to the given channel",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set frequency band ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "band",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "band",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "band",
                            "description": "a frequency band in the range 0 - 83. Each step is 1MHz wide, based at 2400MHz.",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "83"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_frequency_band"
                },
                "RadioPacketProperty": {
                    "kind": 6,
                    "retType": "RadioPacketProperty",
                    "extendsTypes": [
                        "RadioPacketProperty",
                        "Number"
                    ]
                },
                "RadioPacketProperty.SignalStrength": {
                    "retType": "RadioPacketProperty.SignalStrength",
                    "attributes": {
                        "blockIdentity": "radio._packetProperty",
                        "block": "signal strength",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.SignalStrength",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.SIGNAL_STRENGTH"
                },
                "RadioPacketProperty.Time": {
                    "retType": "RadioPacketProperty.Time",
                    "attributes": {
                        "blockIdentity": "radio._packetProperty",
                        "block": "time",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "time",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.Time",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.TIME"
                },
                "RadioPacketProperty.SerialNumber": {
                    "retType": "RadioPacketProperty.SerialNumber",
                    "attributes": {
                        "block": "serial number",
                        "blockIdentity": "radio._packetProperty",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.SerialNumber",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.SERIAL_NUMBER"
                },
                "radio.PACKET_TYPE_NUMBER": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_VALUE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_STRING": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_BUFFER": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_DOUBLE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_DOUBLE_VALUE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.lastPacket": {
                    "kind": 4,
                    "retType": "radio.RadioPacket",
                    "pyQName": "radio.last_packet"
                },
                "radio.onReceivedNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-number",
                        "blockId": "radio_on_number_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedNumber: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedNumber",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_number"
                },
                "radio.onReceivedValue": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-value",
                        "blockId": "radio_on_value_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a key value pair.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(name: string, value: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_value"
                },
                "radio.onReceivedString": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-string",
                        "blockId": "radio_on_string_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedString: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedString",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_string"
                },
                "radio.onReceivedBuffer": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-buffer",
                        "blockHidden": true,
                        "blockId": "radio_on_buffer_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a buffer.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedBuffer: Buffer) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedBuffer",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_buffer"
                },
                "radio.receivedPacket": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-packet",
                        "weight": 11,
                        "blockGap": "16",
                        "blockId": "radio_received_packet",
                        "block": "received packet %type=radio_packet_property",
                        "paramHelp": {
                            "type": "the type of property to retrieve from the last packet"
                        },
                        "jsDoc": "Returns properties of the last radio packet received.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "received packet ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "shadowBlockId": "radio_packet_property",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "shadowBlockId": "radio_packet_property",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "type",
                            "description": "the type of property to retrieve from the last packet"
                        }
                    ],
                    "pyQName": "radio.received_packet"
                },
                "radio._packetProperty": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "type": "PacketProperty.time"
                        },
                        "blockId": "radio_packet_property",
                        "block": "%note",
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "paramHelp": {
                            "type": "the packet property type, eg: PacketProperty.time"
                        },
                        "jsDoc": "Gets a packet property.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "type",
                            "description": "the packet property type, eg: PacketProperty.time",
                            "type": "RadioPacketProperty",
                            "default": "PacketProperty.time",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "radio._packet_property"
                },
                "radio.RadioPacket": {
                    "kind": 8,
                    "retType": "radio.RadioPacket",
                    "extendsTypes": []
                },
                "radio.RadioPacket.getPacket": {
                    "kind": -1,
                    "retType": "radio.RadioPacket",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.RadioPacket.get_packet"
                },
                "radio.RadioPacket.mkPacket": {
                    "kind": -1,
                    "retType": "radio.RadioPacket",
                    "parameters": [
                        {
                            "name": "packetType"
                        }
                    ],
                    "pyQName": "radio.RadioPacket.mk_packet"
                },
                "radio.RadioPacket.signal": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.packetType": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.packet_type"
                },
                "radio.RadioPacket.time": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.time@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "radio.RadioPacket.serial": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.serial@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "radio.RadioPacket.stringPayload": {
                    "kind": -2,
                    "retType": "string",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.string_payload"
                },
                "radio.RadioPacket.stringPayload@set": {
                    "kind": -2,
                    "retType": "string",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.string_payload@set"
                },
                "radio.RadioPacket.numberPayload": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.number_payload"
                },
                "radio.RadioPacket.numberPayload@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.number_payload@set"
                },
                "radio.RadioPacket.bufferPayload": {
                    "kind": -2,
                    "retType": "Buffer",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.buffer_payload"
                },
                "radio.RadioPacket.bufferPayload@set": {
                    "kind": -2,
                    "retType": "Buffer",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.buffer_payload@set"
                },
                "radio.RadioPacket.hasString": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.has_string"
                },
                "radio.RadioPacket.hasNumber": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.has_number"
                },
                "radio.sendNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-number",
                        "weight": 60,
                        "blockId": "radio_datagram_send",
                        "block": "radio send number %value",
                        "blockGap": "8",
                        "jsDoc": "Broadcasts a number over radio to any connected micro:bit in the group.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "radio.send_number"
                },
                "radio.sendValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "name"
                        },
                        "help": "radio/send-value",
                        "weight": 59,
                        "blockId": "radio_datagram_send_value",
                        "block": "radio send|value %name|= %value",
                        "blockGap": "8",
                        "paramHelp": {
                            "name": "the field name (max 8 characters), eg: \"name\"",
                            "value": "the numeric value"
                        },
                        "jsDoc": "Broadcasts a name / value pair along with the device serial number\nand running time to any connected micro:bit in the group. The name can\ninclude no more than 8 characters.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "= ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "the field name (max 8 characters), eg: \"name\"",
                            "type": "string",
                            "default": "name"
                        },
                        {
                            "name": "value",
                            "description": "the numeric value"
                        }
                    ],
                    "pyQName": "radio.send_value"
                },
                "radio.sendString": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-string",
                        "weight": 58,
                        "blockId": "radio_datagram_send_string",
                        "block": "radio send string %msg",
                        "paramShadowOptions": {
                            "msg": {
                                "toString": "true"
                            }
                        },
                        "jsDoc": "Broadcasts a string along with the device serial number\nand running time to any connected micro:bit in the group.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "string",
                            "options": {
                                "fieldEditorOptions": {
                                    "value": {
                                        "toString": "true"
                                    }
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.send_string"
                },
                "radio.sendBuffer": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-buffer",
                        "weight": 57,
                        "advanced": true,
                        "jsDoc": "Broadcasts a buffer (up to 19 bytes long) along with the device serial number\nand running time to any connected micro:bit in the group."
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.send_buffer"
                },
                "radio.setTransmitSerialNumber": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "transmit": "true"
                        },
                        "help": "radio/set-transmit-serial-number",
                        "weight": 8,
                        "blockGap": "8",
                        "blockId": "radio_set_transmit_serial_number",
                        "block": "radio set transmit serial number %transmit",
                        "advanced": true,
                        "paramHelp": {
                            "transmit": "value indicating if the serial number is transmitted, eg: true"
                        },
                        "jsDoc": "Set the radio to transmit the serial number in each message.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set transmit serial number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "transmit",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "transmit",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "transmit",
                            "description": "value indicating if the serial number is transmitted, eg: true",
                            "type": "boolean",
                            "default": "true"
                        }
                    ],
                    "pyQName": "radio.set_transmit_serial_number"
                },
                "radio.Packet": {
                    "kind": 8,
                    "retType": "radio.Packet",
                    "extendsTypes": []
                },
                "radio.Packet.receivedNumber": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The number payload if a number was sent in this packet (via ``sendNumber()`` or ``sendValue()``)\nor 0 if this packet did not contain a number."
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_number"
                },
                "radio.Packet.receivedString": {
                    "kind": 2,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "The string payload if a string was sent in this packet (via ``sendString()`` or ``sendValue()``)\nor the empty string if this packet did not contain a string."
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_string"
                },
                "radio.Packet.receivedBuffer": {
                    "kind": 2,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "The buffer payload if a buffer was sent in this packet\nor the empty buffer"
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_buffer"
                },
                "radio.Packet.time": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The system time of the sender of the packet at the time the packet was sent."
                    },
                    "isInstance": true
                },
                "radio.Packet.serial": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The serial number of the sender of the packet or 0 if the sender did not sent their serial number."
                    },
                    "isInstance": true
                },
                "radio.Packet.signal": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The received signal strength indicator (RSSI) of the packet."
                    },
                    "isInstance": true
                },
                "radio.onDataPacketReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-data-packet-received",
                        "blockHandlerKey": "radioreceived",
                        "deprecated": "true",
                        "mutate": "objectdestructuring",
                        "mutateText": "Packet",
                        "mutateDefaults": "receivedNumber;receivedString:name,receivedNumber:value;receivedString",
                        "blockId": "radio_on_packet",
                        "block": "on radio received",
                        "blockGap": "8",
                        "jsDoc": "Deprecated. Use onDataReceived() instead\nRegisters code to run when the radio receives a packet. Also takes the\nreceived packet from the radio queue.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(packet: radio.Packet) => void"
                        }
                    ],
                    "pyQName": "radio.on_data_packet_received"
                },
                "radio.onReceivedNumberDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-number",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_number",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a number. Deprecated, use\nonReceivedNumber instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedNumber: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedNumber",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_number_deprecated"
                },
                "radio.onReceivedValueDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-value",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_value",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a key value pair. Deprecated, use\nonReceivedValue instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(name: string, value: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_value_deprecated"
                },
                "radio.onReceivedStringDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-string",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_string",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a string. Deprecated, use\nonReceivedString instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedString: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedString",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_string_deprecated"
                },
                "radio.onReceivedBufferDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-buffer",
                        "blockHandlerKey": "radioreceived",
                        "blockHidden": true,
                        "blockId": "radio_on_buffer",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a buffer. Deprecated, use\nonReceivedBuffer instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedBuffer: Buffer) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedBuffer",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_buffer_deprecated"
                },
                "radio.receivedNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-number",
                        "deprecated": "1",
                        "jsDoc": "Returns the number payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or 0 if that packet did not\ncontain a number."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_number"
                },
                "radio.receivedSerial": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-serial",
                        "deprecated": "1",
                        "jsDoc": "Returns the serial number of the sender micro:bit from the last packet taken\nfrom the radio queue (via ``receiveNumber``, ``receiveString``, etc) or 0 if\nthat packet did not send a serial number."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_serial"
                },
                "radio.receivedString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "radio/received-string",
                        "deprecated": "1",
                        "jsDoc": "Returns the string payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or the empty string if that\npacket did not contain a string."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_string"
                },
                "radio.receivedBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "help": "radio/received-buffer",
                        "deprecated": "1",
                        "jsDoc": "Returns the buffer payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or the empty string if that\npacket did not contain a string."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_buffer"
                },
                "radio.receivedTime": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-time",
                        "deprecated": "1",
                        "jsDoc": "Returns the system time of the sender micro:bit at the moment when it sent the\nlast packet taken from the radio queue (via ``receiveNumber``,\n``receiveString``, etc)."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_time"
                },
                "radio.receiveNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/receive-number",
                        "weight": 46,
                        "blockId": "radio_datagram_receive",
                        "block": "radio receive number",
                        "blockGap": "8",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and returns the packet's number\npayload or 0 if the packet did not contain a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio receive number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.receive_number"
                },
                "radio.receiveString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "blockId": "radio_datagram_receive_string",
                        "block": "radio receive string",
                        "blockGap": "8",
                        "weight": 44,
                        "help": "radio/receive-string",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and returns the packet's string\npayload or the empty string if the packet did not contain a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio receive string",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.receive_string"
                },
                "radio.receivedSignalStrength": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-signal-strength",
                        "weight": 40,
                        "blockId": "radio_datagram_rssi",
                        "block": "radio received signal strength",
                        "deprecated": "true",
                        "blockHidden": true,
                        "jsDoc": "Gets the received signal strength indicator (RSSI) from the last packet taken\nfrom the radio queue (via ``receiveNumber``, ``receiveString``, etc). Not supported in simulator.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio received signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.received_signal_strength"
                },
                "radio.writeValueToSerial": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/write-value-to-serial",
                        "weight": 3,
                        "blockId": "radio_write_value_serial",
                        "block": "radio write value to serial",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and and writes it to serial\nas JSON.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio write value to serial",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.write_value_to_serial"
                },
                "radio.writeReceivedPacketToSerial": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/write-received-packet-to-serial",
                        "weight": 3,
                        "blockId": "radio_write_packet_serial",
                        "block": "radio write received packet to serial",
                        "advanced": true,
                        "deprecated": "true",
                        "jsDoc": "Writes the last received packet to serial as JSON. This should be called\nwithin an ``onDataPacketReceived`` callback.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio write received packet to serial",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.write_received_packet_to_serial"
                }
            }
        },
        "sha": "74ef3fa3aa8c03cfd6310653d6026935e2f6918d33c338e14791f92bd38a8729"
    },
    "libs\\bluetoothprj": {
        "apis": {
            "byQName": {
                "bluetooth": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#007EF4",
                        "weight": 96,
                        "icon": "",
                        "jsDoc": "Support for additional Bluetooth services.\n\nSupport for additional Bluetooth services."
                    }
                },
                "bluetooth.startAccelerometerService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-accelerometer-service",
                        "blockId": "bluetooth_start_accelerometer_service",
                        "block": "bluetooth accelerometer service",
                        "parts": "bluetooth",
                        "weight": 90,
                        "blockGap": "8",
                        "jsDoc": "Starts the Bluetooth accelerometer service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth accelerometer service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_accelerometer_service"
                },
                "bluetooth.startButtonService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-button-service",
                        "blockId": "bluetooth_start_button_service",
                        "block": "bluetooth button service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 89,
                        "jsDoc": "Starts the Bluetooth button service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth button service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_button_service"
                },
                "bluetooth.startIOPinService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-io-pin-service",
                        "blockId": "bluetooth_start_io_pin_service",
                        "block": "bluetooth io pin service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 88,
                        "jsDoc": "Starts the Bluetooth IO pin service.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth io pin service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_io_pin_service"
                },
                "bluetooth.startLEDService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-led-service",
                        "blockId": "bluetooth_start_led_service",
                        "block": "bluetooth led service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 87,
                        "jsDoc": "Starts the Bluetooth LED service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth led service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_led_service"
                },
                "bluetooth.startTemperatureService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-temperature-service",
                        "blockId": "bluetooth_start_temperature_service",
                        "block": "bluetooth temperature service",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "weight": 86,
                        "jsDoc": "Starts the Bluetooth temperature service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth temperature service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_temperature_service"
                },
                "bluetooth.startMagnetometerService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-magnetometer-service",
                        "blockId": "bluetooth_start_magnetometer_service",
                        "block": "bluetooth magnetometer service",
                        "parts": "bluetooth",
                        "weight": 85,
                        "jsDoc": "Starts the Bluetooth magnetometer service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth magnetometer service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_magnetometer_service"
                },
                "bluetooth.startUartService": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/start-uart-service",
                        "blockId": "bluetooth_start_uart_service",
                        "block": "bluetooth uart service",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Starts the Bluetooth UART service",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart service",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.start_uart_service"
                },
                "bluetooth.uartWriteBuffer": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Sends a buffer of data via Bluetooth UART"
                    },
                    "parameters": [
                        {
                            "name": "buffer",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_buffer"
                },
                "bluetooth.uartReadBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "Reads buffered UART data into a buffer"
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.uart_read_buffer"
                },
                "bluetooth.onUartDataReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-uart-data-received",
                        "weight": 18,
                        "blockId": "bluetooth_on_data_received",
                        "block": "bluetooth|on data received %delimiters=serial_delimiter_conv",
                        "paramHelp": {
                            "delimiters": "the characters to match received characters against."
                        },
                        "jsDoc": "Registers an event to be fired when one of the delimiter is matched.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "on data received ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "delimiters",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "delimiters",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "delimiters",
                            "description": "the characters to match received characters against.",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_uart_data_received"
                },
                "bluetooth.onBluetoothConnected": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-bluetooth-connected",
                        "weight": 20,
                        "blockId": "bluetooth_on_connected",
                        "block": "on bluetooth connected",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "paramHelp": {
                            "body": "Code to run when a Bluetooth connection is established"
                        },
                        "jsDoc": "Register code to run when the micro:bit is connected to over Bluetooth",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on bluetooth connected",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "Code to run when a Bluetooth connection is established",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_bluetooth_connected"
                },
                "bluetooth.onBluetoothDisconnected": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/on-bluetooth-disconnected",
                        "weight": 19,
                        "blockId": "bluetooth_on_disconnected",
                        "block": "on bluetooth disconnected",
                        "parts": "bluetooth",
                        "paramHelp": {
                            "body": "Code to run when a Bluetooth connection is lost"
                        },
                        "jsDoc": "Register code to run when a bluetooth connection to the micro:bit is lost",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on bluetooth disconnected",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "description": "Code to run when a Bluetooth connection is lost",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "bluetooth.on_bluetooth_disconnected"
                },
                "bluetooth.advertiseUrl": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "url": "https://makecode.com",
                            "power": "7"
                        },
                        "blockId": "eddystone_advertise_url",
                        "block": "bluetooth advertise url %url|with power %power|connectable %connectable",
                        "parts": "bluetooth",
                        "weight": 11,
                        "blockGap": "8",
                        "help": "bluetooth/advertise-url",
                        "blockExternalInputs": "1",
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "url": "the url to transmit. Must be no longer than the supported eddystone url length, eg: \"https://makecode.com\"",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone URL",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth advertise url ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "url",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "connectable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "url",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "url",
                            "description": "the url to transmit. Must be no longer than the supported eddystone url length, eg: \"https://makecode.com\"",
                            "type": "string",
                            "default": "https://makecode.com"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_url"
                },
                "bluetooth.advertiseUidBuffer": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "parts": "bluetooth",
                        "weight": 12,
                        "advanced": true,
                        "paramHelp": {
                            "nsAndInstance": "16 bytes buffer of namespace (bytes 0-9) and instance (bytes 10-15)",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone UID"
                    },
                    "parameters": [
                        {
                            "name": "nsAndInstance",
                            "description": "16 bytes buffer of namespace (bytes 0-9) and instance (bytes 10-15)",
                            "type": "Buffer"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_uid_buffer"
                },
                "bluetooth.setTransmitPower": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7."
                        },
                        "parts": "bluetooth",
                        "weight": 5,
                        "help": "bluetooth/set-transmit-power",
                        "advanced": true,
                        "blockId": "bluetooth_settransmitpower",
                        "block": "bluetooth set transmit power %power",
                        "paramHelp": {
                            "power": "power level between 0 (minimal) and 7 (maximum), eg: 7."
                        },
                        "jsDoc": "Sets the bluetooth transmit power between 0 (minimal) and 7 (maximum).",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth set transmit power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "power",
                            "description": "power level between 0 (minimal) and 7 (maximum), eg: 7.",
                            "default": "7."
                        }
                    ],
                    "pyQName": "bluetooth.set_transmit_power"
                },
                "bluetooth.stopAdvertising": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "eddystone_stop_advertising",
                        "block": "bluetooth stop advertising",
                        "parts": "bluetooth",
                        "weight": 10,
                        "help": "bluetooth/stop-advertising",
                        "advanced": true,
                        "jsDoc": "Stops advertising Eddystone end points",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth stop advertising",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "bluetooth.stop_advertising"
                },
                "bluetooth.NEW_LINE": {
                    "kind": 4,
                    "retType": "string"
                },
                "bluetooth.__log": {
                    "kind": -3,
                    "attributes": {
                        "jsDoc": "Internal use"
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "string"
                        }
                    ]
                },
                "bluetooth.uartWriteString": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-string",
                        "weight": 80,
                        "blockId": "bluetooth_uart_write",
                        "block": "bluetooth uart|write string %data",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_string"
                },
                "bluetooth.uartWriteLine": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-line",
                        "weight": 79,
                        "blockId": "bluetooth_uart_line",
                        "block": "bluetooth uart|write line %data",
                        "blockGap": "8",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write line ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "data",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_line"
                },
                "bluetooth.uartWriteNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "bluetooth/uart-write-number",
                        "weight": 89,
                        "blockGap": "8",
                        "advanced": true,
                        "blockId": "bluetooth_uart_writenumber",
                        "block": "bluetooth uart|write number %value",
                        "jsDoc": "Prints a numeric value to the serial",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_number"
                },
                "bluetooth.uartWriteValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "x"
                        },
                        "weight": 78,
                        "help": "bluetooth/uart-write-value",
                        "advanced": true,
                        "blockId": "bluetooth_uart_writevalue",
                        "block": "bluetooth uart|write value %name|= %value",
                        "paramHelp": {
                            "name": "name of the value stream, eg: x",
                            "value": "to write"
                        },
                        "jsDoc": "Writes a ``name: value`` pair line to the serial.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "write value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "= ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "name of the value stream, eg: x",
                            "type": "string",
                            "default": "x"
                        },
                        {
                            "name": "value",
                            "description": "to write"
                        }
                    ],
                    "pyQName": "bluetooth.uart_write_value"
                },
                "bluetooth.uartReadUntil": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "bluetooth/uart-read-until",
                        "weight": 75,
                        "blockId": "bluetooth_uart_read",
                        "block": "bluetooth uart|read until %del=serial_delimiter_conv",
                        "parts": "bluetooth",
                        "advanced": true,
                        "jsDoc": "Reads from the Bluetooth UART service buffer, returning its contents when the specified delimiter character is encountered.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth uart",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "read until ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "del",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "del",
                                    "shadowBlockId": "serial_delimiter_conv",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "del",
                            "type": "string"
                        }
                    ],
                    "pyQName": "bluetooth.uart_read_until"
                },
                "bluetooth.advertiseUid": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "blockId": "eddystone_advertise_uid",
                        "block": "bluetooth advertise UID|namespace (bytes 6-9)%ns|instance (bytes 2-6)%instance|with power %power|connectable %connectable",
                        "parts": "bluetooth",
                        "weight": 12,
                        "blockGap": "8",
                        "help": "bluetooth/advertise-uid",
                        "blockExternalInputs": "1",
                        "inlineInputMode": "external",
                        "paramHelp": {
                            "ns": "4 last bytes of the namespace uid",
                            "instance": "4 last bytes of the instance uid",
                            "power": "power level between 0 and 7, eg: 7",
                            "connectable": "true to keep bluetooth connectable for other services, false otherwise."
                        },
                        "jsDoc": "Advertise an Eddystone UID",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "bluetooth advertise UID",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "namespace (bytes 6-9)",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ns",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "instance (bytes 2-6)",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "instance",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "connectable ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ns",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "instance",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "connectable",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "ns",
                            "description": "4 last bytes of the namespace uid"
                        },
                        {
                            "name": "instance",
                            "description": "4 last bytes of the instance uid"
                        },
                        {
                            "name": "power",
                            "description": "power level between 0 and 7, eg: 7",
                            "default": "7"
                        },
                        {
                            "name": "connectable",
                            "description": "true to keep bluetooth connectable for other services, false otherwise.",
                            "type": "boolean"
                        }
                    ],
                    "pyQName": "bluetooth.advertise_uid"
                }
            }
        },
        "sha": "e2cce9fa818deaf6bd345d7c6b267abfe36f35a8391e5ee3c45a82aad0c52640"
    },
    "libs\\tsprj": {
        "apis": {
            "byQName": {
                "radio": {
                    "kind": 5,
                    "retType": "",
                    "attributes": {
                        "color": "#E3008C",
                        "weight": 96,
                        "icon": "",
                        "jsDoc": "Communicate data using radio packets"
                    }
                },
                "radio.raiseEvent": {
                    "kind": -3,
                    "attributes": {
                        "blockId": "radioRaiseEvent",
                        "block": "radio raise event|from source %src=control_event_source_id|with value %value=control_event_value_id",
                        "blockExternalInputs": "1",
                        "advanced": true,
                        "weight": 1,
                        "help": "radio/raise-event",
                        "inlineInputMode": "external",
                        "jsDoc": "Sends an event over radio to neigboring devices",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio raise event",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "from source ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "with value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "src",
                                    "shadowBlockId": "control_event_source_id",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "shadowBlockId": "control_event_value_id",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "src"
                        },
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "radio.raise_event"
                },
                "radio.readRawPacket": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "Internal use only. Takes the next packet from the radio queue and returns its contents + RSSI in a Buffer"
                    },
                    "parameters": [],
                    "pyQName": "radio.read_raw_packet"
                },
                "radio.sendRawPacket": {
                    "kind": -3,
                    "attributes": {
                        "callingConvention": 1,
                        "async": "true",
                        "jsDoc": "Internal use only. Sends a raw packet through the radio (assumes RSSI appened to packet)"
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.send_raw_packet"
                },
                "radio.onDataReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-data-received",
                        "weight": 0,
                        "blockId": "radio_datagram_received_event",
                        "block": "radio on data received",
                        "blockGap": "8",
                        "deprecated": "true",
                        "blockHidden": true,
                        "jsDoc": "Used internally by the library.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio on data received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "body",
                            "type": "() => void",
                            "handlerParameters": []
                        }
                    ],
                    "pyQName": "radio.on_data_received"
                },
                "radio.setGroup": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "id": "1"
                        },
                        "help": "radio/set-group",
                        "weight": 100,
                        "blockId": "radio_set_group",
                        "block": "radio set group %ID",
                        "paramMin": {
                            "id": "0"
                        },
                        "paramMax": {
                            "id": "255"
                        },
                        "paramHelp": {
                            "id": "the group id between ``0`` and ``255``, eg: 1"
                        },
                        "jsDoc": "Sets the group id for radio communications. A micro:bit can only listen to one group ID at any time.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set group ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "ID",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "ID",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "id",
                            "description": "the group id between ``0`` and ``255``, eg: 1",
                            "default": "1",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "255"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_group"
                },
                "radio.setTransmitPower": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "power": "7"
                        },
                        "help": "radio/set-transmit-power",
                        "weight": 9,
                        "blockGap": "8",
                        "blockId": "radio_set_transmit_power",
                        "block": "radio set transmit power %power",
                        "paramMin": {
                            "power": "0"
                        },
                        "paramMax": {
                            "power": "7"
                        },
                        "advanced": true,
                        "paramHelp": {
                            "power": "a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7"
                        },
                        "jsDoc": "Change the output power level of the transmitter to the given value.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set transmit power ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "power",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "power",
                            "description": "a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7",
                            "default": "7",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "7"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_transmit_power"
                },
                "radio.setFrequencyBand": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/set-frequency-band",
                        "weight": 8,
                        "blockGap": "8",
                        "blockId": "radio_set_frequency_band",
                        "block": "radio set frequency band %band",
                        "paramMin": {
                            "band": "0"
                        },
                        "paramMax": {
                            "band": "83"
                        },
                        "advanced": true,
                        "paramHelp": {
                            "band": "a frequency band in the range 0 - 83. Each step is 1MHz wide, based at 2400MHz."
                        },
                        "jsDoc": "Change the transmission and reception band of the radio to the given channel",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set frequency band ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "band",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "band",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "band",
                            "description": "a frequency band in the range 0 - 83. Each step is 1MHz wide, based at 2400MHz.",
                            "options": {
                                "min": {
                                    "value": "0"
                                },
                                "max": {
                                    "value": "83"
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.set_frequency_band"
                },
                "RadioPacketProperty": {
                    "kind": 6,
                    "retType": "RadioPacketProperty",
                    "extendsTypes": [
                        "RadioPacketProperty",
                        "Number"
                    ]
                },
                "RadioPacketProperty.SignalStrength": {
                    "retType": "RadioPacketProperty.SignalStrength",
                    "attributes": {
                        "blockIdentity": "radio._packetProperty",
                        "block": "signal strength",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.SignalStrength",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.SIGNAL_STRENGTH"
                },
                "RadioPacketProperty.Time": {
                    "retType": "RadioPacketProperty.Time",
                    "attributes": {
                        "blockIdentity": "radio._packetProperty",
                        "block": "time",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "time",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.Time",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.TIME"
                },
                "RadioPacketProperty.SerialNumber": {
                    "retType": "RadioPacketProperty.SerialNumber",
                    "attributes": {
                        "block": "serial number",
                        "blockIdentity": "radio._packetProperty",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "serial number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "extendsTypes": [
                        "RadioPacketProperty.SerialNumber",
                        "Number"
                    ],
                    "pyQName": "RadioPacketProperty.SERIAL_NUMBER"
                },
                "radio.PACKET_TYPE_NUMBER": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_VALUE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_STRING": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_BUFFER": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_DOUBLE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.PACKET_TYPE_DOUBLE_VALUE": {
                    "kind": 4,
                    "retType": "number"
                },
                "radio.lastPacket": {
                    "kind": 4,
                    "retType": "radio.RadioPacket",
                    "pyQName": "radio.last_packet"
                },
                "radio.onReceivedNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-number",
                        "blockId": "radio_on_number_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedNumber: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedNumber",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_number"
                },
                "radio.onReceivedValue": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-value",
                        "blockId": "radio_on_value_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a key value pair.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(name: string, value: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_value"
                },
                "radio.onReceivedString": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-string",
                        "blockId": "radio_on_string_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedString: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedString",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_string"
                },
                "radio.onReceivedBuffer": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-buffer",
                        "blockHidden": true,
                        "blockId": "radio_on_buffer_drag",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "draggableParameters": "reporter",
                        "jsDoc": "Registers code to run when the radio receives a buffer.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedBuffer: Buffer) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedBuffer",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_buffer"
                },
                "radio.receivedPacket": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-packet",
                        "weight": 11,
                        "blockGap": "16",
                        "blockId": "radio_received_packet",
                        "block": "received packet %type=radio_packet_property",
                        "paramHelp": {
                            "type": "the type of property to retrieve from the last packet"
                        },
                        "jsDoc": "Returns properties of the last radio packet received.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "received packet ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "shadowBlockId": "radio_packet_property",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "type",
                                    "shadowBlockId": "radio_packet_property",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "type",
                            "description": "the type of property to retrieve from the last packet"
                        }
                    ],
                    "pyQName": "radio.received_packet"
                },
                "radio._packetProperty": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "paramDefl": {
                            "type": "PacketProperty.time"
                        },
                        "blockId": "radio_packet_property",
                        "block": "%note",
                        "shim": "TD_ID",
                        "blockHidden": true,
                        "paramHelp": {
                            "type": "the packet property type, eg: PacketProperty.time"
                        },
                        "jsDoc": "Gets a packet property.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "note",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "type",
                            "description": "the packet property type, eg: PacketProperty.time",
                            "type": "RadioPacketProperty",
                            "default": "PacketProperty.time",
                            "isEnum": true
                        }
                    ],
                    "pyQName": "radio._packet_property"
                },
                "radio.RadioPacket": {
                    "kind": 8,
                    "retType": "radio.RadioPacket",
                    "extendsTypes": []
                },
                "radio.RadioPacket.getPacket": {
                    "kind": -1,
                    "retType": "radio.RadioPacket",
                    "parameters": [
                        {
                            "name": "data",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.RadioPacket.get_packet"
                },
                "radio.RadioPacket.mkPacket": {
                    "kind": -1,
                    "retType": "radio.RadioPacket",
                    "parameters": [
                        {
                            "name": "packetType"
                        }
                    ],
                    "pyQName": "radio.RadioPacket.mk_packet"
                },
                "radio.RadioPacket.signal": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.packetType": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.packet_type"
                },
                "radio.RadioPacket.time": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.time@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "radio.RadioPacket.serial": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true
                },
                "radio.RadioPacket.serial@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true
                },
                "radio.RadioPacket.stringPayload": {
                    "kind": -2,
                    "retType": "string",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.string_payload"
                },
                "radio.RadioPacket.stringPayload@set": {
                    "kind": -2,
                    "retType": "string",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.string_payload@set"
                },
                "radio.RadioPacket.numberPayload": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.number_payload"
                },
                "radio.RadioPacket.numberPayload@set": {
                    "kind": -2,
                    "retType": "number",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.number_payload@set"
                },
                "radio.RadioPacket.bufferPayload": {
                    "kind": -2,
                    "retType": "Buffer",
                    "isInstance": true,
                    "isReadOnly": true,
                    "pyQName": "radio.RadioPacket.buffer_payload"
                },
                "radio.RadioPacket.bufferPayload@set": {
                    "kind": -2,
                    "retType": "Buffer",
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.buffer_payload@set"
                },
                "radio.RadioPacket.hasString": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.has_string"
                },
                "radio.RadioPacket.hasNumber": {
                    "kind": -1,
                    "retType": "boolean",
                    "parameters": [],
                    "isInstance": true,
                    "pyQName": "radio.RadioPacket.has_number"
                },
                "radio.sendNumber": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-number",
                        "weight": 60,
                        "blockId": "radio_datagram_send",
                        "block": "radio send number %value",
                        "blockGap": "8",
                        "jsDoc": "Broadcasts a number over radio to any connected micro:bit in the group.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value"
                        }
                    ],
                    "pyQName": "radio.send_number"
                },
                "radio.sendValue": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "name": "name"
                        },
                        "help": "radio/send-value",
                        "weight": 59,
                        "blockId": "radio_datagram_send_value",
                        "block": "radio send|value %name|= %value",
                        "blockGap": "8",
                        "paramHelp": {
                            "name": "the field name (max 8 characters), eg: \"name\"",
                            "value": "the numeric value"
                        },
                        "jsDoc": "Broadcasts a name / value pair along with the device serial number\nand running time to any connected micro:bit in the group. The name can\ninclude no more than 8 characters.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send",
                                    "style": []
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "value ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "break"
                                },
                                {
                                    "kind": "label",
                                    "text": "= ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "name",
                                    "ref": false
                                },
                                {
                                    "kind": "param",
                                    "name": "value",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "name",
                            "description": "the field name (max 8 characters), eg: \"name\"",
                            "type": "string",
                            "default": "name"
                        },
                        {
                            "name": "value",
                            "description": "the numeric value"
                        }
                    ],
                    "pyQName": "radio.send_value"
                },
                "radio.sendString": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-string",
                        "weight": 58,
                        "blockId": "radio_datagram_send_string",
                        "block": "radio send string %msg",
                        "paramShadowOptions": {
                            "msg": {
                                "toString": "true"
                            }
                        },
                        "jsDoc": "Broadcasts a string along with the device serial number\nand running time to any connected micro:bit in the group.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio send string ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "msg",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "value",
                            "type": "string",
                            "options": {
                                "fieldEditorOptions": {
                                    "value": {
                                        "toString": "true"
                                    }
                                }
                            }
                        }
                    ],
                    "pyQName": "radio.send_string"
                },
                "radio.sendBuffer": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/send-buffer",
                        "weight": 57,
                        "advanced": true,
                        "jsDoc": "Broadcasts a buffer (up to 19 bytes long) along with the device serial number\nand running time to any connected micro:bit in the group."
                    },
                    "parameters": [
                        {
                            "name": "msg",
                            "type": "Buffer"
                        }
                    ],
                    "pyQName": "radio.send_buffer"
                },
                "radio.setTransmitSerialNumber": {
                    "kind": -3,
                    "attributes": {
                        "paramDefl": {
                            "transmit": "true"
                        },
                        "help": "radio/set-transmit-serial-number",
                        "weight": 8,
                        "blockGap": "8",
                        "blockId": "radio_set_transmit_serial_number",
                        "block": "radio set transmit serial number %transmit",
                        "advanced": true,
                        "paramHelp": {
                            "transmit": "value indicating if the serial number is transmitted, eg: true"
                        },
                        "jsDoc": "Set the radio to transmit the serial number in each message.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio set transmit serial number ",
                                    "style": []
                                },
                                {
                                    "kind": "param",
                                    "name": "transmit",
                                    "ref": false
                                }
                            ],
                            "parameters": [
                                {
                                    "kind": "param",
                                    "name": "transmit",
                                    "ref": false
                                }
                            ]
                        }
                    },
                    "parameters": [
                        {
                            "name": "transmit",
                            "description": "value indicating if the serial number is transmitted, eg: true",
                            "type": "boolean",
                            "default": "true"
                        }
                    ],
                    "pyQName": "radio.set_transmit_serial_number"
                },
                "radio.Packet": {
                    "kind": 8,
                    "retType": "radio.Packet",
                    "extendsTypes": []
                },
                "radio.Packet.receivedNumber": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The number payload if a number was sent in this packet (via ``sendNumber()`` or ``sendValue()``)\nor 0 if this packet did not contain a number."
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_number"
                },
                "radio.Packet.receivedString": {
                    "kind": 2,
                    "retType": "string",
                    "attributes": {
                        "jsDoc": "The string payload if a string was sent in this packet (via ``sendString()`` or ``sendValue()``)\nor the empty string if this packet did not contain a string."
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_string"
                },
                "radio.Packet.receivedBuffer": {
                    "kind": 2,
                    "retType": "Buffer",
                    "attributes": {
                        "jsDoc": "The buffer payload if a buffer was sent in this packet\nor the empty buffer"
                    },
                    "isInstance": true,
                    "pyQName": "radio.Packet.received_buffer"
                },
                "radio.Packet.time": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The system time of the sender of the packet at the time the packet was sent."
                    },
                    "isInstance": true
                },
                "radio.Packet.serial": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The serial number of the sender of the packet or 0 if the sender did not sent their serial number."
                    },
                    "isInstance": true
                },
                "radio.Packet.signal": {
                    "kind": 2,
                    "retType": "number",
                    "attributes": {
                        "jsDoc": "The received signal strength indicator (RSSI) of the packet."
                    },
                    "isInstance": true
                },
                "radio.onDataPacketReceived": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-data-packet-received",
                        "blockHandlerKey": "radioreceived",
                        "deprecated": "true",
                        "mutate": "objectdestructuring",
                        "mutateText": "Packet",
                        "mutateDefaults": "receivedNumber;receivedString:name,receivedNumber:value;receivedString",
                        "blockId": "radio_on_packet",
                        "block": "on radio received",
                        "blockGap": "8",
                        "jsDoc": "Deprecated. Use onDataReceived() instead\nRegisters code to run when the radio receives a packet. Also takes the\nreceived packet from the radio queue.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(packet: radio.Packet) => void"
                        }
                    ],
                    "pyQName": "radio.on_data_packet_received"
                },
                "radio.onReceivedNumberDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-number",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_number",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a number. Deprecated, use\nonReceivedNumber instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedNumber: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedNumber",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_number_deprecated"
                },
                "radio.onReceivedValueDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-value",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_value",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a key value pair. Deprecated, use\nonReceivedValue instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(name: string, value: number) => void",
                            "handlerParameters": [
                                {
                                    "name": "name",
                                    "type": "string"
                                },
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_value_deprecated"
                },
                "radio.onReceivedStringDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-string",
                        "blockHandlerKey": "radioreceived",
                        "blockId": "radio_on_string",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a string. Deprecated, use\nonReceivedString instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedString: string) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedString",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_string_deprecated"
                },
                "radio.onReceivedBufferDeprecated": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/on-received-buffer",
                        "blockHandlerKey": "radioreceived",
                        "blockHidden": true,
                        "blockId": "radio_on_buffer",
                        "block": "on radio received",
                        "blockGap": "16",
                        "useLoc": "radio.onDataPacketReceived",
                        "deprecated": "1",
                        "jsDoc": "Registers code to run when the radio receives a buffer. Deprecated, use\nonReceivedBuffer instead.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "on radio received",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [
                        {
                            "name": "cb",
                            "type": "(receivedBuffer: Buffer) => void",
                            "handlerParameters": [
                                {
                                    "name": "receivedBuffer",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ],
                    "pyQName": "radio.on_received_buffer_deprecated"
                },
                "radio.receivedNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-number",
                        "deprecated": "1",
                        "jsDoc": "Returns the number payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or 0 if that packet did not\ncontain a number."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_number"
                },
                "radio.receivedSerial": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-serial",
                        "deprecated": "1",
                        "jsDoc": "Returns the serial number of the sender micro:bit from the last packet taken\nfrom the radio queue (via ``receiveNumber``, ``receiveString``, etc) or 0 if\nthat packet did not send a serial number."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_serial"
                },
                "radio.receivedString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "help": "radio/received-string",
                        "deprecated": "1",
                        "jsDoc": "Returns the string payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or the empty string if that\npacket did not contain a string."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_string"
                },
                "radio.receivedBuffer": {
                    "kind": -3,
                    "retType": "Buffer",
                    "attributes": {
                        "help": "radio/received-buffer",
                        "deprecated": "1",
                        "jsDoc": "Returns the buffer payload from the last packet taken from the radio queue\n(via ``receiveNumber``, ``receiveString``, etc) or the empty string if that\npacket did not contain a string."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_buffer"
                },
                "radio.receivedTime": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-time",
                        "deprecated": "1",
                        "jsDoc": "Returns the system time of the sender micro:bit at the moment when it sent the\nlast packet taken from the radio queue (via ``receiveNumber``,\n``receiveString``, etc)."
                    },
                    "parameters": [],
                    "pyQName": "radio.received_time"
                },
                "radio.receiveNumber": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/receive-number",
                        "weight": 46,
                        "blockId": "radio_datagram_receive",
                        "block": "radio receive number",
                        "blockGap": "8",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and returns the packet's number\npayload or 0 if the packet did not contain a number.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio receive number",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.receive_number"
                },
                "radio.receiveString": {
                    "kind": -3,
                    "retType": "string",
                    "attributes": {
                        "blockId": "radio_datagram_receive_string",
                        "block": "radio receive string",
                        "blockGap": "8",
                        "weight": 44,
                        "help": "radio/receive-string",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and returns the packet's string\npayload or the empty string if the packet did not contain a string.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio receive string",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.receive_string"
                },
                "radio.receivedSignalStrength": {
                    "kind": -3,
                    "retType": "number",
                    "attributes": {
                        "help": "radio/received-signal-strength",
                        "weight": 40,
                        "blockId": "radio_datagram_rssi",
                        "block": "radio received signal strength",
                        "deprecated": "true",
                        "blockHidden": true,
                        "jsDoc": "Gets the received signal strength indicator (RSSI) from the last packet taken\nfrom the radio queue (via ``receiveNumber``, ``receiveString``, etc). Not supported in simulator.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio received signal strength",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.received_signal_strength"
                },
                "radio.writeValueToSerial": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/write-value-to-serial",
                        "weight": 3,
                        "blockId": "radio_write_value_serial",
                        "block": "radio write value to serial",
                        "deprecated": "true",
                        "jsDoc": "Reads the next packet from the radio queue and and writes it to serial\nas JSON.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio write value to serial",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.write_value_to_serial"
                },
                "radio.writeReceivedPacketToSerial": {
                    "kind": -3,
                    "attributes": {
                        "help": "radio/write-received-packet-to-serial",
                        "weight": 3,
                        "blockId": "radio_write_packet_serial",
                        "block": "radio write received packet to serial",
                        "advanced": true,
                        "deprecated": "true",
                        "jsDoc": "Writes the last received packet to serial as JSON. This should be called\nwithin an ``onDataPacketReceived`` callback.",
                        "_def": {
                            "parts": [
                                {
                                    "kind": "label",
                                    "text": "radio write received packet to serial",
                                    "style": []
                                }
                            ],
                            "parameters": []
                        }
                    },
                    "parameters": [],
                    "pyQName": "radio.write_received_packet_to_serial"
                }
            }
        },
        "sha": "24e68bb2aa11a5a50df0dfbbe248af62fca7915c8254535a676e5d1a0e0b167b"
    }
}