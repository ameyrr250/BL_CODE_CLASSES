"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var nodeutil = require("./nodeutil");
var path = require("path");
var fs = require("fs");
exports.GOOGLE_API_KEY = "GOOGLE_API_KEY";
function checkApiKey() {
    if (!pxt.youtube.apiKey) {
        var k = process.env[exports.GOOGLE_API_KEY];
        if (!k) {
            throw new Error("Missing " + exports.GOOGLE_API_KEY + " to access YouTube Apis. Use https://console.developers.google.com/ to generate a new API key.");
        }
        pxt.youtube.apiKey = k;
    }
}
function renderPlaylistAsync(fn, id) {
    return __awaiter(this, void 0, void 0, function () {
        var assets, playlist, videos, playlistUrl, cards, _i, cards_1, card, cimg, limg, rimg, mixerRx, md;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fn = fn.replace(/\.md$/i, '');
                    assets = "/static/" + fn;
                    nodeutil.mkdirP("docs" + assets);
                    return [4 /*yield*/, pxt.youtube.playlistInfoAsync(id)];
                case 1:
                    playlist = _a.sent();
                    return [4 /*yield*/, pxt.youtube.listPlaylistVideosAsync(id)];
                case 2:
                    videos = _a.sent();
                    playlistUrl = pxt.youtube.watchUrl(undefined, playlist.id);
                    cards = videos.map(pxt.youtube.playlistItemToCodeCard);
                    // remove delete movies
                    cards = cards.filter(function (card) { return !!card.imageUrl; });
                    _i = 0, cards_1 = cards;
                    _a.label = 3;
                case 3:
                    if (!(_i < cards_1.length)) return [3 /*break*/, 7];
                    card = cards_1[_i];
                    cimg = assets + "/" + card.youTubeId + ".jpg";
                    limg = "docs" + cimg;
                    if (!!nodeutil.fileExistsSync(limg)) return [3 /*break*/, 5];
                    return [4 /*yield*/, pxt.Util.requestAsync({
                            url: card.imageUrl,
                            method: "GET",
                            responseArrayBuffer: true
                        })];
                case 4:
                    rimg = _a.sent();
                    fs.writeFileSync(limg, rimg.buffer, 'binary');
                    _a.label = 5;
                case 5:
                    card.imageUrl = cimg;
                    _a.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 3];
                case 7:
                    mixerRx = /(https:\/\/)?(mixer.com\/\w+)/.exec(playlist.snippet.description);
                    if (!!mixerRx) {
                        // reverse videos to show latest first
                        cards.reverse();
                        cards.unshift({
                            "name": "Live Coding",
                            "description": "Subscribe to our mixer.com live coding stream.",
                            "url": "https://" + mixerRx[2],
                            "imageUrl": assets + "/live.png"
                        });
                    }
                    // trailing card
                    cards.push({
                        "name": "PlayList",
                        "description": "See entire playlist on YouTube",
                        "url": playlistUrl,
                        "youTubePlaylistId": id,
                        "imageUrl": assets + "/playlist.png"
                    });
                    md = "# " + playlist.snippet.title + "\n\n" + (playlist.snippet.description || "") + "\n\n## Videos\n\n```codecard\n" + JSON.stringify(cards, null, 4) + "\n```\n\n## See Also\n\n[YouTube Playlist](" + playlistUrl + ")\n\n";
                    nodeutil.writeFileSync(path.join('docs', fn + ".md"), md, { encoding: "utf8" });
                    return [2 /*return*/];
            }
        });
    });
}
function renderPlaylistsAsync(playlists) {
    checkApiKey();
    return Promise.all(Object.keys(playlists).map(function (fn) { return renderPlaylistAsync(fn, playlists[fn]); }))
        .then(function () { pxt.log('playlists refreshed'); });
}
exports.renderPlaylistsAsync = renderPlaylistsAsync;
